{"meta":{"title":"程序有Bug's后花园","subtitle":null,"description":"不乱于心 不困于情 不畏将来 不念过去 如此 甚好！","author":"谢新根","url":"http://blog.xxgtalk.cn"},"pages":[{"title":"关于我","date":"2018-08-14T13:44:14.000Z","updated":"2018-09-27T10:59:38.630Z","comments":false,"path":"about/index.html","permalink":"http://blog.xxgtalk.cn/about/index.html","excerpt":"","text":"个人信息姓名: 谢新根昵称: 程序有Bug （英名:XXG）地址：目前浪迹于大长沙QQ: 1002275364自我描述: 爱代码爱生活 技术星级 技术点 星级 .NET、.NETCore、js、SqlServer Dapper、EF、PetaPoco Signalr、ABP、DDD、Redis、RabbitMQ、IdentityServer CAP、Consul、Ocelot、微服务、Polly、OChars、微信公众号、微信小程序 React、Antd、Vue、ElementUI、TypeScript、Webpack Docker、CICD、GitLab、Linux 第三方支付、第三方登录、快递接口、短信接口、web快递单打印、条码打印、导出excel,word,pdf等常用第三的东西 做过的系统 临床试验平台 跨境电商物流系统 外贸ERP 其他(懒得写了) 个人链接 博客、github博客 Github demo –(服务器比较弱) 其他"},{"title":"所有分类","date":"2018-08-14T13:42:41.000Z","updated":"2018-09-27T10:59:38.631Z","comments":true,"path":"categories/index.html","permalink":"http://blog.xxgtalk.cn/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2018-08-14T01:28:57.000Z","updated":"2018-09-27T10:59:38.640Z","comments":true,"path":"tags/index.html","permalink":"http://blog.xxgtalk.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"umi文件拆分","slug":"front/react/umi-split-chunks","date":"2018-11-11T03:35:10.000Z","updated":"2018-11-11T03:54:34.644Z","comments":true,"path":"2018/11/11/front/react/umi-split-chunks/","link":"","permalink":"http://blog.xxgtalk.cn/2018/11/11/front/react/umi-split-chunks/","excerpt":"umi文件拆分","text":"umi文件拆分 前言 在umi群里有群友在问umi打包后umi.js文件有1M多甚至更多，那么网站加载的时候会等待这个文件加载完成 可能需要好些时间 这个是比较难忍受的,其实umi有提供代码拆分的功能 只是文档不是很全 这里写了个片博客 谈谈怎么拆分的 使用命令yarn run analyze 打开分析页面，运行后会打开如图的页面 analyze是package.js中定义好的命令’cross-env ANALYZE=1 umi build’ 可以自行添加或者查看umi文档 如图所示，目前umi文件比较大，现在来做拆分，比如这：把@ant-design和antd这两个拆分为antdesigns文件、把react|react-dom|react-router|react-router-dom|lodash|lodash-decorators|redux-saga|re-select|dva|moment这些拆分为wendors文件 编写拆分规则 在umi.js||config.js文件的chainWebpack 中加入 123456789101112131415161718192021222324config.optimization.splitChunks(&#123; chunks: 'async', minSize: 30000, maxSize: 0, minChunks: 1, maxAsyncRequests: 5, maxInitialRequests: 3, automaticNameDelimiter: '~', name: true, cacheGroups: &#123; vendors: &#123; name: 'vendors', chunks: 'all', test: /[\\\\/]node_modules[\\\\/](react|react-dom|react-router|react-router-dom|lodash|lodash-decorators|redux-saga|re-select|dva|moment)[\\\\/]/, priority: -10, &#125;, antdesigns: &#123; name: 'antdesigns', chunks: 'all', test: /[\\\\/]node_modules[\\\\/](@ant-design|antd)[\\\\/]/, priority: -11, &#125; &#125;, &#125;); 在umi.js或者config.js 的umi-plugin-react中的chunks属性中配置配置如下 1chunks: ['vendors','antdesigns', 'umi'] 重新执行 yarn run analyze 查看拆分后的情况，如图 致次 拆分完成","categories":[{"name":"React","slug":"React","permalink":"http://blog.xxgtalk.cn/categories/React/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://blog.xxgtalk.cn/tags/前端/"},{"name":"React","slug":"React","permalink":"http://blog.xxgtalk.cn/tags/React/"},{"name":"umi","slug":"umi","permalink":"http://blog.xxgtalk.cn/tags/umi/"}]},{"title":"vscode下调试es6编写的npm包","slug":"front/other/VSCodeDebug","date":"2018-09-22T13:10:10.000Z","updated":"2018-09-27T10:59:38.624Z","comments":false,"path":"2018/09/22/front/other/VSCodeDebug/","link":"","permalink":"http://blog.xxgtalk.cn/2018/09/22/front/other/VSCodeDebug/","excerpt":"","text":"前置条件 安装好node环境 创建一个文件夹 执行npm init 更具需要选择 通过yarn安装babel-preset-es2015 (也可以通过npm等) 12345yarn add -d babel-cli babel-preset-es2015 //安装babel-cli与babel-preset-es2015yarn add -d babel-preset-stage-1 //支持babel-preset-stage-1//yarn add -d babel-preset-react //如果需要支持react//yarn add -d babel-plugin-transform-object-assign //适用于Object.assign()//yarn add -d babel-plugin-transform-object-rest-spread //适用于展开运算符 在package.json文件夹中添加一个scripts 如下所示: 123scripts: &#123; &quot;build&quot;: &quot;babel src --watch --source-maps --presets=es2015,stage-1 --out-dir dist&quot; //切记 --source-maps一定要加上&#125; 跟目录下添加.babelrc 内容如下 1234567891011&#123; &quot;presets&quot;: [ &quot;es2015&quot; //,&quot;react&quot; //如果有使用react ] //, //&quot;plugins&quot;:[ // &quot;transform-object-assign&quot;, //适用于Object.assign() // &quot;transform-object-rest-spread&quot; //适用于展开运算符 ... //]&#125; 编写自己的代码，整体项目结构如下|-src&emsp;|–cores&emsp;&emsp;|–math.js –被引用的js文件&emsp;|–index.js –主入口js文件|.babelrc|.package.json 切到vscode左侧的调试窗口，点击添加配置这个时候会生成一个launch.json文件，修改内容如下 1234567891011121314151617&#123; // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ &#123; &quot;type&quot;: &quot;node&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;name&quot;: &quot;Launch App.js&quot;, &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/src/index.js&quot;, &quot;outFiles&quot;: [ &quot;$&#123;workspaceRoot&#125;/dist/**/*.js&quot; ] &#125; ]&#125; 先生成在运行调试npm run build会生成一个dist目录，然后点击调试上的运行按钮 执行调试","categories":[{"name":"前端-其他","slug":"前端-其他","permalink":"http://blog.xxgtalk.cn/categories/前端-其他/"}],"tags":[{"name":"前端-其他","slug":"前端-其他","permalink":"http://blog.xxgtalk.cn/tags/前端-其他/"}]},{"title":"资料收集","slug":"tools/collections","date":"2018-09-13T01:10:10.000Z","updated":"2018-09-27T10:59:38.626Z","comments":true,"path":"2018/09/13/tools/collections/","link":"","permalink":"http://blog.xxgtalk.cn/2018/09/13/tools/collections/","excerpt":"各大开源组件收藏夹","text":"各大开源组件收藏夹 后端大开源组件 名称 描述 地址 异常收集框架 Exceptionless https://github.com/exceptionless/Exceptionless 容器监管 portainer https://github.com/portainer/portainer 爬虫 Hawk https://github.com/ferventdesert/Hawk 前端推荐库 名称 描述 地址 nzh 数字转中文（大写，小写）数字，金额 https://github.com/cnwhy/nzh lodash js数组、对象类库 https://github.com/lodash/lodash moment 日期处理库 https://github.com/moment/moment CICDGitlab CI 官方配置文件参数说明（中文）快速入门 https://docs.gitlab.com.cn/ce/ci/quick_start/README.html配置文档讲解 https://docs.gitlab.com.cn/ce/ci/yaml/ 持续集成的概念http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html","categories":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/tags/工具/"}]},{"title":"Docker中安装Consul","slug":"dotnetcore/consul/docker中安装Consul","date":"2018-09-04T13:48:20.000Z","updated":"2018-09-27T10:59:38.617Z","comments":true,"path":"2018/09/04/dotnetcore/consul/docker中安装Consul/","link":"","permalink":"http://blog.xxgtalk.cn/2018/09/04/dotnetcore/consul/docker中安装Consul/","excerpt":"Docker中安装Consul","text":"Docker中安装Consul Consul Docker镜像地址:https://hub.docker.com/_/consul Docker中启动Consul 1234567 docker run -d -e &apos;CONSUL_LOCAL_CONFIG=&#123;&quot;skip_leave_on_interrupt&quot;: true&#125;&apos; --name=consul1 consul agent -server -bind=119.29.92.252 -bootstrap-expect=3 -node=consul1 ``` * -node：节点的名称 * -bind：绑定的一个地址，用于节点之间通信的地址，可以是内外网，必须是可以访问到的地址 * -server：这个就是表示这个节点是个SERVER * -bootstrap-expect：这个就是表示期望提供的SERVER节点数目，数目一达到，它就会被激活，然后就是leader节点了2. 启动节点2、3 docker run -d -e &apos;CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;: true}&apos; --name=consul2 consul agent -server -bind=172.17.0.3 -join=119.29.92.252 -node-id=$(uuidgen | awk &apos;{print tolower($0)}&apos;) -node=consul2 docker run -d -e &apos;CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;: true}&apos; --name=consul3 consul agent -server -bind=172.17.0.4 -join=119.29.92.252 -node-id=$(uuidgen | awk &apos;{print tolower($0)}&apos;) -node=consul3 -client=172.17.0.4 ``` * -join：这个表示启动的时候，要加入到哪个集群内，这里就是说要加入到*节点1的集群 * -node-id：这个貌似版本8才加入的，这里用这个来指定唯一的节点ID，可以查看这个issue * -client：这个表示注册或者查询等一系列客户端对它操作的IP，如果不指定这个IP，默认是127.0.0.1。","categories":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/categories/NetCore/"}],"tags":[{"name":"Consul","slug":"Consul","permalink":"http://blog.xxgtalk.cn/tags/Consul/"},{"name":".NetCore微服务","slug":"NetCore微服务","permalink":"http://blog.xxgtalk.cn/tags/NetCore微服务/"}]},{"title":"React资料收集","slug":"front/react/collection","date":"2018-08-01T01:10:10.000Z","updated":"2018-09-27T10:59:38.625Z","comments":true,"path":"2018/08/01/front/react/collection/","link":"","permalink":"http://blog.xxgtalk.cn/2018/08/01/front/react/collection/","excerpt":"React资料收集","text":"React资料收集 开发工具vscode、Rekit ESLinteslint-config-airbnb 最最最完整的javascript eslint规则 Prettier代码格式化工具,vscode支持 安装插件 添加.prettier文件 React DevTool、Redux DevToolchrome浏览器插件 单元测试相关 Jest:Facebook开源的JS单元测试狂阿基 JS DOM浏览器环境的NodeJS模拟 Enzyme:React组件渲染和测试 nock:模拟http请求 sinon：函数模拟和调用跟踪 istanbul:单元测试覆盖率","categories":[{"name":"React","slug":"React","permalink":"http://blog.xxgtalk.cn/categories/React/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://blog.xxgtalk.cn/tags/前端/"},{"name":"React","slug":"React","permalink":"http://blog.xxgtalk.cn/tags/React/"}]},{"title":"Docker安装RabbitMQ","slug":"docker/12docker-rabbitmq","date":"2018-06-08T03:30:10.000Z","updated":"2018-09-27T10:59:38.616Z","comments":true,"path":"2018/06/08/docker/12docker-rabbitmq/","link":"","permalink":"http://blog.xxgtalk.cn/2018/06/08/docker/12docker-rabbitmq/","excerpt":"Docker安装RabbitMQ","text":"Docker安装RabbitMQ 参考地址:https://hub.docker.com/_/rabbitmq/ 运行命令 1docker run -d -p 8092:15672 -p 5672:5672 --restart always --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER=xxg -e RABBITMQ_DEFAULT_PASS=Abcd1234 rabbitmq:3-management 说明-e RABBITMQ_DEFAULT_USER=xxg –默认用户名-e RABBITMQ_DEFAULT_PASS=Abcd1234 –默认密码rabbitmq:3-management –表示使用带插件版本的(可以通过http://host-ip:8092 访问管理控制台)4369/tcp 服务器 需要开放这个端口5671/tcp 服务器 需要开放这个端口","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"Docker安装redis","slug":"docker/11docker-redis","date":"2018-06-06T03:15:10.000Z","updated":"2018-09-27T10:59:38.615Z","comments":true,"path":"2018/06/06/docker/11docker-redis/","link":"","permalink":"http://blog.xxgtalk.cn/2018/06/06/docker/11docker-redis/","excerpt":"Docker下安装redis","text":"Docker下安装redis 创建网络docker network create net_redis 创建redis配置文件(/docker/redis/config/redis.conf) 1234#redis的databases数量databases 32#redis密码requirepass 123 通过docker-compose安装docker-compose -f redis-docker-compose.yml up -d文件链接","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"ASP.NET Core + Docker + Jenkins + gogs + CentOS 从零开始搭建持续集成","slug":"docker/10docker-jenkins-gogs-cicd","date":"2018-06-06T03:01:10.000Z","updated":"2018-09-27T10:59:38.615Z","comments":true,"path":"2018/06/06/docker/10docker-jenkins-gogs-cicd/","link":"","permalink":"http://blog.xxgtalk.cn/2018/06/06/docker/10docker-jenkins-gogs-cicd/","excerpt":"ASP.NET Core + Docker + Jenkins + gogs + CentOS 从零开始搭建持续集成","text":"ASP.NET Core + Docker + Jenkins + gogs + CentOS 从零开始搭建持续集成 参考地址：https://www.cnblogs.com/stulzq/p/8629165.htmlhttps://www.jianshu.com/p/64e9708c23e7前置条件 安装了docker、配置了加速镜像(参考01) 使用docker安装免费https证书 1234sudo docker run -it --rm --name certbot \\ -v &quot;/etc/letsencrypt:/etc/letsencrypt&quot; \\ -v &quot;/var/lib/letsencrypt:/var/lib/letsencrypt&quot; \\ certbot/certbot certonly 按照提示进行操作 docker安装Gogs (一个gitserver，类似于gitlab)创建文件/docker/gogs 然后运行如下命令docker run -d –name=gogs -p 23:22 -p 8090:3000 –mount type=bind,src=/docker/gogs,dst=/data –restart always gogs/gogs 参考地址 https://github.com/gogits/gogs/tree/master/docker docker 安装jenkins自定义镜像 12345678910111213141516171819FROM jenkinsUSER root#清除了基础镜像设置的源，切换成腾讯云的jessie源#使用非腾讯云环境的需要将 tencentyun 改为 aliyunRUN echo '' &gt; /etc/apt/sources.list.d/jessie-backports.list \\ &amp;&amp; echo \"deb http://mirrors.tencentyun.com/debian jessie main contrib non-free\" &gt; /etc/apt/sources.list \\ &amp;&amp; echo \"deb http://mirrors.tencentyun.com/debian jessie-updates main contrib non-free\" &gt;&gt; /etc/apt/sources.list \\ &amp;&amp; echo \"deb http://mirrors.tencentyun.com/debian-security jessie/updates main contrib non-free\" &gt;&gt; /etc/apt/sources.list#更新源并安装缺少的包RUN apt-get update &amp;&amp; apt-get install -y libltdl7 &amp;&amp; apt-get updateARG dockerGid=999RUN echo \"docker:x:$&#123;dockerGid&#125;:jenkins\" &gt;&gt; /etc/group # 安装 docker-compose 因为等下构建环境的需要RUN curl -L https://github.com/docker/compose/releases/download/1.20.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composeRUN chmod +x /usr/local/bin/docker-compose docker build -t auto-jenkins .创建目录/docker/jenkins/docker.sock、/docker/jenkins/jenkins_home123456docker run --name jenkins -p 8091:8080 -p 50000:50000 \\ --mount type=bind,src=/docker/jenkins/docker.sock,dst=/var/run/docker.sock \\ --mount type=bind,src=$(which docker),dst=/bin/docker \\ --mount type=bind,src=/docker/jenkins/jenkins_home,dst=/var/jenkins_home \\ --restart always \\ -d auto-jenkins docker run –name jenkins -p 8091:8080 -p 50000:50000 –mount type=bind,src=/docker/jenkins/docker.sock,dst=/var/run/docker.sock –mount type=bind,src=$(which docker),dst=/bin/docke –mount type=bind,src=/docker/jenkins/jenkins_home,dst=/var/jenkins_home –restart always -d auto-jenkins ASP.NET Core 持续集成 Jenkins配置Gogs webhook插件 Jenkins持续集成演示","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"Centos7.x 安装gitlab-runner","slug":"docker/07gitlab01-runner","date":"2018-06-05T02:35:10.000Z","updated":"2018-09-27T10:59:38.614Z","comments":true,"path":"2018/06/05/docker/07gitlab01-runner/","link":"","permalink":"http://blog.xxgtalk.cn/2018/06/05/docker/07gitlab01-runner/","excerpt":"Centos7.x 安装gitlab-runner","text":"Centos7.x 安装gitlab-runner 说明：开始尝试过在docker中安装gitlab-runner注册gitlab-runner啥的都没问题 但是gitlab-ci.yml文件中使用docker的时候提示xxxx daemon文件问题 折腾了好几天没能解决(大概的意思就是在容器内部使用使用docker访问不了外面的啥东西最后放弃了，该用在centos中直接安装gitlab-runner形式)参考地址: http://www.cnblogs.com/xishuai/p/ubuntu-gitlab-ci-docker-aspnet-core-part-2.html【前置条件】 系统安装了docker、docker-compose、git、dotnetcoredocker 这个必须要git 必须，因为需要通过git获取代码docker-compose根据情况 因为我的ci中使用了docker-compose所以要dotnetcore 因为我是微软的铁杆粉丝 安装docker、docker-compose参考01 gitlab-runner 安装命令sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-linux-amd64 给予其权限sudo chmod +x /usr/local/bin/gitlab-runner 注册sudo gitlab-runner register根据提示输入gitlab地址、token、描述信息、tag、[true|false]、[true|false]、shell 添加一个用于跑 GitLab Runner 的gitlab-runner用户sudo useradd –comment ‘GitLab Runner’ –create-home gitlab-runner –shell /bin/bash 指定 GitLab Runner 执行的用户和工作目录sudo gitlab-runner install –user=gitlab-runner –working-directory=/home/gitlab-runner 启动gitlab-runnersudo gitlab-runner start 把 GitLab Runner 服务器中的gitlab-runner账户，添加到docker用户组中sudo usermod -aG docker gitlab-runner 在 GitLab Runner 服务器中，切换到gitlab-runner用户下，配置 SSH 123su gitlab-runnerssh-keygen -t rsa -P &apos;&apos;ssh-copy-id root@你的ip地址 安装gitcd ~yum -y install git","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"Docker安装GitLab","slug":"docker/07gitlab","date":"2018-06-05T02:30:10.000Z","updated":"2018-09-27T10:59:38.614Z","comments":true,"path":"2018/06/05/docker/07gitlab/","link":"","permalink":"http://blog.xxgtalk.cn/2018/06/05/docker/07gitlab/","excerpt":"Docker下安装GitLab","text":"Docker下安装GitLab 前置条件 安装好docker docker运行gitlab(由于22端口被ssh占用 改用23) 在/docker/gitlab 目录下分别创建data、config、logs三个文件夹 执行命令1234567891011sudo docker run --detach --hostname gitlab.xxgtalk.cn --publish 443:443 --publish 8090:80 --publish 23:22 --name gitlab --restart always -v /docker/gitlab/config:/etc/gitlab -v /docker/gitlab/logs:/var/log/gitlab -v /docker/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce* * * * * * 介绍 * * * * * *sudo docker run --detach \\--hostname gitlab.xxgtalk.cn \\--publish 443:443 --publish 8090:80 --publish 23:22 \\ --name gitlab \\--restart always \\-v /docker/gitlab/config:/etc/gitlab \\ 配置文件映射到config文件夹-v /docker/gitlab/logs:/var/log/gitlab \\-v /docker/gitlab/data:/var/opt/gitlab \\gitlab/gitlab-ce ::: warning 注意 因为配置的ssh端口是23 所以需要修改/docker/gitlab/config/gitlab.rb文件中修改或增加gitlab_rails[‘gitlab_shell_ssh_port’] = 23 查看日志docker logs –follow gitlab::: docker下安装gitlab runner [2.1] 安装gitlab runner 123456docker run -d --name gitlab-runner --restart always -v /docker/gitlab-runner/run/docker.sock:/var/run/docker.sock -v /docker/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner* * * * * * 介绍 * * * * * *docker run -d --name gitlab-runner --restart always \\ -v /docker/gitlab-runner/run/docker.sock:/var/run/docker.sock \\ -v /docker/gitlab-runner/config:/etc/gitlab-runner \\ gitlab/gitlab-runner [2.2] 注册gitlab runner(官方建议跟gitlab不要放在同一个服务器上)【最后没有成功,改用07Gitlab01-runner 】参考地址:https://docs.gitlab.com.cn/runner/register/index.html 运行下面命令启动注册程序docker exec -it gitlab-runner gitlab-runner register 输入 GitLab 实例 URLgitlab的域名 输入获取到的用于注册 Runner 的 token:y8R7nLY4x3mdBiZt9AQV 输入该 Runner 的描述，稍后也可通过 GitLab’s UI 修改: 给该 Runner 指派 tags, 稍后也可以在 GitLab’s UI 修改: 选择 Runner 是否接收未指定 tags 的任务（默认值：false）， 稍后可以在 GitLab’s UI 修改： true 选择是否为当前项目锁定该 Runner， 之后也可以在 GitLab’s UI 修改。 该功能通常用于被指定为某个项目的 Runner （默认值：true）： 选择 Runner executor:我们使用docker 如果你选择 Docker 作为你的 executor，注册程序会让你设置一个默认的镜像， 作用于.gitlab-ci.yml中未指定镜像的项目输入: microsoft/dotnet 搭建私有仓库 在docker中创建文件夹registry 用来存放仓库镜像，然后运行命令 1docker run -d -v /docker/registry:/var/lib/registry -p 8091:5000 --restart=always --name registry registry 使用docker-compose安装请查看docker-compose文件","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"使用docker-compose","slug":"docker/06docker-compose","date":"2018-06-04T02:01:10.000Z","updated":"2018-09-27T10:59:38.613Z","comments":true,"path":"2018/06/04/docker/06docker-compose/","link":"","permalink":"http://blog.xxgtalk.cn/2018/06/04/docker/06docker-compose/","excerpt":"使用docker-compose按照webapi&amp;mysql","text":"使用docker-compose按照webapi&amp;mysql 接Docker制作WebApi&amp;MySql 创建docker-compose.yml文件 1234567891011121314151617181920212223version '1'services: db: image: mysql/mysql-server container_name: 'db' command: mysqld --character-set-server=utf8 --collaction-server=utf8_general_ci restart: always ports: -'3306:3306' environment: MYSQL_ROOT_PASSWORD: Abcd1234 MYSQL_USER: sa MYSQL_PASWORD: Abcd1234 volumes: - /docker/mysql/db-init:/docker-entrypoint-initdb.d webapi: build: . container_name: 'webapi01' ports: -'5000:80' depends_on: - db 【注意】由于db需要初始化用户角色 所以在资料卷中指定目录下放入sql 内容GRANT ALL PRIVILEGES ON . TO ‘sa‘@’%’ WITH GRANT OPTION; 执行命令docker-compose builddocker up //docker down 与docker up相反docker-compose文件","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[]},{"title":"Docker制作WebApi&MySql","slug":"docker/05docker-webapi-mysql","date":"2018-06-03T01:30:10.000Z","updated":"2018-09-27T10:59:38.613Z","comments":false,"path":"2018/06/03/docker/05docker-webapi-mysql/","link":"","permalink":"http://blog.xxgtalk.cn/2018/06/03/docker/05docker-webapi-mysql/","excerpt":"Docker制作WebApi&amp;MySql 直接上图","text":"Docker制作WebApi&amp;MySql 直接上图 docker文件 1234567891011121314FROM microsoft/aspnetcore-build as build-envWORKDIR /codeCOPY *.csproj ./RUN dotnet restoreCOPY . ./RUN dotnet publish -c Release -o outFROM microsoft/aspnetcoreWORKDIR /appCOPY --from=build-env /code/out ./EXPOSE 50000ENTRYPOINT [\"dotnet\",\"WebApiDocker.dll\"] 编译docker文件 1docker build -t xxg/aspnetcore:1.0 . 使用该镜像启动一个容器a. docker run -d -p 5000:80 –name api01 –link mysql01:db xxg/aspnetcore:1.0b. 使用bridge形式docker network create -d bridge mybridge //创建一个网络docker run -d -p 5000:5000 –net mybridge –name api1 xxg/aspnetcore:1.0docker network connect mysql01 mybridge //表示将mysql01跟mybridge网络连接起来 –link mysql01:db –表示将mysql01取个别名db并连接到当前容器–net mybridge –表示使用指定网络","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"Docker安装MsSqlserver","slug":"docker/04docker-mssqlserver","date":"2018-06-02T01:25:10.000Z","updated":"2018-09-27T10:59:38.607Z","comments":true,"path":"2018/06/02/docker/04docker-mssqlserver/","link":"","permalink":"http://blog.xxgtalk.cn/2018/06/02/docker/04docker-mssqlserver/","excerpt":"Docker安装MsSqlserver","text":"Docker安装MsSqlserver 未成功 执行命令 1234567 docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=Abcd1234' -v=/docker/mssql:/var/opt/mssql -p 1433:1433 --name sqlserver -d microsoft/mssql-server-linux:2017-latest * * * * * * * * * 备注 * * * * * * * * * docker run -e 'ACCEPT_EULA=Y' --是否接受协议 -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' --设置密码 -p 1433:1433 --端口 --name sqlserver --用户 -d microsoft/mssql-server-linux:2017-latest --2017latest版本","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"Docker 安装MySql","slug":"docker/04docker_install_mysql","date":"2018-06-02T01:20:10.000Z","updated":"2018-09-27T10:59:38.612Z","comments":true,"path":"2018/06/02/docker/04docker_install_mysql/","link":"","permalink":"http://blog.xxgtalk.cn/2018/06/02/docker/04docker_install_mysql/","excerpt":"Docker 安装MySql","text":"Docker 安装MySql 将docker容器中的实例中的文件跟物理文件链接起来 即使删掉容器 数据还在 再创建容器的时候 任然可以对应上之前的数据 一、安装篇 使用docker-compose安装 [1.1] 在目录/docker/mysql/mysql-init下创建init-user.sql文件 内容如下 123use mysql;CREATE USER &apos;sa&apos;@&apos;%&apos; IDENTIFIED BY &apos;Abcd1234&apos;;GRANT ALL PRIVILEGES ON *.* TO &apos;sa&apos;@&apos;%&apos;; [1.2]docker-compose -f mysql-docker-compose.yml up -d对应的mysql-docker-compose.yml文件 1234567891011121314151617181920212223version: '2.3'services: db: image: mysql/mysql-server container_name: mysql01 restart: always command: mysqld --character-set-server=utf8 --collation-server=utf8_general_ci ports: - 3306:3306# networks:# - net_mysql environment: MYSQL_ROOT_PASSWORD: Abcd1234 volumes: - /docker/mysql/mysql-init:/docker-entrypoint-initdb.d - /docker/mysql/data:/var/lib/mysql# volumes:# mysql-data:# external: true# networks:# net_mysql:# external: true mount【推荐使用】 1docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=Abcd1234 --name mysql01 --restart always --mount type=bind,src=/docker/mysql/config/my.cnf,dst=/etc/my.cnf --mount type=bind,src=/docker/mysql/data,dst=/var/lib/mysql mysql /docker/mysql/config/my.cnf &nbsp;&nbsp;对应物理磁盘位置 需要新建my.cnf 内容如下1234567[mysqld]user=rootcharacter-set-server=utf8[client]default-character-set=utf8[mysql]default-character-set=utf8 /etc/my.cnf –docker创建mysql后该mysql容器对应的配置文件/docker/mysql/data –对应物理磁盘位置 表示docker中数据映射到的物理文件位置/var/lib/mysql mysql/mysql-server &nbsp;&nbsp;对应docker中mysql实例容器的文件位置-e MYSQL_ROOT_PASSWORD=Abcd1234 &nbsp;设置初始密码 volume[后期废用] 推荐使用mount形式 1docker run -d -p 3306:3306 --name mysql01 -v=/docker/mysql/config/my.cnf:/etc/my.cnf -v=/docker/mysql/data:/var/lib/mysql mysql/mysql-server 二、使用篇 docker 操作mysql 连接mysqldocker exec -it mysql01 bashmysql -u root -p [密码] –密码可以待mysql容器启动后通过docker logs mysql01 找到生成的随机密码 密码在一段类型： 设置mysql密码SET PASSWORD FOR ‘root‘@’localhost’ = PASSWORD(‘Abcd1234’); –用户名为root 密码为Abcd1234 实验一下 【–exit 退出当前】use mysql; –使用数据库查询select user,host from user; –查询用户信息show variables like ‘%char%’; –查看当前使用的字符集在mysql中创建网络用户 这样可以非本机访问mysql&gt; CREATE USER ‘sa‘@’%’ IDENTIFIED BY ‘Abcd1234’;mysql&gt; GRANT ALL PRIVILEGES ON . TO ‘sa‘@’%’;docker run -d -p 3306:3306 -e”MYSQL_USER=Zarc” -e”MYSQL_PASSWORD=pwd123456” -e”MYSQL_ROOT_PASSWORD=password123” -e”MYSQL_RANDOM_ROOT_PASSWORD=true” –name mysql01 mysql/mysql-server –character-set-server=utf8 –collation-server=utf8_general_ci备注： : When this is true (which is its default state, unless MYSQL_ROOT_PASSWORD is set or MYSQL_ALLOW_EMPTY_PASSWORD is set to true), a random password for the server’s root user is generated when the Docker container is started 当这个MYSQL_RANDOM_ROOT_PASSWORD 为true 时 为root用户设置密码是没有作用的还是会生成随机的密码，设置为false 或者不加这个环境变量","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"Docker安装mongodb","slug":"docker/03docker-mongodb","date":"2018-06-01T01:15:10.000Z","updated":"2018-09-27T10:59:38.606Z","comments":true,"path":"2018/06/01/docker/03docker-mongodb/","link":"","permalink":"http://blog.xxgtalk.cn/2018/06/01/docker/03docker-mongodb/","excerpt":"Docker安装mongodb","text":"Docker安装mongodb 配置好docker的加速镜像[参考02Docker安装及配置] docker pull mongo 拉去mongo镜像 启动docker实例 方式一docker run -d -p 27017:27017 –name mongodb mongo方式二 将容器的文件挂在到Host Volume–首先创建文件夹 /docker/mongo/config 以及/docker/mongo/data 用于与docker中mongo实例链接 然后运行命令 1docker run -d -p 27017:27017 --name mongo01 -v /docker/mongo/config:/data/configdb -v=/docker/mongo/data:/data/db mongo","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"Docker安装及配置加速镜像","slug":"docker/01docker-config","date":"2018-05-30T01:15:08.000Z","updated":"2018-09-27T10:59:38.606Z","comments":true,"path":"2018/05/30/docker/01docker-config/","link":"","permalink":"http://blog.xxgtalk.cn/2018/05/30/docker/01docker-config/","excerpt":"Docker安装及配置加速镜像","text":"Docker安装及配置加速镜像 个人阿里云加速镜像个人地址&nbsp; https://noe4mlw6.mirror.aliyuncs.com CentOS 7 (使用yum进行安装)如果之前安装过】先卸载依赖 123456sudo yum remove docker \\docker-common \\container-selinux \\docker-selinux \\docker-engine \\docker-engine-selinux 直接安装curl -sSL https://get.docker.com/ | sh 启动 并设置开机启动 12sudo systemctl start dockersudo systemctl enable docker 配置docker使用国内镜像如何配置镜像加速器您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：123&#123; &quot;registry-mirrors&quot;: [&quot;https://noe4mlw6.mirror.aliyuncs.com&quot;]&#125; 重启docker12sudo systemctl daemon-reloadsudo systemctl restart docker 安装docker-compose sudo curl -L https://github.com/docker/compose/releases/download/1.20.0/docker-compose-`uname -s-uname -m` -o /usr/local/bin/docker-compose sudo chmod a+x /usr/local/bin/docker-compose 卸载sudo rm /usr/local/bin/docker-compose","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"Docker常用命令","slug":"docker/00command","date":"2018-05-28T01:10:10.000Z","updated":"2018-09-27T10:59:38.605Z","comments":true,"path":"2018/05/28/docker/00command/","link":"","permalink":"http://blog.xxgtalk.cn/2018/05/28/docker/00command/","excerpt":"Docker常用命令","text":"Docker常用命令 命令 说明 参数 docker –version 查看当前docker版本 docker ps 查看当前正在运行的容器 docker images 查看本地所有镜像 docker pull [镜像名称] 拉取一个镜像到本地 docker run [容器名称] 运行一个容器 docker rm [容器名称] 删除本地使用过的容器 docker start [Name] 启动指定容器 docker stop [Name] 关闭指定容器 docker pause [Name] 暂停指定容器 docker unpause [Name] 恢复指定容器 docker rmi -f $(docker images -a -q) 移除所有images docker rmi $(docker images -f ‘dangling=true’ -q) 移除none的images docker inspect [容器名称] 查看容器的信息 docker exec -it [容器名称] bash 在容器内执行bash 比如执行后可以执行ls查看目录 也可以创建文件等 docker rm -fv [容器Id] 停止、删除容器、清除数据 docker images -f [option] 过滤查询 docker logs -f [container-name] 查看日志 ::: warning 温馨提示 docker run -p 8001:80 &nbsp;&nbsp;–运行 指定端口 8001外部端口 80表示内部端口 docker run -d &nbsp;&nbsp;–detach 还可以继续操作 不会阻塞 docker run –name &nbsp;&nbsp;–运行的docker镜像的名称 docker run -p 8001:80 &nbsp;&nbsp;–name myapi helloapi:latest表示运行docker中名为helloapi的容器 版本为latest docker的端口为80 本机的端口8001 名字为myapi docker ps -a &nbsp;&nbsp;–查看所有容器 不管有没运行 过滤查询docker images –filter “before=image1” 查询image1之后的docker images –filter “since=image3” 查询image3之前的docker images “wechat:v1.3.“ 查询wechat:1.3.x的docker rmi -f $(docker images “wechat:v1.2.“ -q) 移除wechat:v1.2.*版本的 docker logs查看日志docker logs -f gitlab 查看gitlab容器所有日志docker logs –tail 20 -f gitlab 查看gitlab最近20条的日志docker logs –since 30s -f gitlab 查看gitlab最近30s的日志:::","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.xxgtalk.cn/tags/Docker/"}]},{"title":"windows使用相关","slug":"tools/windows","date":"2018-05-20T01:10:15.000Z","updated":"2018-09-27T10:59:38.629Z","comments":true,"path":"2018/05/20/tools/windows/","link":"","permalink":"http://blog.xxgtalk.cn/2018/05/20/tools/windows/","excerpt":"window技巧-长期更新","text":"window技巧-长期更新 一、技巧篇 查看占用端口netstat -aon [|findstr “1005”] 查找1005端口被那个占用 windows下删除多层级文件夹：安装rimraf包：npm install -g rimraf然后通过：rimraf &lt;目录名称&gt; 来删除 *#06#:查看IphoneCMD 如何下载到本地，而不是边下载边更新：创建一个快捷方式，在快捷方式的后面加 “-layout” 双击后就是下载到本地 而不是安装 打开本地连接：ncpa.cpl 查看系统支持的最大内存：wmic memphysical get maxcapacity 修改hosts文件后刷新 ipconfig -flushdns二、快捷键 comexp.msc:打开window组件服务，可以查看事务 netplwiz :修改用户组相关 inetmgr:打开IIS ssms:SQLServer数据库 SQLServerManager11.msc 数据库管理工具 devenv:VS mstsc:远程 Alt+Enter 显示所选项的属性 Alt+Esc 以项目打开的顺序循环切换项目 Alt+向上键 在 Windows 资源管理器中查看上一级文件夹 Win + M：最小化所有窗口 Windows 徽标键 + 加号或减号 放大或缩小 Windows 徽标键 输入mspaint 打开画图 Windows 徽标键 输入psr打开系统视频录制 Windows 徽标键 snippingtool win7自带截图工具 notepad 打开记事本 write———-写字板 perfmon.msc—-计算机性能监测程序 services.msc 服务 f10或alt键 激活当前程序的菜单栏 osk————打开屏幕键盘 结束进程：cmd—taskkill /im`notepad.exe /t cdm常用命令：具体参考（http://www.51xue8.com/e/DownSys/play/?classid=31&amp;id=1001&amp;pathid=4&amp;jishu=26） ver====显示系统版本······ver/? =帮助 dir====显示驱动版本 · ·······dir/? =帮助 copy（用法4，全部复制）如：copy c:\\新建文件夹*.* ()d:\\txt chkdsk/?=====查看磁盘文件报告 chkdsk===检查磁盘 dir====C盘文件夹目录（详细，时间，大小··） dir/w =====显示C盘文件夹 （不显示时间，大小） dir/l 显示子文件夹 dir/p======屏幕显示不完时加p format====格式化磁盘（慎用）如：format g: format/?====格式化帮助 del=====删除文件 如：del c:\\··· del/?===删除帮助 md====创建文件夹 ipconfig ====查看ip等信息 ren=====文件重命名 nslookup======ip地址查询 exit=====退出 rd======删除目录 tasklist =====显示进程 type=======显示文本内容 tree=======显示所有文件名····显示D盘则tree d:\\ ping=======检测网络···如ping（必须空格）-f net user=========更改用户 net share====== 查看共享文件 help==============显示所有命令 gpedit.msc—–组策略 sndrec32——-录音机 Nslookup——-IP地址侦测器 explorer——-打开资源管理器 logoff———注销命令 tsshutdn——-60秒倒计时关机命令 lusrmgr.msc—-本机用户和组 services.msc—本地服务设置 oobe/msoobe /a—-检查XP是否激活 cleanmgr——-垃圾整理 net start messenger—-开始信使服务 compmgmt.msc—计算机管理 net stop messenger—–停止信使服务 conf———–启动netmeeting dvdplay——–DVD播放器 charmap——–启动字符映射表 diskmgmt.msc—磁盘管理实用程序 calc———–启动计算器 dfrg.msc——-磁盘碎片整理程序 chkdsk.exe—–Chkdsk磁盘检查 devmgmt.msc— 设备管理器 regsvr32 /u *.dll—-停止dll文件运行 drwtsn32—— 系统医生 rononce -p —-15秒关机 dxdiag———检查DirectX信息 regedt32——-注册表编辑器 Msconfig.exe—系统配置实用程序 rsop.msc——-组策略结果集 mem.exe——–显示内存使用情况 regedit.exe—-注册表 winchat——–XP自带局域网聊天 progman——–程序管理器 winmsd———系统信息 perfmon.msc—-计算机性能监测程序 winver———检查Windows版本 sfc /scannow—–扫描错误并复原 taskmgr—–任务管理器（2000／xp／2003 winver———检查Windows版本 wmimgmt.msc—-打开windows管理体系结构(WMI) wupdmgr——–windows更新程序 wscript——–windows脚本宿主设置 write———-写字板 winmsd———系统信息 wiaacmgr——-扫描仪和照相机向导 winchat——–XP自带局域网聊天 mem.exe——–显示内存使用情况 Msconfig.exe—系统配置实用程序 mplayer2——-简易widnows media player mspaint——–画图板 mstsc———-远程桌面连接 mplayer2——-媒体播放机 magnify——–放大镜实用程序 mmc————打开控制台 mobsync——–同步命令 dxdiag———检查DirectX信息 drwtsn32—— 系统医生 devmgmt.msc— 设备管理器 dfrg.msc——-磁盘碎片整理程序 diskmgmt.msc—磁盘管理实用程序 dcomcnfg——-打开系统组件服务 ddeshare——-打开DDE共享设置 dvdplay——–DVD播放器 net stop messenger—–停止信使服务 net start messenger—-开始信使服务 notepad——–打开记事本 nslookup——-网络管理的工具向导 ntbackup——-系统备份和还原 narrator——-屏幕“讲述人” ntmsmgr.msc—-移动存储管理器 ntmsoprq.msc—移动存储管理员操作请求 netstat -an—-(TC)命令检查接口 syncapp——–创建一个公文包 sysedit——–系统配置编辑器 sigverif——-文件签名验证程序 sndrec32——-录音机 shrpubw——–创建共享文件夹 secpol.msc—–本地安全策略 syskey———系统加密，一旦加密就不能解开，保护windows xp系统的双重密码 services.msc—本地服务设置 Sndvol32——-音量控制程序 sfc.exe——–系统文件检查器 sfc /scannow—windows文件保护 tsshutdn——-60秒倒计时关机命令 tourstart——xp简介（安装完成后出现的漫游xp程序） taskmgr——–任务管理器 eventvwr——-事件查看器 eudcedit——-造字程序 explorer——-打开资源管理器 packager——-对象包装程序 perfmon.msc—-计算机性能监测程序 progman——–程序管理器 regedit.exe—-注册表 rsop.msc——-组策略结果集 regedt32——-注册表编辑器 rononce -p —-15秒关机 regsvr32 /u *.dll—-停止dll文件运行 regsvr32 /u zipfldr.dll——取消ZIP支持 cmd.exe——–CMD命令提示符 chkdsk.exe—–Chkdsk磁盘检查 certmgr.msc—-证书管理实用程序 calc———–启动计算器 charmap——–启动字符映射表 cliconfg——-SQL SERVER 客户端网络实用程序 Clipbrd——–剪贴板查看器 conf———–启动netmeeting compmgmt.msc—计算机管理 cleanmgr——-垃圾整理 ciadv.msc——索引服务程序 osk————打开屏幕键盘 odbcad32——-ODBC数据源管理器 oobe/msoobe /a—-检查XP是否激活 lusrmgr.msc—-本机用户和组 logoff———注销命令 iexpress——-木马捆绑工具，系统自带 Nslookup——-IP地址侦测器 fsmgmt.msc—–共享文件夹管理器 utilman——–辅助工具管理器 系统查看=========systeminfo 轻松访问键盘快捷方式 按住右Shift 八秒钟： 启用和关闭筛选键 按左 Alt+左 Shift+PrtScn(或 PrtScn)：启用或关闭高对比度 按左 Alt+左 Shift+Num Lock ：启用或关闭鼠标键 按 Shift 五次： 启用或关闭粘滞键 按住 Num Lock 五秒钟：启用或关闭切换键 Windows 徽标键 + U ： 打开轻松访问中心 常规键盘快捷方式 F1 显示帮助 Ctrl+C 复制选择的项目 Ctrl+X 剪切选择的项目 Ctrl+V 粘贴选择的项目 Ctrl+Z 撤消操作 Ctrl+Y 重新执行某项操作 F2 重命名选定项目 Ctrl+向右键 将光标移动到下一个字词的起始处 Ctrl+向左键 将光标移动到上一个字词的起始处 Ctrl+向下键 将光标移动到下一个段落的起始处 Ctrl+向上键 将光标移动到上一个段落的起始处 Ctrl+Shift 加某个箭头键 选择一块文本 Shift 加任意箭头键 在窗口中或桌面上选择多个项目，或者在文档中选择文本 Ctrl 加任意箭头键+空格键 选择窗口中或桌面上的多个单个项目 Ctrl+A 选择文档或窗口中的所有项目 F3 搜索文件或文件夹 Alt+Enter 显示所选项的属性 Alt+F4 关闭活动项目或者退出活动程序 Alt+空格键 为活动窗口打开快捷方式菜单 Ctrl+F4 关闭活动文档(在允许同时打开多个文档的程序中) Alt+Tab 在打开的项目之间切换 Ctrl+Alt+Tab 使用箭头键在打开的项目之间切换 Ctrl+鼠标滚轮 更改桌面上的图标大小 Windows 徽标键 + Tab 使用 Aero Flip 3-D 循环切换任务栏上的程序 Ctrl + Windows 徽标键 + Tab 通过 Aero Flip 3-D 使用箭头键循环切换任务栏上的程序 Alt+Esc 以项目打开的顺序循环切换项目 F6 在窗口中或桌面上循环切换屏幕元素 F4 在 Windows 资源管理器中显示地址栏列表 Shift+F10 显示选定项目的快捷菜单 Ctrl+Esc 打开「开始」菜单 Alt+加下划线的字母 显示相应的菜单 Alt+加下划线的字母 执行菜单命令(或其他有下划线的命令) F10 激活活动程序中的菜单栏 向右键 打开右侧的下一个菜单或者打开子菜单 向左键 打开左侧的下一个菜单或者关闭子菜单 F5 刷新活动窗口 Alt+向上键 在 Windows 资源管理器中查看上一级文件夹 Esc 取消当前任务 Ctrl+Shift+Esc 打开任务管理器 插入 CD 时按住 Shift 阻止 CD 自动播放 对话框键盘快捷方式 Ctrl+Tab 在选项卡上向前移动 Ctrl+Shift+Tab 在选项卡上向后移动 Tab 在选项上向前移动 Shift+Tab 在选项上向后移动 Alt+加下划线的字母 执行与该字母匹配的命令(或选择选项) Enter 对于许多选定命令代替单击鼠标 空格键 如果活动选项是复选框，则选中或清除该复选框 箭头键 如果活动选项是一组选项按钮，则选择某个按钮 F1 显示帮助 F4 显示活动列表中的项目 Backspace 如果在“另存为”或“打开”对话框中选中了某个文件夹，则打开上一级文件夹 Windows 徽标键相关的快捷键 Windows徽标键就是显示为Windows旗帜，或标有文字Win或Windows的按键，以下简称Win键。XP时代有4个经典的 Win 键组合：R/E/F/L。到了 Win7，花样更多了。 Win：打开或关闭开始菜单 Win + Pause：显示系统属性对话框 Win + D：显示桌面 Win + M：最小化所有窗口 Win + SHIFT + M：还原最小化窗口到桌面上 Win + E：打开我的电脑 Win + F：搜索文件或文件夹 Ctrl + Win + F：搜索计算机(如果您在网络上) Win + L：锁定您的计算机或切换用户 Win + R：打开运行对话框 Win + T：切换任务栏上的程序(感觉是和alt+ESC 一样 ) Win + 数字：让位于任务栏指定位置(按下的数字作为序号)的程序，新开一个实例。(感觉这个比较新颖，貌似快速启动。) Shift + Windows logo key +number：Start a new instance of the program pinned to the taskbar in the position indicated by the number Ctrl + Win + 数字：让位于任务栏指定位置(按下的数字作为序号)的程序，切换到上一次的活动窗口。 Ctrl+Windows logo key +number：Switch to the last active window of the program pinned to the taskbar in the position indicated by the number ALT + Win + 数字：让位于任务栏指定位置(按下的数字作为序号)的程序，显示跳转清单。 Alt+Windows logo key +number： Open the Jump List for the program pinned to the taskbar in the position indicated by the number Win + TAB：循环切换任务栏上的程序并使用的Aero三维效果 Ctrl + Win + TAB：使用方向键来循环循环切换任务栏上的程序，并使用的Aero三维效果 按Ctrl + Win + B：切换到在通知区域中显示信息的程序 Win + 空格：预览桌面 Win + ↑：最大化窗口 Win + ↓：最小化窗口 Win + ←：最大化到窗口左侧的屏幕上 Win + →：最大化窗口到右侧的屏幕上 Win + Home：最小化所有窗口，除了当前激活窗口 Win+ SHIFT + ↑：拉伸窗口的到屏幕的顶部和底部 Win+ SHIFT + →/←：移动一个窗口，从一个显示器到另一个 Win + P：选择一个演示文稿显示模式 Win + G：循环切换侧边栏的小工具 Win + U：打开轻松访问中心 Win + x：打开Windows移动中心 Windows Explorer相关快捷键 Ctrl+N 打开新窗口 Ctrl+Shift+N 新建文件夹","categories":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/tags/工具/"}]},{"title":"通过dotnet命令上传自己的nuget包","slug":"tools/nuget","date":"2018-05-16T01:10:13.000Z","updated":"2018-09-27T10:59:38.629Z","comments":true,"path":"2018/05/16/tools/nuget/","link":"","permalink":"http://blog.xxgtalk.cn/2018/05/16/tools/nuget/","excerpt":"通过dotnet命令上传自己的nuget包","text":"通过dotnet命令上传自己的nuget包 通过dotnet命令上传自己的nuget包 编辑项目属性 在打包选项中设置各种东西 勾选’在版本中生成Nuget包’、设置其他东西 如包Id、版本等 通过vs发布该包 我生成的为:XXG.AutoMapper.AutoReg.1.1.0.nupkg 执行命令 1dotnet nuget push XXG.AutoMapper.AutoReg.1.1.0.nupkg -k oy2km5lmhmh4lnff32uadp2qudugxwce5jjamrh6xgx4vy -s https://api.nuget.org/v3/index.json","categories":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/tags/工具/"}]},{"title":"office笔记","slug":"tools/office","date":"2018-05-16T01:10:13.000Z","updated":"2018-09-27T10:59:38.629Z","comments":true,"path":"2018/05/16/tools/office/","link":"","permalink":"http://blog.xxgtalk.cn/2018/05/16/tools/office/","excerpt":"office笔记-长期更新","text":"office笔记-长期更新 =INDIRECT(“Sheet1!C”&amp;ROW())&amp;””，引用下拉框，自动行号 字符串拼接：=$A1&amp;$B1，表示：输出A1和B1单元格的内容","categories":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/tags/工具/"}]},{"title":"npm前端项目","slug":"tools/npm","date":"2018-05-16T01:10:12.000Z","updated":"2018-09-27T10:59:38.628Z","comments":true,"path":"2018/05/16/tools/npm/","link":"","permalink":"http://blog.xxgtalk.cn/2018/05/16/tools/npm/","excerpt":"npm相关前端操作","text":"npm相关前端操作 本地调试调试本地的包 cd 到包的文件夹下 将当前包link到全局 1npm link cd 到项目文件夹 将要使用的包link过来 命令如下 1npm link [package name] 示例： 包名称 xxg-uim-plugin-locale、项目名称 xxg-admin先在 xxg-uim-plugin-locale文件夹下将当前包link到全局，执行 :npm link在定位到xxg-admin项目下，执行: npm link xxg-umi-plugin-locale这样 如果通过yarn add xxg-umi-plugin-locale 安装包的时候会link到本地而不会从npm下载 这样方便本地开发调试 发布到npm续待更新…","categories":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/tags/工具/"}]},{"title":"nginx笔记","slug":"tools/nginx","date":"2018-05-16T01:10:12.000Z","updated":"2018-09-27T10:59:38.627Z","comments":true,"path":"2018/05/16/tools/nginx/","link":"","permalink":"http://blog.xxgtalk.cn/2018/05/16/tools/nginx/","excerpt":"linux安装nginx","text":"linux安装nginx nginx官网https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7 命令启动:sudo nginx重启:sudo nginx -s reload关闭:sudo nginx -s stop","categories":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/tags/工具/"}]},{"title":"git常用命令(笔记)","slug":"tools/git","date":"2018-05-16T01:10:11.000Z","updated":"2018-11-11T03:32:20.523Z","comments":true,"path":"2018/05/16/tools/git/","link":"","permalink":"http://blog.xxgtalk.cn/2018/05/16/tools/git/","excerpt":"常用git命令","text":"常用git命令 创建一个版本库mkdir repository //创建一个文件夹git init [name] //把目录编程git可以管理的仓库,[name]可选 提交文件到版本库git add test.txt //添加文件到版本库,此时还没有提交到gitgit commit -m “提交注释” //告诉Git，把文件提交到仓库 远程查看当前git的状态: git status查看修改变的内容: git diff查看历史记录: git log查看修改的headid： git reflog查看分支： git branch [-a|-r] //-a 所有分支，-r:远程分支查看远程库信息 : git remote查看远程库详细信息: git remote -v查看远程仓库：$ git remote -v添加远程仓库：$ git remote add [name] [url]克隆远程仓库：git checkout [branchName] origin/[branchName] //如果远程分支有branchName而本地没git checkout -b [branchName] origin/[branchName] //如果远程分支有本地无，克隆并切换到删除本地仓库: git branch -d [branch-name]强制删除本地分支 git branch -D [branch-name]删除远程仓库：$ git push origin :[branch-name] //删除远程分支 git remote rm [branch-name] git push origin --delete [branchName] 修改远程仓库：$ git remote set-url –push [name] [newUrl]拉取远程仓库：$ git pull origin [remoteName]:[localBranchName] git fetch origin [remoteName]:[localBranchName] //获取到当前分支 推送远程仓库：$ git push origin [remoteName]:[localBranchName] //如果有冲突，需要先pull或者fetch远程的git push origin [remoteName]:[localBranchName] -f //强推，使用本地覆盖服务器的 与远程git关联a、在git上创建一个Repositoryb、在本地执行命令：git remote add origin git@github.com:xiexingen/learngit.git //将本地仓库与远程关联c、重新关联：git remote set-url origin git://git.coding.net/xxxx/yyyy.git 从远程下载到本地git clone [地址] [文件夹名称] //将远程项目复制到本地之地文件加下 分支创建分支：git branch [branch Name]切换分支：git checkout [branch Name]创建+切换分支：git checkout -b [branch Name]合并分支到当前分支：git merge [branch Name]重命名分支： git branch -m [new_branchName] [old_branchName]查看所有分支：git branch -a从指定分支创建并切换到分支:git checkout -b [local-branchName] [origin/branchName]删除分支: git branch [-d|-D] [local-branch] //-d 只能删除已经参与合并的分支,-D:可以删除为合并的分支，然后在git push origin :master 可以删除远程分支git merge命令用于合并指定分支到当前分支,注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交git merge dev :分两种情况一种是直接指向，另一种是生成另外一个将两个合并git merge –no-ff -m’comment’ [branch Name] //合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并git merge –abort //取消合并 Bug分支git stash //相当于tfs中的搁置git stash apply //取消搁置到本地git stash drp //删除搁置集git stash pop //取消搁置到本地并删除搁置集git stash list //查看搁置集git stash apply stash@{0} //恢复指定的搁置集 多人协作A、git push -u origin [local-branch][:remote-branch] //吧本地库推送到远程库上，-u，不但回吧本地的分支推送到远程新的master分支，还会把本地分支和远程分支关联起来，在以后的推送或者拉去时就可以简化命名后面如果有修改的话，只需要执行：git push origin [local-branch] //吧本地分支的最新修改推送到服务器B、从本地推送分支，使用git push origin [local_branch]:[remote-branch]，如果推送失败，先用git pull抓取远程的新提交；在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；c、建立本地分支和远程分支的关联，使用git branch –set-upstream [local-branch] [origin/remote-branch]从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin/branch-name 取消、回滚git -reflog 查看历史版本git reset –hard HEAD^ //回到上一次改动 (针对历史提交)git reset -hard 3628164 //3628164 headid 恢复到指定的记录(针对历史提交)git reset test.js //使用当前历史提交还原工作区git checkout – test.js //使用暂存区覆盖改动 cleangit clean -n //将当前非暂存区的文件移除git clean -f //强制移除 版本(tag)操作相关命令查看版本：$ git tag创建版本：$ git tag [name]删除版本：$ git tag -d [name]查看远程版本：$ git tag -r创建远程版本(本地版本push到远程)：$ git push origin [name]删除远程版本：$ git push origin :refs/tags/[name]合并远程仓库的tag到本地：$ git pull origin –tags上传本地tag到远程仓库：$ git push origin –tags创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’ 忽略一些文件、文件夹不提交在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如targetbin*.db 生成密钥 查看是否已经有了ssh密钥：cd ~/.ssh 如果提示：No such file or directory 说明你是第一次使用git如果不是第一次使用，请执行下面的操作,清理原有ssh密钥。$ mkdir key_backup $ cp id_rsa key_backup $ rm id_rsa生成新的密钥：$ ssh-keygen -t rsa -C “1002275364@qq.com” 添加忽略文件git rm -f –cached [path] 移除单个文件，path表示全路径git rm -f –cached [path] -r 移除目录，path表示目录 从暂存区移除文件git rm –cached [file] //将file从暂存区移除 taggit tag -a v1.0 -m ‘version 1.0’git tag 列出已有标签git tag -l ‘v1.0’ //列出指定标签git checkout -b [branchName] [tagname] //在特定的标签上创建一个新分支git tag v0.9 [626262] //给上次提价的commit id为626262打上标签git push origin [v1.0] //将标签v1.0push到远程git push origin –tags //将本地的所有tag push到远程git push origin :refs/tags/[v1.0] //删除v1.0 .gitignore文件无效的解决方法git rm -r –cached [指定文件]提交 配置git使用BCompare来比对文件(用户目录.gitconfig里面)1234567891011121314151617181920[user]name = xiexingenemail = 1002275364@qq.com[diff] tool = bc4[difftool] prompt = false[difftool \"bc4\"] cmd = \\\"D:/Program Files/Beyond Compare 4/BComp.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\"[merge] tool = bc4[mergetool] prompt = false keepBackup = false[mergetool \"bc4\"] cmd = \\\"D:/Program Files/Beyond Compare 4/BComp.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" \\\"$MERGED\\\" trustExitCode = true[alias] dt = difftool mt = mergetool 使用：git difftool ‘文件1’ ‘文件2’git mergetool 全局配置用户名123git config --global user.name xiexingengit config --global user.email 1002275364@qq.comgit config --global alias.co checkout //用co代替checkout 日志1git log –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit –date=relative ** https带用户名密码形式迁出代码git clone http://用户名:密码@gitlab.xxgtalk.cn/WT/StudyNetCore.git github上游合并问题 123首先指定上游地址：git remote add upstream [original repo url]拉取上游代码:git fetch upstream合并代码:git merge upstream/master","categories":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/tags/工具/"}]},{"title":"开发中能提高工作效率的工具收集","slug":"tools/develop","date":"2018-05-16T01:10:11.000Z","updated":"2018-09-27T10:59:38.627Z","comments":true,"path":"2018/05/16/tools/develop/","link":"","permalink":"http://blog.xxgtalk.cn/2018/05/16/tools/develop/","excerpt":"开发工具收藏夹","text":"开发工具收藏夹 常用工具 sql对比工具：DiffUse BCompare 文件对比 ORC 图片文本识别 VS插件 Web Essentials web Extension Pack Productivity Power Tools 2015:方法开始结束标线 前端 编辑器神器：webstrom、SubLime node 压缩合并混合：grunt、webpack 依赖管理工具：bower、npm、cnpm、yarn 轻量级服务器：httpserver 单元测试：karma 、jasmine karma是容器，jasmine是语法 angularJS专用测试工具：protractor 其他 Emmet：提供自动完成某些文档 DocBlockr DocBlockr可以自动生成PHPDoc风格的注释。它支持的语言有Javascript, PHP, ActionScript, CoffeeScript, Java, Objective C, C, C++ 测试、分析工具 压力测试:Load Runner 服务器IIS分析:Visual Studio Profiler、WinDebug、opserver SQLtoad for mysql 欢迎补充","categories":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/tags/工具/"}]},{"title":"Openssl生成免费证书","slug":"tools/cer","date":"2018-05-16T01:10:10.000Z","updated":"2018-09-27T10:59:38.626Z","comments":true,"path":"2018/05/16/tools/cer/","link":"","permalink":"http://blog.xxgtalk.cn/2018/05/16/tools/cer/","excerpt":"使用Openssl生成免费证书","text":"使用Openssl生成免费证书 官网地址 openssl的windows官网: https://slproweb.com/products/Win32OpenSSL.html 下载安装 在自己目录下运行 1openssl req -newkey rsa:2048 -nodes -keyout socialnetwork.key -x509 -days 365 -out socialnetwork.cer 生成pfx文件命令 1openssl pkcs12 -export -in socialnetwork.cer -inkey socialnetwork.key -out socialnetwork.pfx","categories":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.xxgtalk.cn/tags/工具/"}]},{"title":"IdentityServer4-使用密码授权模式","slug":"dotnetcore/identityserver4/02passport","date":"2018-03-11T13:01:01.000Z","updated":"2018-09-27T10:59:38.622Z","comments":true,"path":"2018/03/11/dotnetcore/identityserver4/02passport/","link":"","permalink":"http://blog.xxgtalk.cn/2018/03/11/dotnetcore/identityserver4/02passport/","excerpt":"IdentityServer4-使用密码授权模式","text":"IdentityServer4-使用密码授权模式 一、IdentityServer 也叫服务端 新建.netcore web项目 设置启动端口为60000 并通过Nuget引用IdentityServer4 添加ApiResource和Client(此处方便测试固定了一些数据) 使用IdentityServer 启动项目 http://localhost:60000/.well-known/openid-configuration 可以看到相关json数据 二、Api端 (与clientCredentials模式完全一致) 新建.netcore web项目 设置启动端口为60001通过Nuget引用IdentityServer4.AccessTokenValidation 此处只需要验证所以不需要引用IdentityServer4 配置 在controller上贴上属性[Authorize] 表示只允许登录用户访问 通过postman获取token(注意请求body中的参数) 请求需要登录的api 此处为api/values 三、client 客户端也叫ThirPart【选修】 定义一个控制台程序 访问api获取数据 创建.net core控制台程序 通过Nuget引用包IdentityModel","categories":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/categories/NetCore/"}],"tags":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/tags/NetCore/"},{"name":"IdentityServer4","slug":"IdentityServer4","permalink":"http://blog.xxgtalk.cn/tags/IdentityServer4/"}]},{"title":"IdentityServer4-ClientCredentials模式","slug":"dotnetcore/identityserver4/01client-credentials","date":"2018-03-10T13:01:01.000Z","updated":"2018-09-27T10:59:38.622Z","comments":true,"path":"2018/03/10/dotnetcore/identityserver4/01client-credentials/","link":"","permalink":"http://blog.xxgtalk.cn/2018/03/10/dotnetcore/identityserver4/01client-credentials/","excerpt":"IdentityServer4-ClientCredentials模式","text":"IdentityServer4-ClientCredentials模式 一、IdentityServer端 也叫服务端 新建.netcore web项目 设置启动端口为60000 并通过Nuget引用IdentityServer4 添加ApiResource和Client(此处方便测试固定了一些数据) 12345678910111213141516171819202122232425262728293031using IdentityServer4.Models;using System.Collections.Generic;namespace Api&#123; public class Config &#123; public static IEnumerable&lt;ApiResource&gt; GetResources() &#123; return new List&lt;ApiResource&gt;() &#123; new ApiResource(\"api\",\"My Api\") &#125;; &#125; public static IEnumerable&lt;Client&gt; GetClients() &#123; return new List&lt;Client&gt;() &#123; new Client()&#123; ClientId=\"client\", AllowedGrantTypes=GrantTypes.ClientCredentials, ClientSecrets=&#123; new Secret(\"secret\".Sha256()) &#125;, AllowedScopes=&#123;\"api\"&#125; &#125; &#125;; &#125; &#125;&#125; 使用IdentityServe4 12345678910111213141516public void ConfigureServices(IServiceCollection services)&#123; services.AddIdentityServer() .AddDeveloperSigningCredential() .AddInMemoryApiResources(Config.GetResources()) .AddInMemoryClients(Config.GetClients());&#125;public void Configure(IApplicationBuilder app,IHostingEnvironment env)&#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; app.UseIdentityServer();&#125; 启动项目 http://localhost:60000/.well-known/openid-configuration 可以看到相关json数据 json 二、Api端 新建.netcore web项目 设置启动端口为60001通过Nuget引用IdentityServer4.AccessTokenValidation 此处只需要验证所以不需要引用IdentityServer4 配置StartUp 1234567891011121314151617181920212223242526272829303132333435363738394041using Microsoft.AspNetCore.Builder;using Microsoft.AspNetCore.Hosting;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;namespace Api&#123; public class Startup &#123; public Startup(IConfiguration configuration) &#123; Configuration = configuration; &#125; public IConfiguration Configuration &#123; get; &#125; // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices(IServiceCollection services) &#123; services.AddAuthentication(\"Bearer\") .AddIdentityServerAuthentication(options =&gt; &#123; options.Authority = \"http://localhost:60001\";//设置认证服务器地址 options.RequireHttpsMetadata = false;//不需要https options.ApiName = \"api\";//api resource的名字 对应定义的ApiResource中的name &#125;); services.AddMvc(); &#125; // This method gets called by the runtime. Use this method to configure the HTTP request pipeline. public void Configure(IApplicationBuilder app, IHostingEnvironment env) &#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; app.UseAuthentication(); app.UseMvc(); &#125; &#125;&#125; 在controller上贴上属性[Authorize] 表示只允许登录用户访问 通过postman获取token(注意请求body中的参数) json 请求需要登录的api 此处为api/values json 三、client 客户端也叫ThirPart【选修】定义一个控制台程序 访问api获取数据 创建.net core控制台程序 通过Nuget引用包IdentityModel 123456789101112131415161718192021222324252627282930313233343536373839using IdentityModel.Client;using System;using System.Net.Http;namespace Client&#123; class Program &#123; static void Main(string[] args) &#123; var diso = DiscoveryClient.GetAsync(\"http://localhost:60000\").Result; if (diso.IsError) &#123; Console.WriteLine(diso.Error); &#125; var tokenClient = new TokenClient(diso.TokenEndpoint, \"client\", \"secret\"); var tokenResponse = tokenClient.RequestClientCredentialsAsync(\"api\").Result; if (tokenResponse.IsError) &#123; Console.WriteLine(tokenResponse.Error); &#125; else &#123; Console.WriteLine(tokenResponse.Json); &#125; var httpClient= new HttpClient(); httpClient.SetBearerToken(tokenResponse.AccessToken); var response = httpClient.GetAsync(\"http://localhost:60001/api/values\").Result; if (response.IsSuccessStatusCode) &#123; Console.WriteLine(response.Content.ReadAsStringAsync().Result); &#125; Console.ReadKey(); &#125; &#125;&#125;","categories":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/categories/NetCore/"}],"tags":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/tags/NetCore/"},{"name":"IdentityServer4","slug":"IdentityServer4","permalink":"http://blog.xxgtalk.cn/tags/IdentityServer4/"}]},{"title":"IdentityServer4 资料收集","slug":"dotnetcore/identityserver4/article","date":"2018-03-09T13:01:01.000Z","updated":"2018-09-27T10:59:38.623Z","comments":true,"path":"2018/03/09/dotnetcore/identityserver4/article/","link":"","permalink":"http://blog.xxgtalk.cn/2018/03/09/dotnetcore/identityserver4/article/","excerpt":"IdentityServer4 资料收集","text":"IdentityServer4 资料收集 IdentityServer4 endPoint查看地址：http://localhost:5000/.well-known/openId-configuration 博客推荐 http://www.cnblogs.com/stulzq/p/8119928.html 八幅漫画理解使用JSON Web Token设计单点登录系统http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/ JSON Web Token - 在Web应用间安全地传递信息http://blog.leapoahead.com/2015/09/06/understanding-jwt/ 纯OAuth2 授权码模式的实现 。 (不包含OICD）https://github.com/bayardw/IdentityServer4.Authorization.Code YAML语法介绍：http://www.ruanyifeng.com/blog/2016/07/yaml.html","categories":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/categories/NetCore/"}],"tags":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/tags/NetCore/"},{"name":"IdentityServer4","slug":"IdentityServer4","permalink":"http://blog.xxgtalk.cn/tags/IdentityServer4/"}]},{"title":"基于JWT的认证模式","slug":"dotnetcore/core/03jwt-authorization","date":"2018-03-06T13:01:01.000Z","updated":"2018-09-27T10:59:38.619Z","comments":true,"path":"2018/03/06/dotnetcore/core/03jwt-authorization/","link":"","permalink":"http://blog.xxgtalk.cn/2018/03/06/dotnetcore/core/03jwt-authorization/","excerpt":"基于JWT的认证模式","text":"基于JWT的认证模式 在项目目录下定义一个JwtSetting实体类 在appsettings.json中配置值 在StartUp中设置验证方式 在管道中加入认证 登录JwtSecurityToken 需要添加包Microsoft.AspNetCore.Authentication.JwtBearerusing Microsoft.IdentityModel.Tokens;using System.IdentityModel.Tokens.Jwt;using System.Security.Claims; 通过postman模拟登录获取token 将token以请求头形式放到请求中发送请求[注] 键:Authorization token值记得加”bearer “ 扩展 使用自定义验证以及自定义头部token定义MyTokenValidation 实现接口ISecurityTokenValidator 在ConfigureServices方法中 运行效果","categories":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/categories/NetCore/"}],"tags":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/tags/NetCore/"}]},{"title":"基于CookieBase认证的模式","slug":"dotnetcore/core/02cookie-base-authorization","date":"2018-03-05T13:01:01.000Z","updated":"2018-09-27T10:59:38.619Z","comments":true,"path":"2018/03/05/dotnetcore/core/02cookie-base-authorization/","link":"","permalink":"http://blog.xxgtalk.cn/2018/03/05/dotnetcore/core/02cookie-base-authorization/","excerpt":"基于CookieBase认证的模式","text":"基于CookieBase认证的模式 说明 通过vs2017新建的.net core项目默认没有添加身份认证与授权以及路由等 在StartUp.ConfigureServices中addMvc之前添加AddAuthenticationusing Microsoft.AspNetCore.Authentication.Cookies; 在Configure方法中 模拟登陆using Microsoft.AspNetCore.Authentication;using Microsoft.AspNetCore.Authentication.Cookies;using System.Security.Claims; 在对应的Controller或者Action中贴上属性[Authorize]","categories":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/categories/NetCore/"}],"tags":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/tags/NetCore/"}]},{"title":".NetCore+centos环境搭建手摸手实战","slug":"dotnetcore/core/01dotnetcore-centos-install","date":"2018-03-03T13:01:01.000Z","updated":"2018-09-27T10:59:38.618Z","comments":true,"path":"2018/03/03/dotnetcore/core/01dotnetcore-centos-install/","link":"","permalink":"http://blog.xxgtalk.cn/2018/03/03/dotnetcore/core/01dotnetcore-centos-install/","excerpt":".NetCore+centos环境搭建手摸手实战","text":".NetCore+centos环境搭建手摸手实战 安装VMware Workstation下载地址:https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/14_0 下载安装 安装CentOS7安装好后发现不能使用网络 参考资料http://blog.csdn.net/wanz2/article/details/52820876 安装.net core参考官网步骤:https://www.microsoft.com/net/learn/get-started/linuxcentos 安装nginx同样参考官网步骤:https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7 vs2017新建项目发布成本地文件夹新建项目，使用mvc模板发布到本地文件夹 通过Xftp上传到centos通过Xftp将打包的文件直接粘贴到centos中(我是在root目录下建了个web文件夹专门用于存放部署的站点) 将dotnetcore站点运行起来在Xftp中点击新建终端打开XsHell 将路径定位到站点文件夹 cd /root/web/mvc 执行 dotnet HelloWord.dll 看到如下信息 表示你已经成功了 这个时候你在外面访问是访问不了的 因为防火墙没有启用5000端口如果一定想看看 可以再开一个终端 输入如图 配置nginx将80端口指向dotnetcore站点这一步就是通过nginx将80请求转到上面的localhost:5000先找着nginx中的配置 打开后会发现里面有个 在如下目录中新建一个文件 输入配置 server { listen 80; location / { proxy_pass http://localhost:5000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection keep-alive; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; } } 然后重启nginx ==》sudo nginx -s reload 查看成果在浏览器中输入192.168.2.105 如图 总结:过程中遇到一些问题，比如虚拟机中的centos系统中使用不了网络 这个折腾了劳资一个上午(如有碰到，第2点中有参考资料)","categories":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/categories/NetCore/"}],"tags":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/tags/NetCore/"}]},{"title":"EFCore相关资料","slug":"dotnetcore/core/efcore","date":"2018-03-01T13:01:01.000Z","updated":"2018-09-27T10:59:38.620Z","comments":true,"path":"2018/03/01/dotnetcore/core/efcore/","link":"","permalink":"http://blog.xxgtalk.cn/2018/03/01/dotnetcore/core/efcore/","excerpt":"EFCore相关资料","text":"EFCore相关资料 命令行CMD形式 | VS中Package Manager形式—- | —dotnet ef migrations add InitCreate [-o 路径] | Add-Migration InitCreatedotnet ef database update | Update-Databasedotnet ef migrations remove | Remove-Migrationsdonet ef database update [LastGoodMigration] | Update-Database LastGoodMigrationdotnet ef migrations script [-o 路径] | Script-Migration 生成 migrationName1 到 -migrationName2的脚本dotnet ef migrations script migrationName1 migrationName2不能使用dotnet ef命令行解决方式 在项目文件csproj文件中添加 1&lt;DotNetCliToolReference Include=&quot;Microsoft.EntityFrameworkCore.Tools.DotNet&quot; Version=&quot;2.0.1&quot; /&gt;","categories":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/categories/NetCore/"}],"tags":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/tags/NetCore/"}]},{"title":"DotNetCore 备忘录","slug":"dotnetcore/core/remark","date":"2018-03-01T11:01:01.000Z","updated":"2018-09-27T10:59:38.621Z","comments":true,"path":"2018/03/01/dotnetcore/core/remark/","link":"","permalink":"http://blog.xxgtalk.cn/2018/03/01/dotnetcore/core/remark/","excerpt":"DotNetCore 备忘录","text":"DotNetCore 备忘录 常用备忘录 docker run -d -p 8081:80 –name wechat -v /docker/wechat/App_Data/:/app/App_Data/ –restart always registry.cn-hangzhou.aliyuncs.com/xxg/wechat:v1.1.5 使用dotnet watch 在项目项目文件夹中添加(自.netcore2.1.0开始已经集成进去 不需要手动添加) 12345678&lt;ItemGroup&gt; &lt;DotNetCliToolReference Include=&quot;Microsoft.DotNet.Watcher.Tools&quot; Version=&quot;2.0.0&quot; /&gt;&lt;/ItemGroup&gt; &lt;!-- 使用dotnet ef ... --&gt;&lt;ItemGroup&gt;&lt;DotNetCliToolReference Include=&quot;Microsoft.EntityFrameworkCore.Tools.DotNet&quot; Version=&quot;2.0.1&quot; /&gt;&lt;/ItemGroup&gt; 测试框架Moqfluentassertions 查看nuget目录通过dotnet dotnet nuget locals all –list JSON解析不适用首字母小写形式(默认会首字母小写)在ConfigureServices中配置 12345678services.AddMvc() .AddJsonOptions(options =&gt; &#123; if (options.SerializerSettings.ContractResolver is DefaultContractResolver resolver) &#123; resolver.NamingStrategy = null; &#125; &#125;); 添加输出响应内容xml格式.net core中默认只返回json格式需要xml的话需要修改Output formatter 1234services.AddMvc() .AddMvcOptions(options=&gt; &#123; options.OutputFormatters.Add(new XmlDataContractSerializerOutputFormatter()); &#125;) 全局异常 [6.1] 往MVC Filters中添加过滤器添加一个全局异常类继承ExceptionFilterAttribute 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364public class GlobalExceptionFilter : IExceptionFilter&#123; private readonly IHostingEnvironment _hostingEnvironment; private readonly ILogger&lt;GlobalExceptionFilter&gt; _logger; public GlobalExceptionFilter( IHostingEnvironment hostingEnvironment, IModelMetadataProvider modelMetadataProvider, ILogger&lt;GlobalExceptionFilter&gt; logger) &#123; _hostingEnvironment = hostingEnvironment; _logger = logger; &#125; public void OnException(ExceptionContext context) &#123; HttpStatusCode status = HttpStatusCode.InternalServerError; String message = String.Empty; var exceptionType = context.Exception.GetType(); if (exceptionType == typeof(UnauthorizedAccessException)) &#123; message = &quot;Unauthorized Access&quot;; status = HttpStatusCode.Unauthorized; &#125; else if (exceptionType == typeof(NotImplementedException)) &#123; message = &quot;A server error occurred.&quot;; status = HttpStatusCode.NotImplemented; &#125; else if (exceptionType == typeof(BusinessException)) &#123; message = context.Exception.ToString(); status = HttpStatusCode.InternalServerError; &#125; else &#123; message = context.Exception.Message; status = HttpStatusCode.NotFound; &#125; context.ExceptionHandled = true; HttpResponse response = context.HttpContext.Response; response.StatusCode = (int)status; response.ContentType = &quot;application/json&quot;; var ar = new AjaxResponse() &#123; Success = false, Message = message, Data = context.Exception &#125;; response.WriteAsync(JsonConvert.SerializeObject(ar)); //context.Result = new JsonNetResult(new AjaxResponse() &#123; // Success=false, // Message=context.Exception.Message, // Data=context.Exception //&#125;); &#125;&#125; 在ConfigureServices方法AddMvc中 123services.AddMvc(config=&gt; &#123; config.Filters.Add(typeof(GlobalExceptionFilter));&#125;) [6.2] 在Configure方法中添加异常处理管道(注意在所有请求管道的最前面) 12345678910111213141516171819app.UseExceptionHandler(options =&gt;&#123; options.Run(async context =&gt; &#123; context.Response.StatusCode = (int)HttpStatusCode.InternalServerError; context.Response.ContentType = &quot;application/json&quot;; var ex = context.Features.Get&lt;IExceptionHandlerFeature&gt;(); if (ex != null) &#123; var response = new AjaxResponse() &#123; Success = false, Message = ex.Error.Message, Data = ex.Error &#125;; await context.Response.WriteAsync(JsonConvert.SerializeObject(response)).ConfigureAwait(false); &#125; &#125;);&#125;);","categories":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/categories/NetCore/"}],"tags":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/tags/NetCore/"}]},{"title":"NetCore相关框架收集","slug":"dotnetcore/core/collections","date":"2018-02-27T13:01:01.000Z","updated":"2018-09-27T10:59:38.620Z","comments":true,"path":"2018/02/27/dotnetcore/core/collections/","link":"","permalink":"http://blog.xxgtalk.cn/2018/02/27/dotnetcore/core/collections/","excerpt":".NetCore相关框架收集","text":".NetCore相关框架收集 .net core的 开源项目地址 https://github.com/dotnet/corefx asp.net core 框架的地址 https://github.com/aspnet EF Core源码 https://github.com/aspnet/EntityFrameworkCore 配置模块源码 https://github.com/aspnet/Configuration 路由模块 https://github.com/aspnet/Routing 认证及授权 https://github.com/aspnet/Security 依赖注入 https://github.com/aspnet/DependencyInjection 这个一定要看，有很多的一些HTTP管道的抽象接口都定义在这里 https://github.com/aspnet/HttpAbstractions https://github.com/aspnet/Options https://github.com/aspnet/Mvc https://github.com/aspnet/Hosting","categories":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/categories/NetCore/"}],"tags":[{"name":".NetCore","slug":"NetCore","permalink":"http://blog.xxgtalk.cn/tags/NetCore/"}]},{"title":"开通自己的博客","slug":"helleword","date":"2016-04-01T00:01:01.000Z","updated":"2018-10-27T09:48:01.209Z","comments":true,"path":"2016/04/01/helleword/","link":"","permalink":"http://blog.xxgtalk.cn/2016/04/01/helleword/","excerpt":"从hexo切换到vuepress又切回hexo啦！！！","text":"从hexo切换到vuepress又切回hexo啦！！！ ::: tip 大家好我是谢新根，网名:程序有Bug 性别:男 爱好:代码、生活、自行车、羽毛球 性格:沉稳而不活泼、内敛而不明骚、随和而不暴力、帅气中带点闷骚,好啦好啦 第一天开通自己的博客，到此为止吧:::","categories":[],"tags":[]}]}