<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序有Bug&#39;s后花园</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xxgtalk.cn/"/>
  <updated>2018-11-11T04:38:17.345Z</updated>
  <id>http://blog.xxgtalk.cn/</id>
  
  <author>
    <name>谢新根</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>umi文件拆分</title>
    <link href="http://blog.xxgtalk.cn/2018/11/11/front/react/umi-split-chunks/"/>
    <id>http://blog.xxgtalk.cn/2018/11/11/front/react/umi-split-chunks/</id>
    <published>2018-11-11T03:35:10.000Z</published>
    <updated>2018-11-11T04:38:17.345Z</updated>
    
    <content type="html"><![CDATA[<p>umi文件拆分<br><a id="more"></a></p><blockquote><p>前言 在umi群里有群友在问umi打包后umi.js文件有1M多甚至更多，那么网站加载的时候会等待这个文件加载完成 可能需要好些时间 这个是比较难忍受的,其实umi有提供代码拆分的功能 只是文档不是很全 这里写了个片博客 谈谈怎么拆分的</p></blockquote><ol><li>使用命令yarn run analyze 打开分析页面，运行后会打开如图的页面<blockquote><p>analyze是package.js中定义好的命令’cross-env ANALYZE=1 umi build’ 可以自行添加或者查看umi文档</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://qiniu.xxgtalk.cn/blog/images/front/reactumi-split-pre.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如图所示，目前umi文件比较大，现在来做拆分，比如这：把@ant-design和antd这两个拆分为antdesigns文件、把react|react-dom|react-router|react-router-dom|lodash|lodash-decorators|redux-saga|re-select|dva|moment这些拆分为wendors文件</p></blockquote></li><li><p>编写拆分规则 在umi.js||config.js文件的chainWebpack 中加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">config.optimization.splitChunks(&#123;</span><br><span class="line">    chunks: <span class="string">'async'</span>,</span><br><span class="line">    minSize: 30000,</span><br><span class="line">    maxSize: 0,</span><br><span class="line">    minChunks: 1,</span><br><span class="line">    maxAsyncRequests: 5,</span><br><span class="line">    maxInitialRequests: 3,</span><br><span class="line">    automaticNameDelimiter: <span class="string">'~'</span>,</span><br><span class="line">    name: <span class="literal">true</span>,</span><br><span class="line">    cacheGroups: &#123;</span><br><span class="line">      vendors: &#123;</span><br><span class="line">        name: <span class="string">'vendors'</span>,</span><br><span class="line">        chunks: <span class="string">'all'</span>,</span><br><span class="line">        <span class="built_in">test</span>: /[\\/]node_modules[\\/](react|react-dom|react-router|react-router-dom|lodash|lodash-decorators|redux-saga|re-select|dva|moment)[\\/]/,</span><br><span class="line">        priority: -10,</span><br><span class="line">      &#125;,</span><br><span class="line">      antdesigns: &#123;</span><br><span class="line">        name: <span class="string">'antdesigns'</span>,</span><br><span class="line">        chunks: <span class="string">'all'</span>,</span><br><span class="line">        <span class="built_in">test</span>: /[\\/]node_modules[\\/](@ant-design|antd)[\\/]/,</span><br><span class="line">        priority: -11,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>在umi.js或者config.js 的umi-plugin-react中的chunks属性中配置配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunks: [<span class="string">'vendors'</span>,<span class="string">'antdesigns'</span>, <span class="string">'umi'</span>]</span><br></pre></td></tr></table></figure></li><li><p>重新执行 yarn run analyze 查看拆分后的情况，如图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://qiniu.xxgtalk.cn/blog/images/front/reactumi-split-next.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><p>致次 拆分完成</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;umi文件拆分&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="http://blog.xxgtalk.cn/categories/React/"/>
    
    
      <category term="前端" scheme="http://blog.xxgtalk.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="http://blog.xxgtalk.cn/tags/React/"/>
    
      <category term="umi" scheme="http://blog.xxgtalk.cn/tags/umi/"/>
    
  </entry>
  
  <entry>
    <title>vscode下调试es6编写的npm包</title>
    <link href="http://blog.xxgtalk.cn/2018/09/22/front/other/VSCodeDebug/"/>
    <id>http://blog.xxgtalk.cn/2018/09/22/front/other/VSCodeDebug/</id>
    <published>2018-09-22T13:10:10.000Z</published>
    <updated>2018-09-27T10:59:38.624Z</updated>
    
    <content type="html"><![CDATA[<ol start="0"><li>前置条件 安装好node环境</li><li>创建一个文件夹  执行npm init 更具需要选择</li><li><p>通过yarn安装babel-preset-es2015 (也可以通过npm等)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn add -d babel-cli babel-preset-es2015 //安装babel-cli与babel-preset-es2015</span><br><span class="line">yarn add -d babel-preset-stage-1 //支持babel-preset-stage-1</span><br><span class="line">//yarn add -d babel-preset-react //如果需要支持react</span><br><span class="line">//yarn add -d babel-plugin-transform-object-assign //适用于Object.assign()</span><br><span class="line">//yarn add -d babel-plugin-transform-object-rest-spread //适用于展开运算符</span><br></pre></td></tr></table></figure></li><li><p>在package.json文件夹中添加一个scripts 如下所示:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scripts: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;babel src --watch --source-maps --presets=es2015,stage-1 --out-dir dist&quot; //切记 --source-maps一定要加上</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>跟目录下添加.babelrc 内容如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">        &quot;es2015&quot;</span><br><span class="line">        //,&quot;react&quot; //如果有使用react</span><br><span class="line">    ]</span><br><span class="line">    //,</span><br><span class="line">    //&quot;plugins&quot;:[</span><br><span class="line">    //    &quot;transform-object-assign&quot;, //适用于Object.assign()</span><br><span class="line">    //    &quot;transform-object-rest-spread&quot; //适用于展开运算符 ...</span><br><span class="line">    //]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写自己的代码，整体项目结构如下<br>|-src<br>&emsp;|–cores<br>&emsp;&emsp;|–math.js  –被引用的js文件<br>&emsp;|–index.js   –主入口js文件<br>|.babelrc<br>|.package.json  </p></li><li><p>切到vscode左侧的调试窗口，点击添加配置<br>这个时候会生成一个launch.json文件，修改内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;Launch App.js&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/src/index.js&quot;,</span><br><span class="line">            &quot;outFiles&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceRoot&#125;/dist/**/*.js&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>先生成在运行调试<br>npm run build会生成一个dist目录，然后点击调试上的运行按钮 执行调试</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;前置条件 安装好node环境&lt;/li&gt;
&lt;li&gt;创建一个文件夹  执行npm init 更具需要选择&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过yarn安装babel-preset-es2015 (也可以通过npm等)&lt;/p&gt;
 &lt;figure class
      
    
    </summary>
    
      <category term="前端-其他" scheme="http://blog.xxgtalk.cn/categories/%E5%89%8D%E7%AB%AF-%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="前端-其他" scheme="http://blog.xxgtalk.cn/tags/%E5%89%8D%E7%AB%AF-%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>资料收集</title>
    <link href="http://blog.xxgtalk.cn/2018/09/13/tools/collections/"/>
    <id>http://blog.xxgtalk.cn/2018/09/13/tools/collections/</id>
    <published>2018-09-13T01:10:10.000Z</published>
    <updated>2018-09-27T10:59:38.626Z</updated>
    
    <content type="html"><![CDATA[<p>各大开源组件收藏夹<br><a id="more"></a></p><h5 id="后端大开源组件"><a href="#后端大开源组件" class="headerlink" title="后端大开源组件"></a>后端大开源组件</h5><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">描述</th><th style="text-align:left">地址</th></tr></thead><tbody><tr><td style="text-align:left">异常收集框架</td><td style="text-align:left">Exceptionless</td><td style="text-align:left"><a href="https://github.com/exceptionless/Exceptionless" target="_blank" rel="noopener">https://github.com/exceptionless/Exceptionless</a>  </td></tr><tr><td style="text-align:left">容器监管</td><td style="text-align:left">portainer</td><td style="text-align:left"><a href="https://github.com/portainer/portainer" target="_blank" rel="noopener">https://github.com/portainer/portainer</a></td></tr><tr><td style="text-align:left">爬虫</td><td style="text-align:left">Hawk</td><td style="text-align:left"><a href="https://github.com/ferventdesert/Hawk" target="_blank" rel="noopener">https://github.com/ferventdesert/Hawk</a></td></tr></tbody></table><h5 id="前端推荐库"><a href="#前端推荐库" class="headerlink" title="前端推荐库"></a>前端推荐库</h5><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">描述</th><th style="text-align:left">地址</th></tr></thead><tbody><tr><td style="text-align:left">nzh</td><td style="text-align:left">数字转中文（大写，小写）数字，金额</td><td style="text-align:left"><a href="https://github.com/cnwhy/nzh" target="_blank" rel="noopener">https://github.com/cnwhy/nzh</a></td></tr><tr><td style="text-align:left">lodash</td><td style="text-align:left">js数组、对象类库</td><td style="text-align:left"><a href="https://github.com/lodash/lodash" target="_blank" rel="noopener">https://github.com/lodash/lodash</a></td></tr><tr><td style="text-align:left">moment</td><td style="text-align:left">日期处理库</td><td style="text-align:left"><a href="https://github.com/moment/moment" target="_blank" rel="noopener">https://github.com/moment/moment</a></td></tr></tbody></table><h5 id="CICD"><a href="#CICD" class="headerlink" title="CICD"></a>CICD</h5><h6 id="Gitlab-CI-官方配置文件参数说明（中文）"><a href="#Gitlab-CI-官方配置文件参数说明（中文）" class="headerlink" title="Gitlab CI 官方配置文件参数说明（中文）"></a>Gitlab CI 官方配置文件参数说明（中文）</h6><p>快速入门 <a href="https://docs.gitlab.com.cn/ce/ci/quick_start/README.html" target="_blank" rel="noopener">https://docs.gitlab.com.cn/ce/ci/quick_start/README.html</a><br>配置文档讲解 <a href="https://docs.gitlab.com.cn/ce/ci/yaml/" target="_blank" rel="noopener">https://docs.gitlab.com.cn/ce/ci/yaml/</a>  </p><h6 id="持续集成的概念"><a href="#持续集成的概念" class="headerlink" title="持续集成的概念"></a>持续集成的概念</h6><p><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各大开源组件收藏夹&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Docker中安装Consul</title>
    <link href="http://blog.xxgtalk.cn/2018/09/04/dotnetcore/consul/docker%E4%B8%AD%E5%AE%89%E8%A3%85Consul/"/>
    <id>http://blog.xxgtalk.cn/2018/09/04/dotnetcore/consul/docker中安装Consul/</id>
    <published>2018-09-04T13:48:20.000Z</published>
    <updated>2018-09-27T10:59:38.617Z</updated>
    
    <content type="html"><![CDATA[<p>Docker中安装Consul<br><a id="more"></a></p><blockquote><p>Consul Docker镜像地址:<a href="https://hub.docker.com/_/consul" target="_blank" rel="noopener">https://hub.docker.com/_/consul</a></p><ol><li>Docker中启动Consul   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    docker run -d -e &apos;CONSUL_LOCAL_CONFIG=&#123;&quot;skip_leave_on_interrupt&quot;: true&#125;&apos; --name=consul1 consul agent -server -bind=119.29.92.252 -bootstrap-expect=3 -node=consul1</span><br><span class="line">    ```   </span><br><span class="line">    * -node：节点的名称  </span><br><span class="line">    * -bind：绑定的一个地址，用于节点之间通信的地址，可以是内外网，必须是可以访问到的地址  </span><br><span class="line">    * -server：这个就是表示这个节点是个SERVER  </span><br><span class="line">    * -bootstrap-expect：这个就是表示期望提供的SERVER节点数目，数目一达到，它就会被激活，然后就是leader节点了</span><br><span class="line">2. 启动节点2、3</span><br></pre></td></tr></table></figure></li></ol></blockquote><pre><code>docker run -d -e &apos;CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;: true}&apos; --name=consul2 consul agent -server -bind=172.17.0.3  -join=119.29.92.252 -node-id=$(uuidgen | awk &apos;{print tolower($0)}&apos;)  -node=consul2docker run -d -e &apos;CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;: true}&apos; --name=consul3 consul agent -server -bind=172.17.0.4  -join=119.29.92.252 -node-id=$(uuidgen | awk &apos;{print tolower($0)}&apos;)  -node=consul3 -client=172.17.0.4```* -join：这个表示启动的时候，要加入到哪个集群内，这里就是说要加入到*节点1的集群* -node-id：这个貌似版本8才加入的，这里用这个来指定唯一的节点ID，可以查看这个issue  * -client：这个表示注册或者查询等一系列客户端对它操作的IP，如果不指定这个IP，默认是127.0.0.1。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker中安装Consul&lt;br&gt;
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Consul" scheme="http://blog.xxgtalk.cn/tags/Consul/"/>
    
      <category term=".NetCore微服务" scheme="http://blog.xxgtalk.cn/tags/NetCore%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>React资料收集</title>
    <link href="http://blog.xxgtalk.cn/2018/08/01/front/react/collection/"/>
    <id>http://blog.xxgtalk.cn/2018/08/01/front/react/collection/</id>
    <published>2018-08-01T01:10:10.000Z</published>
    <updated>2018-09-27T10:59:38.625Z</updated>
    
    <content type="html"><![CDATA[<p>React资料收集<br><a id="more"></a></p><h5 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h5><p>vscode、Rekit</p><h5 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h5><p>eslint-config-airbnb  最最最完整的javascript eslint规则</p><h5 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h5><p>代码格式化工具,vscode支持 安装插件 添加.prettier文件</p><h5 id="React-DevTool、Redux-DevTool"><a href="#React-DevTool、Redux-DevTool" class="headerlink" title="React DevTool、Redux DevTool"></a>React DevTool、Redux DevTool</h5><p>chrome浏览器插件</p><h5 id="单元测试相关"><a href="#单元测试相关" class="headerlink" title="单元测试相关"></a>单元测试相关</h5><ol><li>Jest:Facebook开源的JS单元测试狂阿基</li><li>JS DOM浏览器环境的NodeJS模拟</li><li>Enzyme:React组件渲染和测试</li><li>nock:模拟http请求</li><li>sinon：函数模拟和调用跟踪</li><li>istanbul:单元测试覆盖率</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React资料收集&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="http://blog.xxgtalk.cn/categories/React/"/>
    
    
      <category term="前端" scheme="http://blog.xxgtalk.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="http://blog.xxgtalk.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装RabbitMQ</title>
    <link href="http://blog.xxgtalk.cn/2018/06/08/docker/12docker-rabbitmq/"/>
    <id>http://blog.xxgtalk.cn/2018/06/08/docker/12docker-rabbitmq/</id>
    <published>2018-06-08T03:30:10.000Z</published>
    <updated>2018-09-27T10:59:38.616Z</updated>
    
    <content type="html"><![CDATA[<p>Docker安装RabbitMQ<br><a id="more"></a></p><blockquote><p>参考地址:<a href="https://hub.docker.com/_/rabbitmq/" target="_blank" rel="noopener">https://hub.docker.com/_/rabbitmq/</a></p><ul><li>运行命令     <figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -p 8092:15672 -p 5672:5672  --restart always --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER=xxg -e RABBITMQ_DEFAULT_PASS=Abcd1234  rabbitmq:3-management</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>说明<br>-e RABBITMQ_DEFAULT_USER=xxg    –默认用户名<br>-e RABBITMQ_DEFAULT_PASS=Abcd1234   –默认密码<br>rabbitmq:3-management       –表示使用带插件版本的(可以通过<a href="http://host-ip:8092" target="_blank" rel="noopener">http://host-ip:8092</a> 访问管理控制台)<br>4369/tcp    服务器 需要开放这个端口<br>5671/tcp    服务器 需要开放这个端口  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker安装RabbitMQ&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装redis</title>
    <link href="http://blog.xxgtalk.cn/2018/06/06/docker/11docker-redis/"/>
    <id>http://blog.xxgtalk.cn/2018/06/06/docker/11docker-redis/</id>
    <published>2018-06-06T03:15:10.000Z</published>
    <updated>2018-11-11T04:38:17.216Z</updated>
    
    <content type="html"><![CDATA[<p>Docker下安装redis<br><a id="more"></a></p><ol><li>创建网络<br>docker network create net_redis</li><li><p>创建redis配置文件(/docker/redis/config/redis.conf)  </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#redis的databases数量</span></span><br><span class="line">databases 32</span><br><span class="line"><span class="comment">#redis密码</span></span><br><span class="line">requirepass 123</span><br></pre></td></tr></table></figure></li><li><p>通过docker-compose安装<br>docker-compose -f redis-docker-compose.yml up -d<br><a href="http://qiniu.xxgtalk.cn/blog/files/docker/redis-docker-compose.yml" target="_blank" rel="noopener">文件链接</a>  </p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker下安装redis&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core + Docker + Jenkins + gogs + CentOS 从零开始搭建持续集成</title>
    <link href="http://blog.xxgtalk.cn/2018/06/06/docker/10docker-jenkins-gogs-cicd/"/>
    <id>http://blog.xxgtalk.cn/2018/06/06/docker/10docker-jenkins-gogs-cicd/</id>
    <published>2018-06-06T03:01:10.000Z</published>
    <updated>2018-09-27T10:59:38.615Z</updated>
    
    <content type="html"><![CDATA[<p>ASP.NET Core + Docker + Jenkins + gogs + CentOS 从零开始搭建持续集成<br><a id="more"></a></p><blockquote><p>参考地址：<a href="https://www.cnblogs.com/stulzq/p/8629165.html" target="_blank" rel="noopener">https://www.cnblogs.com/stulzq/p/8629165.html</a><br><a href="https://www.jianshu.com/p/64e9708c23e7" target="_blank" rel="noopener">https://www.jianshu.com/p/64e9708c23e7</a><br>前置条件 安装了docker、配置了加速镜像(参考01)  </p><ol><li>使用docker安装免费https证书  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -it --rm --name certbot \</span><br><span class="line">   -v &quot;/etc/letsencrypt:/etc/letsencrypt&quot; \</span><br><span class="line">   -v &quot;/var/lib/letsencrypt:/var/lib/letsencrypt&quot; \</span><br><span class="line">   certbot/certbot certonly</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>按照提示进行操作  </p><ol start="2"><li>docker安装Gogs (一个gitserver，类似于gitlab)<br>创建文件/docker/gogs  然后运行如下命令<br>docker run -d –name=gogs -p 23:22 -p 8090:3000 –mount type=bind,src=/docker/gogs,dst=/data –restart always gogs/gogs   <blockquote><p>参考地址 <a href="https://github.com/gogits/gogs/tree/master/docker" target="_blank" rel="noopener">https://github.com/gogits/gogs/tree/master/docker</a>   </p></blockquote></li><li>docker 安装jenkins<br>自定义镜像  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">jenkins</span></span><br><span class="line"><span class="string">USER</span> <span class="string">root</span></span><br><span class="line"><span class="comment">#清除了基础镜像设置的源，切换成腾讯云的jessie源</span></span><br><span class="line"><span class="comment">#使用非腾讯云环境的需要将 tencentyun 改为 aliyun</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">echo</span> <span class="string">''</span> <span class="string">&gt; /etc/apt/sources.list.d/jessie-backports.list \</span></span><br><span class="line"><span class="string">  &amp;&amp; echo "deb http://mirrors.tencentyun.com/debian jessie main contrib non-free" &gt; /etc/apt/sources.list \</span></span><br><span class="line"><span class="string">  &amp;&amp; echo "deb http://mirrors.tencentyun.com/debian jessie-updates main contrib non-free" &gt;&gt; /etc/apt/sources.list \</span></span><br><span class="line"><span class="string">  &amp;&amp; echo "deb http://mirrors.tencentyun.com/debian-security jessie/updates main contrib non-free" &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="string">#更新源并安装缺少的包</span></span><br><span class="line"><span class="string">RUN apt-get update &amp;&amp; apt-get install -y libltdl7 &amp;&amp; apt-get update</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ARG dockerGid=999</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">RUN echo "docker:x:$&#123;dockerGid&#125;:jenkins" &gt;&gt; /etc/group </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 安装 docker-compose 因为等下构建环境的需要</span></span><br><span class="line"><span class="string">RUN curl -L https://github.com/docker/compose/releases/download/1.20.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">RUN chmod +x /usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure></li></ol><p>docker build -t auto-jenkins .<br>创建目录/docker/jenkins/docker.sock、/docker/jenkins/jenkins_home<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="bullet">--name</span> <span class="string">jenkins</span> <span class="bullet">-p</span> <span class="number">8091</span><span class="string">:8080</span> <span class="bullet">-p</span> <span class="number">50000</span><span class="string">:50000</span> <span class="string">\</span></span><br><span class="line"><span class="bullet">    -</span><span class="bullet">-mount</span> <span class="string">type=bind,src=/docker/jenkins/docker.sock,dst=/var/run/docker.sock</span> <span class="string">\</span></span><br><span class="line"><span class="bullet">    -</span><span class="bullet">-mount</span> <span class="string">type=bind,src=$(which</span> <span class="string">docker),dst=/bin/docker</span> <span class="string">\</span></span><br><span class="line"><span class="bullet">    -</span><span class="bullet">-mount</span> <span class="string">type=bind,src=/docker/jenkins/jenkins_home,dst=/var/jenkins_home</span> <span class="string">\</span></span><br><span class="line"><span class="bullet">    -</span><span class="bullet">-restart</span> <span class="string">always</span> <span class="string">\</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">d</span> <span class="string">auto-jenkins</span></span><br></pre></td></tr></table></figure></p><p>docker run –name jenkins -p 8091:8080 -p 50000:50000 –mount type=bind,src=/docker/jenkins/docker.sock,dst=/var/run/docker.sock  –mount type=bind,src=$(which docker),dst=/bin/docke  –mount type=bind,src=/docker/jenkins/jenkins_home,dst=/var/jenkins_home –restart always -d auto-jenkins  </p><ol start="4"><li>ASP.NET Core 持续集成  </li><li>Jenkins配置Gogs webhook插件  </li><li>Jenkins持续集成演示  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASP.NET Core + Docker + Jenkins + gogs + CentOS 从零开始搭建持续集成&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Centos7.x 安装gitlab-runner</title>
    <link href="http://blog.xxgtalk.cn/2018/06/05/docker/07gitlab01-runner/"/>
    <id>http://blog.xxgtalk.cn/2018/06/05/docker/07gitlab01-runner/</id>
    <published>2018-06-05T02:35:10.000Z</published>
    <updated>2018-09-27T10:59:38.614Z</updated>
    
    <content type="html"><![CDATA[<p>Centos7.x 安装gitlab-runner<br><a id="more"></a></p><blockquote><p>说明：开始尝试过在docker中安装gitlab-runner注册gitlab-runner啥的都没问题 但是gitlab-ci.yml文件中使用docker的时候提示xxxx daemon文件问题 折腾了好几天没能解决(大概的意思就是在容器内部使用使用docker访问不了外面的啥东西最后放弃了，该用在centos中直接安装gitlab-runner形式)<br>参考地址: <a href="http://www.cnblogs.com/xishuai/p/ubuntu-gitlab-ci-docker-aspnet-core-part-2.html" target="_blank" rel="noopener">http://www.cnblogs.com/xishuai/p/ubuntu-gitlab-ci-docker-aspnet-core-part-2.html</a><br>【前置条件】 系统安装了docker、docker-compose、git、dotnetcore<br>docker 这个必须要<br>git 必须，因为需要通过git获取代码<br>docker-compose根据情况 因为我的ci中使用了docker-compose所以要<br>dotnetcore 因为我是微软的铁杆粉丝  </p><ol><li>安装docker、docker-compose<a href="./01docker-config.html">参考01</a>    </li><li>gitlab-runner  </li></ol><ul><li>安装命令<br>sudo wget -O /usr/local/bin/gitlab-runner <a href="https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-linux-amd64" target="_blank" rel="noopener">https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-linux-amd64</a>  </li><li>给予其权限<br>sudo chmod +x /usr/local/bin/gitlab-runner  </li><li>注册<br>sudo gitlab-runner register<br>根据提示输入gitlab地址、token、描述信息、tag、[true|false]、[true|false]、shell    </li><li>添加一个用于跑 GitLab Runner 的gitlab-runner用户<br>sudo useradd –comment ‘GitLab Runner’ –create-home gitlab-runner –shell /bin/bash    </li><li>指定 GitLab Runner 执行的用户和工作目录<br>sudo gitlab-runner install –user=gitlab-runner –working-directory=/home/gitlab-runner  </li><li>启动gitlab-runner<br>sudo gitlab-runner start  </li><li>把 GitLab Runner 服务器中的gitlab-runner账户，添加到docker用户组中<br>sudo usermod -aG docker gitlab-runner  </li><li>在 GitLab Runner 服务器中，切换到gitlab-runner用户下，配置 SSH    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su gitlab-runner</span><br><span class="line">ssh-keygen -t rsa -P &apos;&apos;</span><br><span class="line">ssh-copy-id root@你的ip地址</span><br></pre></td></tr></table></figure></li></ul></blockquote><ol start="3"><li>安装git<br>cd ~<br>yum -y install git  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos7.x 安装gitlab-runner&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装GitLab</title>
    <link href="http://blog.xxgtalk.cn/2018/06/05/docker/07gitlab/"/>
    <id>http://blog.xxgtalk.cn/2018/06/05/docker/07gitlab/</id>
    <published>2018-06-05T02:30:10.000Z</published>
    <updated>2018-11-11T04:38:17.216Z</updated>
    
    <content type="html"><![CDATA[<p>Docker下安装GitLab<br><a id="more"></a></p><blockquote><p>前置条件 安装好docker  </p><ol><li>docker运行gitlab(由于22端口被ssh占用 改用23)  </li></ol><ul><li>在/docker/gitlab 目录下分别创建data、config、logs三个文件夹  </li><li>执行命令<figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="keyword">run</span> --detach --hostname gitlab.xxgtalk.cn --publish 443:443 --publish 8090:80 --publish 23:22 --name gitlab --restart always -v /docker/gitlab/config:/etc/gitlab -v /docker/gitlab/logs:/var/log/gitlab -v /docker/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce</span><br><span class="line">* * * * * * 介绍 * * * * * *</span><br><span class="line">sudo docker run --detach \</span><br><span class="line">--hostname gitlab.xxgtalk.cn \</span><br><span class="line">--publish 443:443 --publish 8090:80 --publish 23:22 \ </span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">-v /docker/gitlab/config:/etc/gitlab \ 配置文件映射到config文件夹</span><br><span class="line">-v /docker/gitlab/logs:/var/log/gitlab \</span><br><span class="line">-v /docker/gitlab/data:/var/opt/gitlab \</span><br><span class="line">gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>::: warning 注意</p><ul><li>因为配置的ssh端口是23 所以需要修改/docker/gitlab/config/gitlab.rb文件中修改或增加<br>gitlab_rails[‘gitlab_shell_ssh_port’] = 23</li><li>查看日志<br>docker logs –follow gitlab<br>:::</li></ul><ol start="2"><li>docker下安装gitlab runner  </li></ol><ul><li><p>[2.1] 安装gitlab runner</p>  <figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -d --name gitlab-runner --restart always -v /docker/gitlab-runner/run/docker.sock:/var/run/docker.sock -v /docker/gitlab-runner/config:/etc/gitlab-runner  gitlab/gitlab-runner</span><br><span class="line">* * * * * * 介绍 * * * * * *</span><br><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /docker/gitlab-runner/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /docker/gitlab-runner/config:/etc/gitlab-runner  \</span><br><span class="line">  gitlab/gitlab-runner</span><br></pre></td></tr></table></figure></li><li><p>[2.2] 注册gitlab runner(官方建议跟gitlab不要放在同一个服务器上)【最后没有成功,改用<a href="07GitLab01-runner.md">07Gitlab01-runner</a> 】<br>参考地址:<a href="https://docs.gitlab.com.cn/runner/register/index.html" target="_blank" rel="noopener">https://docs.gitlab.com.cn/runner/register/index.html</a>  </p><ul><li>运行下面命令启动注册程序<br>docker exec -it gitlab-runner gitlab-runner register  </li><li>输入 GitLab 实例 URL<br>gitlab的域名  </li><li>输入获取到的用于注册 Runner 的 token:<br>y8R7nLY4x3mdBiZt9AQV  </li><li>输入该 Runner 的描述，稍后也可通过 GitLab’s UI 修改:  </li><li>给该 Runner 指派 tags, 稍后也可以在 GitLab’s UI 修改:  </li><li>选择 Runner 是否接收未指定 tags 的任务（默认值：false）， 稍后可以在 GitLab’s UI 修改： true  </li><li>选择是否为当前项目锁定该 Runner， 之后也可以在 GitLab’s UI 修改。 该功能通常用于被指定为某个项目的 Runner （默认值：true）：  </li><li>选择 Runner executor:<br>我们使用docker  </li><li>如果你选择 Docker 作为你的 executor，注册程序会让你设置一个默认的镜像， 作用于.gitlab-ci.yml中未指定镜像的项目<br>输入: microsoft/dotnet  </li></ul></li></ul><hr><h5 id="搭建私有仓库"><a href="#搭建私有仓库" class="headerlink" title="搭建私有仓库"></a>搭建私有仓库</h5><ol><li>在docker中创建文件夹registry 用来存放仓库镜像，然后运行命令  <figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -d -v /docker/registry:/var/lib/registry -p 8091:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure></li></ol><h5 id="使用docker-compose安装"><a href="#使用docker-compose安装" class="headerlink" title="使用docker-compose安装"></a>使用docker-compose安装</h5><p>请查看<a href="http://qiniu.xxgtalk.cn/blog/files/docker/gitlab-docker-compose.yml" target="_blank" rel="noopener">docker-compose文件</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker下安装GitLab&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用docker-compose</title>
    <link href="http://blog.xxgtalk.cn/2018/06/04/docker/06docker-compose/"/>
    <id>http://blog.xxgtalk.cn/2018/06/04/docker/06docker-compose/</id>
    <published>2018-06-04T02:01:10.000Z</published>
    <updated>2018-11-11T04:38:17.216Z</updated>
    
    <content type="html"><![CDATA[<p>使用docker-compose按照webapi&amp;mysql<br><a id="more"></a></p><p><a href="./05docker-webapi-mysql.html">接Docker制作WebApi&amp;MySql</a></p><ol><li>创建docker-compose.yml文件  <figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">version <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">      image: mysql/mysql-server</span><br><span class="line">      container_name: <span class="string">'db'</span></span><br><span class="line">      command: mysqld --character-set-server=utf8 --collaction-server=utf8_general_ci</span><br><span class="line">      restart: always</span><br><span class="line">      ports:</span><br><span class="line">        -<span class="string">'3306:3306'</span></span><br><span class="line">      environment:</span><br><span class="line">        MYSQL_ROOT_PASSWORD: Abcd1234</span><br><span class="line">        MYSQL_USER: sa</span><br><span class="line">        MYSQL_PASWORD: Abcd1234</span><br><span class="line">      volumes:</span><br><span class="line">        - /docker/mysql/db-init:/docker-<span class="keyword">entrypoint</span>-initdb.d</span><br><span class="line">  webapi:</span><br><span class="line">      build: .</span><br><span class="line">      container_name: 'webapi01'</span><br><span class="line">      ports:</span><br><span class="line">        -'5000:80'</span><br><span class="line">      depends_on:</span><br><span class="line">        - db</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>【注意】<br>由于db需要初始化用户角色 所以在资料卷中指定目录下放入sql 内容<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘sa‘@’%’ WITH GRANT OPTION;  </p><ol start="2"><li>执行命令<br>docker-compose build<br>docker up    //docker down 与docker up相反<br><a href="http://qiniu.xxgtalk.cn/blog/files/docker/mysql-docker-compose.yml" target="_blank" rel="noopener">docker-compose文件</a>  </li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用docker-compose按照webapi&amp;amp;mysql&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker制作WebApi&amp;MySql</title>
    <link href="http://blog.xxgtalk.cn/2018/06/03/docker/05docker-webapi-mysql/"/>
    <id>http://blog.xxgtalk.cn/2018/06/03/docker/05docker-webapi-mysql/</id>
    <published>2018-06-03T01:30:10.000Z</published>
    <updated>2018-11-11T04:38:17.216Z</updated>
    
    <content type="html"><![CDATA[<p>Docker制作WebApi&amp;MySql 直接上图<br><a id="more"></a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://qiniu.xxgtalk.cn/blog/images/docker/050a01.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li><p>docker文件  </p> <figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> microsoft/aspnetcore-build as build-<span class="keyword">env</span></span><br><span class="line"><span class="keyword">WORKDIR</span> /code</span><br><span class="line">COPY *.csproj ./</span><br><span class="line">RUN dotnet restore</span><br><span class="line"></span><br><span class="line">COPY . ./</span><br><span class="line">RUN dotnet publish -c Release -o out</span><br><span class="line"></span><br><span class="line">FROM microsoft/aspnetcore</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY --from=build-env /code/out ./</span><br><span class="line"></span><br><span class="line">EXPOSE 50000</span><br><span class="line">ENTRYPOINT ["dotnet","WebApiDocker.dll"]</span><br></pre></td></tr></table></figure></li><li><p>编译docker文件  </p> <figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t  xxg/aspnetcore:<span class="number">1.0</span> .</span><br></pre></td></tr></table></figure></li><li><p>使用该镜像启动一个容器<br>a. docker run -d -p 5000:80  –name api01 –link mysql01:db xxg/aspnetcore:1.0<br>b. 使用bridge形式<br>docker network create -d bridge mybridge        //创建一个网络<br>docker run -d -p 5000:5000 –net mybridge –name api1 xxg/aspnetcore:1.0<br>docker network connect mysql01  mybridge    //表示将mysql01跟mybridge网络连接起来  </p><blockquote><p>–link mysql01:db        –表示将mysql01取个别名db并连接到当前容器<br>–net mybridge        –表示使用指定网络</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker制作WebApi&amp;amp;MySql 直接上图&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装MsSqlserver</title>
    <link href="http://blog.xxgtalk.cn/2018/06/02/docker/04docker-mssqlserver/"/>
    <id>http://blog.xxgtalk.cn/2018/06/02/docker/04docker-mssqlserver/</id>
    <published>2018-06-02T01:25:10.000Z</published>
    <updated>2018-09-27T10:59:38.607Z</updated>
    
    <content type="html"><![CDATA[<p>Docker安装MsSqlserver<br><a id="more"></a></p><blockquote><p>未成功</p><ol><li>执行命令  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=Abcd1234' -v=/docker/mssql:/var/opt/mssql  -p 1433:1433 <span class="comment">--name sqlserver  -d microsoft/mssql-server-linux:2017-latest  </span></span><br><span class="line">* * * * * * * * * 备注 * * * * * * * * * </span><br><span class="line"> docker run -e 'ACCEPT_EULA=Y'  <span class="comment">--是否接受协议</span></span><br><span class="line">    -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' --设置密码</span><br><span class="line">    -p 1433:1433    <span class="comment">--端口</span></span><br><span class="line">    <span class="comment">--name sqlserver       --用户</span></span><br><span class="line">   -d microsoft/mssql-server-linux:2017-latest <span class="comment">--2017latest版本</span></span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker安装MsSqlserver&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装MySql</title>
    <link href="http://blog.xxgtalk.cn/2018/06/02/docker/04docker_install_mysql/"/>
    <id>http://blog.xxgtalk.cn/2018/06/02/docker/04docker_install_mysql/</id>
    <published>2018-06-02T01:20:10.000Z</published>
    <updated>2018-09-27T10:59:38.612Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 安装MySql<br><a id="more"></a></p><blockquote><p>将docker容器中的实例中的文件跟物理文件链接起来 即使删掉容器 数据还在 再创建容器的时候 任然可以对应上之前的数据  </p></blockquote><h4 id="一、安装篇"><a href="#一、安装篇" class="headerlink" title="一、安装篇"></a>一、安装篇</h4><ol><li>使用docker-compose安装  </li></ol><ul><li><p>[1.1] 在目录/docker/mysql/mysql-init下创建init-user.sql文件 内容如下  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">CREATE USER &apos;sa&apos;@&apos;%&apos; IDENTIFIED BY &apos;Abcd1234&apos;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;sa&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure></li><li><p>[1.2]<br>docker-compose -f mysql-docker-compose.yml up -d<br>对应的mysql-docker-compose.yml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'2.3'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mysql/mysql-server</span><br><span class="line">    container_name: mysql01</span><br><span class="line">    restart: always</span><br><span class="line">    <span class="built_in">command</span>: mysqld --character-set-server=utf8 --collation-server=utf8_general_ci</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line"><span class="comment"># networks:</span></span><br><span class="line"><span class="comment">#   - net_mysql</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: Abcd1234</span><br><span class="line">    volumes:</span><br><span class="line">      - /docker/mysql/mysql-init:/docker-entrypoint-initdb.d</span><br><span class="line">      - /docker/mysql/data:/var/lib/mysql</span><br><span class="line"><span class="comment"># volumes:</span></span><br><span class="line"><span class="comment">#   mysql-data:</span></span><br><span class="line"><span class="comment">#     external: true</span></span><br><span class="line"><span class="comment"># networks:</span></span><br><span class="line"><span class="comment">#   net_mysql:</span></span><br><span class="line"><span class="comment">#     external: true</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>mount【推荐使用】  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=Abcd1234 --name mysql01 --restart always --mount type=bind,src=/docker/mysql/config/my.cnf,dst=/etc/my.cnf --mount type=bind,src=/docker/mysql/data,dst=/var/lib/mysql mysql</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>/docker/mysql/config/my.cnf    &nbsp;&nbsp;对应物理磁盘位置 需要新建my.cnf 内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user=root</span><br><span class="line">character-set-server=utf8</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>/etc/my.cnf    –docker创建mysql后该mysql容器对应的配置文件<br>/docker/mysql/data    –对应物理磁盘位置 表示docker中数据映射到的物理文件位置<br>/var/lib/mysql mysql/mysql-server &nbsp;&nbsp;对应docker中mysql实例容器的文件位置<br>-e  MYSQL_ROOT_PASSWORD=Abcd1234 &nbsp;设置初始密码  </p><ol><li>volume[后期废用]  推荐使用mount形式  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name mysql01 -v=/docker/mysql/config/my.cnf:/etc/my.cnf -v=/docker/mysql/data:/var/lib/mysql mysql/mysql-server</span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="二、使用篇"><a href="#二、使用篇" class="headerlink" title="二、使用篇"></a>二、使用篇</h4><blockquote><p>docker 操作mysql  </p><ol><li>连接mysql<br>docker exec -it mysql01 bash<br>mysql -u root -p [密码]     –密码可以待mysql容器启动后<br>通过docker logs mysql01 找到生成的随机密码 密码在一段类型：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/docker/040101.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>设置mysql密码<br>SET PASSWORD FOR ‘root‘@’localhost’ = PASSWORD(‘Abcd1234’);    –用户名为root 密码为Abcd1234  </li><li>实验一下    【–exit 退出当前】<br>use mysql;    –使用数据库查询<br>select user,host from user;    –查询用户信息<br>show variables like ‘%char%’;        –查看当前使用的字符集<br>在mysql中创建网络用户 这样可以非本机访问<br>mysql&gt; CREATE USER ‘sa‘@’%’ IDENTIFIED BY ‘Abcd1234’;<br>mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO ‘sa‘@’%’;<br>docker run -d -p 3306:3306 -e”MYSQL_USER=Zarc” -e”MYSQL_PASSWORD=pwd123456” -e”MYSQL_ROOT_PASSWORD=password123” -e”MYSQL_RANDOM_ROOT_PASSWORD=true” –name mysql01 mysql/mysql-server –character-set-server=utf8 –collation-server=utf8_general_ci<br>备注： : When this is true (which is its default state, unless MYSQL_ROOT_PASSWORD is set or MYSQL_ALLOW_EMPTY_PASSWORD is set to true), a random password for the server’s root user is generated when the Docker container is started 当这个MYSQL_RANDOM_ROOT_PASSWORD 为true 时 为root用户设置密码是没有作用的还是会生成随机的密码，设置为false 或者不加这个环境变量  </li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 安装MySql&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装mongodb</title>
    <link href="http://blog.xxgtalk.cn/2018/06/01/docker/03docker-mongodb/"/>
    <id>http://blog.xxgtalk.cn/2018/06/01/docker/03docker-mongodb/</id>
    <published>2018-06-01T01:15:10.000Z</published>
    <updated>2018-09-27T10:59:38.606Z</updated>
    
    <content type="html"><![CDATA[<p>Docker安装mongodb<br><a id="more"></a></p><ol><li>配置好docker的加速镜像[参考02Docker安装及配置]  </li><li>docker pull mongo 拉去mongo镜像  </li><li>启动docker实例  <blockquote><p>方式一<br>docker run -d -p 27017:27017 –name mongodb mongo<br>方式二 将容器的文件挂在到Host Volume<br>–首先创建文件夹  /docker/mongo/config  以及/docker/mongo/data 用于与docker中mongo实例链接  然后运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 27017:27017 --name mongo01 -v /docker/mongo/config:/data/configdb -v=/docker/mongo/data:/data/db mongo</span><br></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker安装mongodb&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装及配置加速镜像</title>
    <link href="http://blog.xxgtalk.cn/2018/05/30/docker/01docker-config/"/>
    <id>http://blog.xxgtalk.cn/2018/05/30/docker/01docker-config/</id>
    <published>2018-05-30T01:15:08.000Z</published>
    <updated>2018-09-27T10:59:38.606Z</updated>
    
    <content type="html"><![CDATA[<p>Docker安装及配置加速镜像<br><a id="more"></a></p><blockquote><p>个人阿里云加速镜像个人地址&nbsp; <a href="https://noe4mlw6.mirror.aliyuncs.com" target="_blank" rel="noopener">https://noe4mlw6.mirror.aliyuncs.com</a></p></blockquote><hr><h5 id="CentOS-7-使用yum进行安装"><a href="#CentOS-7-使用yum进行安装" class="headerlink" title="CentOS 7 (使用yum进行安装)"></a>CentOS 7 (使用yum进行安装)</h5><p>如果之前安装过】先卸载依赖<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">docker-common \</span><br><span class="line">container-selinux \</span><br><span class="line">docker-selinux \</span><br><span class="line">docker-engine \</span><br><span class="line">docker-engine-selinux</span><br></pre></td></tr></table></figure></p><ol><li>直接安装<br>curl -sSL <a href="https://get.docker.com/" target="_blank" rel="noopener">https://get.docker.com/</a> | sh</li><li>启动 并设置开机启动  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>配置docker使用国内镜像<br>如何配置镜像加速器<br>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://noe4mlw6.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>重启docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></p><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><ol><li>sudo curl -L <a href="https://github.com/docker/compose/releases/download/1.20.0/docker-compose-`uname" target="_blank" rel="noopener">https://github.com/docker/compose/releases/download/1.20.0/docker-compose-`uname</a> -s<code>-</code>uname -m` -o /usr/local/bin/docker-compose  </li><li>sudo chmod a+x /usr/local/bin/docker-compose <blockquote><p>卸载<br>sudo rm /usr/local/bin/docker-compose</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker安装及配置加速镜像&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://blog.xxgtalk.cn/2018/05/28/docker/00command/"/>
    <id>http://blog.xxgtalk.cn/2018/05/28/docker/00command/</id>
    <published>2018-05-28T01:10:10.000Z</published>
    <updated>2018-09-27T10:59:38.605Z</updated>
    
    <content type="html"><![CDATA[<p>Docker常用命令<br><a id="more"></a></p><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">说明</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">docker –version</td><td style="text-align:left">查看当前docker版本</td></tr><tr><td style="text-align:left">docker ps</td><td style="text-align:left">查看当前正在运行的容器</td></tr><tr><td style="text-align:left">docker images</td><td style="text-align:left">查看本地所有镜像</td></tr><tr><td style="text-align:left">docker pull [镜像名称]</td><td style="text-align:left">拉取一个镜像到本地</td></tr><tr><td style="text-align:left">docker run [容器名称]</td><td style="text-align:left">运行一个容器</td></tr><tr><td style="text-align:left">docker rm [容器名称]</td><td style="text-align:left">删除本地使用过的容器</td></tr><tr><td style="text-align:left">docker start [Name]</td><td style="text-align:left">启动指定容器</td></tr><tr><td style="text-align:left">docker stop [Name]</td><td style="text-align:left">关闭指定容器</td></tr><tr><td style="text-align:left">docker pause [Name]</td><td style="text-align:left">暂停指定容器</td></tr><tr><td style="text-align:left">docker unpause [Name]</td><td style="text-align:left">恢复指定容器</td></tr><tr><td style="text-align:left">docker rmi -f $(docker images -a -q)</td><td style="text-align:left">移除所有images</td></tr><tr><td style="text-align:left">docker rmi $(docker images -f ‘dangling=true’ -q)</td><td style="text-align:left">移除none的images  </td></tr><tr><td style="text-align:left">docker inspect [容器名称]</td><td style="text-align:left">查看容器的信息</td></tr><tr><td style="text-align:left">docker exec -it [容器名称] bash</td><td style="text-align:left">在容器内执行bash 比如执行后可以执行ls查看目录 也可以创建文件等</td></tr><tr><td style="text-align:left">docker rm -fv [容器Id]</td><td style="text-align:left">停止、删除容器、清除数据</td></tr><tr><td style="text-align:left">docker images -f [option]</td><td style="text-align:left">过滤查询</td></tr><tr><td style="text-align:left">docker logs -f [container-name]</td><td style="text-align:left">查看日志</td></tr></tbody></table><p>::: warning 温馨提示</p><ul><li>docker run -p 8001:80   &nbsp;&nbsp;–运行 指定端口 8001外部端口  80表示内部端口</li><li>docker run -d             &nbsp;&nbsp;–detach 还可以继续操作 不会阻塞</li><li>docker run –name        &nbsp;&nbsp;–运行的docker镜像的名称</li><li>docker run -p 8001:80 &nbsp;&nbsp;–name myapi helloapi:latest<br>表示运行docker中名为helloapi的容器 版本为latest docker的端口为80 本机的端口8001 名字为myapi</li><li>docker ps -a            &nbsp;&nbsp;–查看所有容器 不管有没运行</li><li>过滤查询<br>docker images –filter “before=image1” 查询image1之后的<br>docker images –filter “since=image3”  查询image3之前的<br>docker images “wechat:v1.3.<em>“  查询wechat:1.3.x的<br>docker rmi -f $(docker images “wechat:v1.2.</em>“ -q) 移除wechat:v1.2.*版本的</li><li>docker logs查看日志<br>docker logs -f gitlab 查看gitlab容器所有日志<br>docker logs –tail 20 -f gitlab 查看gitlab最近20条的日志<br>docker logs –since 30s -f gitlab 查看gitlab最近30s的日志<br>:::</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker常用命令&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.xxgtalk.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>windows使用相关</title>
    <link href="http://blog.xxgtalk.cn/2018/05/20/tools/windows/"/>
    <id>http://blog.xxgtalk.cn/2018/05/20/tools/windows/</id>
    <published>2018-05-20T01:10:15.000Z</published>
    <updated>2018-09-27T10:59:38.629Z</updated>
    
    <content type="html"><![CDATA[<h4 id="window技巧-长期更新"><a href="#window技巧-长期更新" class="headerlink" title="window技巧-长期更新"></a>window技巧-长期更新</h4><a id="more"></a><h5 id="一、技巧篇"><a href="#一、技巧篇" class="headerlink" title="一、技巧篇"></a>一、技巧篇</h5><ul><li>查看占用端口<br>netstat -aon    [|findstr “1005”]      查找1005端口被那个占用  </li><li>windows下删除多层级文件夹：<br>安装rimraf包：npm install -g rimraf<br>然后通过：rimraf &lt;目录名称&gt; 来删除  </li><li>*#06#:查看IphoneCMD</li><li>如何下载到本地，而不是边下载边更新：<br>创建一个快捷方式，在快捷方式的后面加 “-layout” 双击后就是下载到本地 而不是安装</li><li>打开本地连接：ncpa.cpl</li><li>查看系统支持的最大内存：wmic memphysical get maxcapacity</li><li>修改hosts文件后刷新 ipconfig -flushdns<h5 id="二、快捷键"><a href="#二、快捷键" class="headerlink" title="二、快捷键"></a>二、快捷键</h5></li><li>comexp.msc:打开window组件服务，可以查看事务  </li><li>netplwiz   :修改用户组相关  </li><li>inetmgr:打开IIS  </li><li>ssms:SQLServer数据库</li><li>SQLServerManager11.msc 数据库管理工具</li><li>devenv:VS</li><li>mstsc:远程</li><li>Alt+Enter 显示所选项的属性</li><li>Alt+Esc 以项目打开的顺序循环切换项目</li><li>Alt+向上键 在 Windows 资源管理器中查看上一级文件夹</li><li>Win + M：最小化所有窗口</li><li>Windows 徽标键 + 加号或减号 放大或缩小</li><li>Windows 徽标键 输入mspaint 打开画图</li><li>Windows 徽标键 输入psr打开系统视频录制</li><li>Windows 徽标键  snippingtool  win7自带截图工具</li><li>notepad 打开记事本</li><li>write———-写字板</li><li>perfmon.msc—-计算机性能监测程序</li><li>services.msc 服务</li><li>f10或alt键 激活当前程序的菜单栏</li><li>osk————打开屏幕键盘 </li><li>结束进程：cmd—taskkill /im`notepad.exe /t</li><li>cdm常用命令：具体参考（<a href="http://www.51xue8.com/e/DownSys/play/?classid=31&amp;id=1001&amp;pathid=4&amp;jishu=26）" target="_blank" rel="noopener">http://www.51xue8.com/e/DownSys/play/?classid=31&amp;id=1001&amp;pathid=4&amp;jishu=26）</a></li><li>ver====显示系统版本······ver/? =帮助</li><li>dir====显示驱动版本 · ·······dir/? =帮助</li><li>copy（用法4，全部复制）如：copy c:\新建文件夹*.* ()d:\txt</li><li>chkdsk/?=====查看磁盘文件报告</li><li>chkdsk===检查磁盘</li><li>dir====C盘文件夹目录（详细，时间，大小··）</li><li>dir/w =====显示C盘文件夹 （不显示时间，大小）</li><li>dir/l 显示子文件夹</li><li>dir/p======屏幕显示不完时加p</li><li>format====格式化磁盘（慎用）如：format g:</li><li>format/?====格式化帮助</li><li>del=====删除文件 如：del c:\···</li><li>del/?===删除帮助</li><li>md====创建文件夹</li><li>ipconfig ====查看ip等信息</li><li>ren=====文件重命名</li><li>nslookup======ip地址查询</li><li>exit=====退出</li><li>rd======删除目录</li><li>tasklist =====显示进程</li><li>type=======显示文本内容</li><li>tree=======显示所有文件名····显示D盘则tree d:\</li><li>ping=======检测网络···如ping（必须空格）-f</li><li>net user=========更改用户</li><li>net share====== 查看共享文件</li><li>help==============显示所有命令</li><li>gpedit.msc—–组策略</li><li>sndrec32——-录音机</li><li>Nslookup——-IP地址侦测器</li><li>explorer——-打开资源管理器</li><li>logoff———注销命令</li><li>tsshutdn——-60秒倒计时关机命令</li><li>lusrmgr.msc—-本机用户和组</li><li>services.msc—本地服务设置</li><li>oobe/msoobe /a—-检查XP是否激活</li><li>cleanmgr——-垃圾整理</li><li>net start messenger—-开始信使服务</li><li>compmgmt.msc—计算机管理</li><li>net stop messenger—–停止信使服务</li><li>conf———–启动netmeeting</li><li>dvdplay——–DVD播放器</li><li>charmap——–启动字符映射表</li><li>diskmgmt.msc—磁盘管理实用程序</li><li>calc———–启动计算器</li><li>dfrg.msc——-磁盘碎片整理程序</li><li>chkdsk.exe—–Chkdsk磁盘检查</li><li>devmgmt.msc— 设备管理器</li><li>regsvr32 /u *.dll—-停止dll文件运行</li><li>drwtsn32—— 系统医生</li><li>rononce -p —-15秒关机</li><li>dxdiag———检查DirectX信息</li><li>regedt32——-注册表编辑器</li><li>Msconfig.exe—系统配置实用程序</li><li>rsop.msc——-组策略结果集</li><li>mem.exe——–显示内存使用情况</li><li>regedit.exe—-注册表</li><li>winchat——–XP自带局域网聊天</li><li>progman——–程序管理器</li><li>winmsd———系统信息</li><li>perfmon.msc—-计算机性能监测程序</li><li>winver———检查Windows版本</li><li>sfc /scannow—–扫描错误并复原</li><li>taskmgr—–任务管理器（2000／xp／2003</li><li>winver———检查Windows版本</li><li>wmimgmt.msc—-打开windows管理体系结构(WMI)</li><li>wupdmgr——–windows更新程序</li><li>wscript——–windows脚本宿主设置</li><li>write———-写字板</li><li>winmsd———系统信息</li><li>wiaacmgr——-扫描仪和照相机向导</li><li>winchat——–XP自带局域网聊天</li><li>mem.exe——–显示内存使用情况</li><li>Msconfig.exe—系统配置实用程序</li><li>mplayer2——-简易widnows media player</li><li>mspaint——–画图板</li><li>mstsc———-远程桌面连接</li><li>mplayer2——-媒体播放机</li><li>magnify——–放大镜实用程序</li><li>mmc————打开控制台</li><li>mobsync——–同步命令</li><li>dxdiag———检查DirectX信息</li><li>drwtsn32—— 系统医生</li><li>devmgmt.msc— 设备管理器</li><li>dfrg.msc——-磁盘碎片整理程序</li><li>diskmgmt.msc—磁盘管理实用程序</li><li>dcomcnfg——-打开系统组件服务</li><li>ddeshare——-打开DDE共享设置</li><li>dvdplay——–DVD播放器</li><li>net stop messenger—–停止信使服务</li><li>net start messenger—-开始信使服务</li><li>notepad——–打开记事本</li><li>nslookup——-网络管理的工具向导</li><li>ntbackup——-系统备份和还原</li><li>narrator——-屏幕“讲述人”</li><li>ntmsmgr.msc—-移动存储管理器</li><li>ntmsoprq.msc—移动存储管理员操作请求</li><li>netstat -an—-(TC)命令检查接口</li><li>syncapp——–创建一个公文包</li><li>sysedit——–系统配置编辑器</li><li>sigverif——-文件签名验证程序</li><li>sndrec32——-录音机</li><li>shrpubw——–创建共享文件夹</li><li>secpol.msc—–本地安全策略</li><li>syskey———系统加密，一旦加密就不能解开，保护windows xp系统的双重密码</li><li>services.msc—本地服务设置</li><li>Sndvol32——-音量控制程序</li><li>sfc.exe——–系统文件检查器</li><li>sfc /scannow—windows文件保护</li><li>tsshutdn——-60秒倒计时关机命令</li><li>tourstart——xp简介（安装完成后出现的漫游xp程序）</li><li>taskmgr——–任务管理器</li><li>eventvwr——-事件查看器</li><li>eudcedit——-造字程序</li><li>explorer——-打开资源管理器</li><li>packager——-对象包装程序</li><li>perfmon.msc—-计算机性能监测程序</li><li>progman——–程序管理器</li><li>regedit.exe—-注册表</li><li>rsop.msc——-组策略结果集</li><li>regedt32——-注册表编辑器</li><li>rononce -p —-15秒关机</li><li>regsvr32 /u *.dll—-停止dll文件运行</li><li>regsvr32 /u zipfldr.dll——取消ZIP支持</li><li>cmd.exe——–CMD命令提示符</li><li>chkdsk.exe—–Chkdsk磁盘检查</li><li>certmgr.msc—-证书管理实用程序</li><li>calc———–启动计算器</li><li>charmap——–启动字符映射表</li><li>cliconfg——-SQL SERVER 客户端网络实用程序</li><li>Clipbrd——–剪贴板查看器</li><li>conf———–启动netmeeting</li><li>compmgmt.msc—计算机管理</li><li>cleanmgr——-垃圾整理</li><li>ciadv.msc——索引服务程序</li><li>osk————打开屏幕键盘</li><li>odbcad32——-ODBC数据源管理器</li><li>oobe/msoobe /a—-检查XP是否激活</li><li>lusrmgr.msc—-本机用户和组</li><li>logoff———注销命令</li><li>iexpress——-木马捆绑工具，系统自带</li><li>Nslookup——-IP地址侦测器</li><li>fsmgmt.msc—–共享文件夹管理器</li><li>utilman——–辅助工具管理器</li><li><p>系统查看=========systeminfo</p></li><li><p>轻松访问键盘快捷方式<br>　　按住右Shift 八秒钟： 启用和关闭筛选键<br>　　按左 Alt+左 Shift+PrtScn(或 PrtScn)：启用或关闭高对比度<br>　　按左 Alt+左 Shift+Num Lock ：启用或关闭鼠标键<br>　　按 Shift 五次： 启用或关闭粘滞键<br>　　按住 Num Lock 五秒钟：启用或关闭切换键<br>　　Windows 徽标键 + U ： 打开轻松访问中心</p></li><li>常规键盘快捷方式<br>　　F1 显示帮助<br>　　Ctrl+C  复制选择的项目<br>　　Ctrl+X  剪切选择的项目<br>　　Ctrl+V  粘贴选择的项目<br>　　Ctrl+Z  撤消操作<br>　　Ctrl+Y  重新执行某项操作<br>　　F2 重命名选定项目<br>　　Ctrl+向右键 将光标移动到下一个字词的起始处<br>　　Ctrl+向左键 将光标移动到上一个字词的起始处<br>　　Ctrl+向下键 将光标移动到下一个段落的起始处<br>　　Ctrl+向上键 将光标移动到上一个段落的起始处<br>　　Ctrl+Shift 加某个箭头键 选择一块文本<br>　　Shift 加任意箭头键 在窗口中或桌面上选择多个项目，或者在文档中选择文本<br>　　Ctrl 加任意箭头键+空格键 选择窗口中或桌面上的多个单个项目<br>　　Ctrl+A 选择文档或窗口中的所有项目<br>　　F3 搜索文件或文件夹<br>　　Alt+Enter 显示所选项的属性<br>　　Alt+F4 关闭活动项目或者退出活动程序<br>　　Alt+空格键 为活动窗口打开快捷方式菜单<br>　　Ctrl+F4 关闭活动文档(在允许同时打开多个文档的程序中)<br>　　Alt+Tab 在打开的项目之间切换<br>　　Ctrl+Alt+Tab 使用箭头键在打开的项目之间切换<br>　　Ctrl+鼠标滚轮 更改桌面上的图标大小<br>　　Windows 徽标键 + Tab 使用 Aero Flip 3-D 循环切换任务栏上的程序<br>　　Ctrl + Windows 徽标键 + Tab 通过 Aero Flip 3-D 使用箭头键循环切换任务栏上的程序<br>　　Alt+Esc 以项目打开的顺序循环切换项目<br>　　F6 在窗口中或桌面上循环切换屏幕元素<br>　　F4 在 Windows 资源管理器中显示地址栏列表<br>　　Shift+F10 显示选定项目的快捷菜单<br>　　Ctrl+Esc 打开「开始」菜单<br>　　Alt+加下划线的字母 显示相应的菜单<br>　　Alt+加下划线的字母 执行菜单命令(或其他有下划线的命令)<br>　　F10 激活活动程序中的菜单栏<br>　　向右键 打开右侧的下一个菜单或者打开子菜单<br>　　向左键 打开左侧的下一个菜单或者关闭子菜单<br>　　F5 刷新活动窗口<br>　　Alt+向上键 在 Windows 资源管理器中查看上一级文件夹<br>　　Esc 取消当前任务<br>　　Ctrl+Shift+Esc 打开任务管理器<br>　　插入 CD 时按住 Shift 阻止 CD 自动播放  </li><li>对话框键盘快捷方式<br>　　Ctrl+Tab  在选项卡上向前移动<br>　　Ctrl+Shift+Tab  在选项卡上向后移动<br>　　Tab  在选项上向前移动<br>　　Shift+Tab  在选项上向后移动<br>　　Alt+加下划线的字母  执行与该字母匹配的命令(或选择选项)<br>　　Enter  对于许多选定命令代替单击鼠标<br>　　空格键 如果活动选项是复选框，则选中或清除该复选框<br>　　箭头键 如果活动选项是一组选项按钮，则选择某个按钮<br>　　F1 显示帮助<br>　　F4 显示活动列表中的项目<br>　　Backspace 如果在“另存为”或“打开”对话框中选中了某个文件夹，则打开上一级文件夹  </li><li>Windows 徽标键相关的快捷键<br>　　Windows徽标键就是显示为Windows旗帜，或标有文字Win或Windows的按键，以下简称Win键。XP时代有4个经典的 Win 键组合：R/E/F/L。到了 Win7，花样更多了。<br>　　Win：打开或关闭开始菜单<br>　　Win + Pause：显示系统属性对话框<br>　　Win + D：显示桌面<br>　　Win + M：最小化所有窗口<br>　　Win + SHIFT + M：还原最小化窗口到桌面上<br>　　Win + E：打开我的电脑<br>　　Win + F：搜索文件或文件夹<br>　　Ctrl + Win + F：搜索计算机(如果您在网络上)<br>　　Win + L：锁定您的计算机或切换用户<br>　　Win + R：打开运行对话框<br>　　Win + T：切换任务栏上的程序(感觉是和alt+ESC 一样 )<br>　　Win + 数字：让位于任务栏指定位置(按下的数字作为序号)的程序，新开一个实例。(感觉这个比较新颖，貌似快速启动。) Shift + Windows logo key +number：Start a new instance of the program pinned to the taskbar in the position indicated by the number<br>　　Ctrl + Win + 数字：让位于任务栏指定位置(按下的数字作为序号)的程序，切换到上一次的活动窗口。 Ctrl+Windows logo key +number：Switch to the last active window of the program pinned to the taskbar in the position indicated by the number<br>　　ALT + Win + 数字：让位于任务栏指定位置(按下的数字作为序号)的程序，显示跳转清单。 Alt+Windows logo key +number： Open the Jump List for the program pinned to the taskbar in the position indicated by the number<br>　　Win + TAB：循环切换任务栏上的程序并使用的Aero三维效果<br>　　Ctrl + Win + TAB：使用方向键来循环循环切换任务栏上的程序，并使用的Aero三维效果<br>　　按Ctrl + Win + B：切换到在通知区域中显示信息的程序<br>　　Win + 空格：预览桌面<br>　　Win + ↑：最大化窗口<br>　　Win + ↓：最小化窗口<br>　　Win + ←：最大化到窗口左侧的屏幕上<br>　　Win + →：最大化窗口到右侧的屏幕上<br>　　Win + Home：最小化所有窗口，除了当前激活窗口<br>　　Win+ SHIFT + ↑：拉伸窗口的到屏幕的顶部和底部<br>　　Win+ SHIFT + →/←：移动一个窗口，从一个显示器到另一个<br>　　Win + P：选择一个演示文稿显示模式<br>　　Win + G：循环切换侧边栏的小工具<br>　　Win + U：打开轻松访问中心<br>　　Win + x：打开Windows移动中心  </li><li>Windows Explorer相关快捷键<br>　　Ctrl+N 打开新窗口<br>　　Ctrl+Shift+N 新建文件夹</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;window技巧-长期更新&quot;&gt;&lt;a href=&quot;#window技巧-长期更新&quot; class=&quot;headerlink&quot; title=&quot;window技巧-长期更新&quot;&gt;&lt;/a&gt;window技巧-长期更新&lt;/h4&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>通过dotnet命令上传自己的nuget包</title>
    <link href="http://blog.xxgtalk.cn/2018/05/16/tools/nuget/"/>
    <id>http://blog.xxgtalk.cn/2018/05/16/tools/nuget/</id>
    <published>2018-05-16T01:10:13.000Z</published>
    <updated>2018-09-27T10:59:38.629Z</updated>
    
    <content type="html"><![CDATA[<p>通过dotnet命令上传自己的nuget包<br><a id="more"></a></p><h5 id="通过dotnet命令上传自己的nuget包"><a href="#通过dotnet命令上传自己的nuget包" class="headerlink" title="通过dotnet命令上传自己的nuget包"></a>通过dotnet命令上传自己的nuget包</h5><ul><li>编辑项目属性 在打包选项中设置各种东西 勾选’在版本中生成Nuget包’、设置其他东西 如包Id、版本等  </li><li>通过vs发布该包 我生成的为:XXG.AutoMapper.AutoReg.1.1.0.nupkg</li><li>执行命令  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget push XXG.AutoMapper.AutoReg.1.1.0.nupkg -k oy2km5lmhmh4lnff32uadp2qudugxwce5jjamrh6xgx4vy -s https://api.nuget.org/v3/index.json</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过dotnet命令上传自己的nuget包&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>office笔记</title>
    <link href="http://blog.xxgtalk.cn/2018/05/16/tools/office/"/>
    <id>http://blog.xxgtalk.cn/2018/05/16/tools/office/</id>
    <published>2018-05-16T01:10:13.000Z</published>
    <updated>2018-09-27T10:59:38.629Z</updated>
    
    <content type="html"><![CDATA[<p>office笔记-长期更新<br><a id="more"></a></p><ol><li>=INDIRECT(“Sheet1!C”&amp;ROW())&amp;””，引用下拉框，自动行号   </li><li>字符串拼接：=$A1&amp;$B1，表示：输出A1和B1单元格的内容  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;office笔记-长期更新&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
