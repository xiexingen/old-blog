(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{362:function(e,n,t){"use strict";t.r(n);var o=t(1),s=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[t("p",[e._v("DotNetCore 备忘录\n")]),t("h5",{attrs:{id:"常用备忘录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用备忘录","aria-hidden":"true"}},[e._v("#")]),e._v(" 常用备忘录")]),t("blockquote",[t("p",[e._v("docker run -d -p 8081:80 --name wechat -v /docker/wechat/App_Data/:/app/App_Data/ --restart always registry.cn-hangzhou.aliyuncs.com/xxg/wechat:v1.1.5")])]),t("ol",[t("li",[e._v("使用dotnet watch 在项目项目文件夹中添加(自.netcore2.1.0开始已经集成进去 不需要手动添加)"),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<ItemGroup>\n <DotNetCliToolReference Include="Microsoft.DotNet.Watcher.Tools" Version="2.0.0" />\n</ItemGroup>   \n\n\x3c!-- 使用dotnet ef ... --\x3e\n<ItemGroup>\n<DotNetCliToolReference Include="Microsoft.EntityFrameworkCore.Tools.DotNet" Version="2.0.1" />\n</ItemGroup>   \n')])])]),t("li",[e._v("测试框架"),t("br"),e._v("\nMoq"),t("br"),e._v("\nfluentassertions")]),t("li",[e._v("查看nuget目录"),t("br"),e._v("\n通过dotnet dotnet nuget locals all --list")]),t("li",[e._v("JSON解析不适用首字母小写形式(默认会首字母小写)"),t("br"),e._v("\n在ConfigureServices中配置"),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("services.AddMvc()\n    .AddJsonOptions(options =>\n    {\n        if (options.SerializerSettings.ContractResolver is DefaultContractResolver resolver)\n        {\n            resolver.NamingStrategy = null;\n        }\n    });\n")])])]),t("li",[e._v("添加输出响应内容xml格式"),t("br"),e._v("\n.net core中默认只返回json格式需要xml的话需要修改Output formatter"),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("services.AddMvc()\n    .AddMvcOptions(options=> {\n        options.OutputFormatters.Add(new XmlDataContractSerializerOutputFormatter());\n    })\n")])])]),t("li",[e._v("全局异常")])]),t("ul",[t("li",[e._v("[6.1] 往MVC Filters中添加过滤器"),t("br"),e._v("\n添加一个全局异常类继承ExceptionFilterAttribute"),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class GlobalExceptionFilter : IExceptionFilter\n{\n    private readonly IHostingEnvironment _hostingEnvironment;\n    private readonly ILogger<GlobalExceptionFilter> _logger;\n\n    public GlobalExceptionFilter(\n        IHostingEnvironment hostingEnvironment,\n        IModelMetadataProvider modelMetadataProvider,\n        ILogger<GlobalExceptionFilter> logger)\n    {\n        _hostingEnvironment = hostingEnvironment;\n        _logger = logger;\n    }\n\n\n\n    public void OnException(ExceptionContext context)\n    {\n        HttpStatusCode status = HttpStatusCode.InternalServerError;\n        String message = String.Empty;\n\n        var exceptionType = context.Exception.GetType();\n        if (exceptionType == typeof(UnauthorizedAccessException))\n        {\n            message = "Unauthorized Access";\n            status = HttpStatusCode.Unauthorized;\n        }\n        else if (exceptionType == typeof(NotImplementedException))\n        {\n            message = "A server error occurred.";\n            status = HttpStatusCode.NotImplemented;\n        }\n        else if (exceptionType == typeof(BusinessException))\n        {\n            message = context.Exception.ToString();\n            status = HttpStatusCode.InternalServerError;\n        }\n        else\n        {\n            message = context.Exception.Message;\n            status = HttpStatusCode.NotFound;\n        }\n        context.ExceptionHandled = true;\n\n        HttpResponse response = context.HttpContext.Response;\n        response.StatusCode = (int)status;\n        response.ContentType = "application/json";\n\n        var ar = new AjaxResponse()\n        {\n            Success = false,\n            Message = message,\n            Data = context.Exception\n        };\n        response.WriteAsync(JsonConvert.SerializeObject(ar));\n\n\n        //context.Result = new JsonNetResult(new AjaxResponse() {\n        //    Success=false,\n        //    Message=context.Exception.Message,\n        //    Data=context.Exception\n        //});\n    }\n}\n')])])])]),t("p",[e._v("在ConfigureServices方法AddMvc中\n"),t("code",[e._v("c# services.AddMvc(config=> { config.Filters.Add(typeof(GlobalExceptionFilter)); })")])]),t("ul",[t("li",[e._v("[6.2] 在Configure方法中添加异常处理管道(注意在所有请求管道的最前面)"),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('app.UseExceptionHandler(options =>\n{\n    options.Run(async context =>\n    {\n        context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n        context.Response.ContentType = "application/json";\n        var ex = context.Features.Get<IExceptionHandlerFeature>();\n        if (ex != null)\n        {\n            var response = new AjaxResponse()\n            {\n                Success = false,\n                Message = ex.Error.Message,\n                Data = ex.Error\n            };\n            await context.Response.WriteAsync(JsonConvert.SerializeObject(response)).ConfigureAwait(false);\n        }\n    });\n});\n')])])])])])}],!1,null,null,null);s.options.__file="remark.md";n.default=s.exports}}]);