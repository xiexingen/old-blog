(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{335:function(e,n,t){e.exports=t.p+"assets/img/1-0401.3f3424bc.png"},336:function(e,n,t){e.exports=t.p+"assets/img/2-0401.4ea533c9.png"},337:function(e,n,t){e.exports=t.p+"assets/img/2-0501.80264c21.png"},361:function(e,n,t){"use strict";t.r(n);var i=[function(){var e=this,n=e.$createElement,i=e._self._c||n;return i("div",{staticClass:"content"},[i("p",[e._v("IdentityServer4-ClientCredentials模式\n")]),i("h5",{attrs:{id:"一、identityserver端-也叫服务端"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一、identityserver端-也叫服务端","aria-hidden":"true"}},[e._v("#")]),e._v(" 一、IdentityServer端 也叫服务端")]),i("ol",[i("li",[e._v("新建.netcore web项目 设置启动端口为60000 并通过Nuget引用IdentityServer4")]),i("li",[e._v("添加ApiResource和Client(此处方便测试固定了一些数据)"),i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v('using IdentityServer4.Models;\nusing System.Collections.Generic;\n\nnamespace Api\n{\n    public class Config\n    {\n        public static IEnumerable<ApiResource> GetResources()\n        {\n            return new List<ApiResource>()\n            {\n                new ApiResource("api","My Api")\n            };\n        }\n\n        public static IEnumerable<Client> GetClients()\n        {\n            return new List<Client>()\n            {\n                new Client(){\n                    ClientId="client",\n                    AllowedGrantTypes=GrantTypes.ClientCredentials,\n                    ClientSecrets={\n                        new Secret("secret".Sha256())\n                    },\n                    AllowedScopes={"api"}\n                }\n            };\n        }\n    }\n}\n')])])]),i("li",[e._v("使用IdentityServe4"),i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("public void ConfigureServices(IServiceCollection services)\n{\n    services.AddIdentityServer()\n        .AddDeveloperSigningCredential()\n        .AddInMemoryApiResources(Config.GetResources())\n        .AddInMemoryClients(Config.GetClients());\n}\n\npublic void Configure(IApplicationBuilder app,IHostingEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    app.UseIdentityServer();\n}\n")])])]),i("li",[e._v("启动项目 http://localhost:60000/.well-known/openid-configuration 可以看到相关json数据\n"),i("img",{attrs:{src:t(335),alt:"json"}})])]),i("h4",{attrs:{id:"二、api端"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#二、api端","aria-hidden":"true"}},[e._v("#")]),e._v(" 二、Api端")]),i("ol",[i("li",[e._v("新建.netcore web项目 设置启动端口为60001\n通过Nuget引用IdentityServer4.AccessTokenValidation 此处只需要验证所以不需要引用IdentityServer4")]),i("li",[e._v("配置StartUp"),i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v('using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Api\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddAuthentication("Bearer")\n                .AddIdentityServerAuthentication(options =>\n                {\n                    options.Authority = "http://localhost:60001";//设置认证服务器地址\n                    options.RequireHttpsMetadata = false;//不需要https\n                    options.ApiName = "api";//api resource的名字 对应定义的ApiResource中的name\n                });\n            services.AddMvc();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            app.UseAuthentication();\n            app.UseMvc();\n        }\n    }\n}\n')])])]),i("li",[e._v("在controller上贴上属性[Authorize] 表示只允许登录用户访问")]),i("li",[e._v("通过postman获取token(注意请求body中的参数)\n"),i("img",{attrs:{src:t(336),alt:"json"}})]),i("li",[e._v("请求需要登录的api 此处为api/values\n"),i("img",{attrs:{src:t(337),alt:"json"}})])]),i("h4",{attrs:{id:"三、client-客户端也叫thirpart【选修】"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#三、client-客户端也叫thirpart【选修】","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、client 客户端也叫ThirPart【选修】")]),i("p",[e._v("定义一个控制台程序 访问api获取数据")]),i("ol",[i("li",[e._v("创建.net core控制台程序 通过Nuget引用包IdentityModel"),i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v('using IdentityModel.Client;\nusing System;\nusing System.Net.Http;\n\nnamespace Client\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var diso = DiscoveryClient.GetAsync("http://localhost:60000").Result;\n            if (diso.IsError)\n            {\n                Console.WriteLine(diso.Error);\n            }\n            var tokenClient = new TokenClient(diso.TokenEndpoint, "client", "secret");\n            var tokenResponse = tokenClient.RequestClientCredentialsAsync("api").Result;\n            if (tokenResponse.IsError)\n            {\n                Console.WriteLine(tokenResponse.Error);\n            }\n            else {\n                Console.WriteLine(tokenResponse.Json);\n            }\n\n            var httpClient= new HttpClient();\n            httpClient.SetBearerToken(tokenResponse.AccessToken);\n            var response = httpClient.GetAsync("http://localhost:60001/api/values").Result;\n            if (response.IsSuccessStatusCode)\n            {\n                Console.WriteLine(response.Content.ReadAsStringAsync().Result);\n            }\n\n\n\n            Console.ReadKey();\n        }\n    }\n}\n\n')])])])])])}],s=t(1),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},i,!1,null,null,null);r.options.__file="01client-credentials.md";n.default=r.exports}}]);