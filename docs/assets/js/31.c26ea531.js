(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{353:function(t,a,n){"use strict";n.r(a);var r=n(1),e=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[n("p",[t._v("常用git命令\n")]),n("ol",[n("li",[t._v("创建一个版本库"),n("br"),t._v("\nmkdir repository    //创建一个文件夹"),n("br"),t._v("\ngit init [name]       //把目录编程git可以管理的仓库,[name]可选")]),n("li",[t._v("提交文件到版本库"),n("br"),t._v("\ngit add test.txt    //添加文件到版本库,此时还没有提交到git"),n("br"),t._v('\ngit commit -m "提交注释"    //告诉Git，把文件提交到仓库')]),n("li",[t._v("远程"),n("br"),t._v("\n查看当前git的状态:        git status"),n("br"),t._v("\n查看修改变的内容:        git diff"),n("br"),t._v("\n查看历史记录:                git log"),n("br"),t._v("\n查看修改的headid：       git reflog"),n("br"),t._v("\n查看分支：    git branch [-a|-r]    //-a 所有分支，-r:远程分支"),n("br"),t._v("\n查看远程库信息   :            git remote"),n("br"),t._v("\n查看远程库详细信息:        git remote -v"),n("br"),t._v("\n查看远程仓库：$ git remote -v"),n("br"),t._v("\n添加远程仓库：$ git remote add [name] [url]"),n("br"),t._v("\n克隆远程仓库：git checkout [branchName] origin/[branchName] //如果远程分支有branchName而本地没"),n("br"),t._v("\ngit checkout -b [branchName] origin/[branchName] //如果远程分支有本地无，克隆并切换到"),n("br"),t._v("\n删除本地仓库: git branch -d [branch-name]"),n("br"),t._v("\n强制删除本地分支  git branch -D [branch-name]"),n("br"),t._v("\n删除远程仓库：$ git push origin :[branch-name] //删除远程分支"),n("br"),t._v("\ngit remote rm [branch-name]"),n("br"),t._v("\ngit push origin --delete [branchName]"),n("br"),t._v("\n修改远程仓库：$ git remote set-url --push [name] [newUrl]"),n("br"),t._v("\n拉取远程仓库：$ git pull origin [remoteName]:[localBranchName]"),n("br"),t._v("\ngit fetch origin [remoteName]:[localBranchName]    //获取到当前分支"),n("br"),t._v("\n推送远程仓库：$ git push origin [remoteName]:[localBranchName]        //如果有冲突，需要先pull或者fetch远程的"),n("br"),t._v("\ngit push origin [remoteName]:[localBranchName] -f    //强推，使用本地覆盖服务器的")]),n("li",[t._v("与远程git关联"),n("br"),t._v("\na、在git上创建一个Repository"),n("br"),t._v("\nb、在本地执行命令：git remote add origin git@github.com:xiexingen/learngit.git    //将本地仓库与远程关联"),n("br"),t._v("\nc、重新关联：git remote set-url origin git://git.coding.net/xxxx/yyyy.git")]),n("li",[t._v("从远程下载到本地"),n("br"),t._v("\ngit clone [地址] [文件夹名称]    //将远程项目复制到本地之地文件加下")]),n("li",[t._v("分支"),n("br"),t._v("\n创建分支：git branch [branch Name]"),n("br"),t._v("\n切换分支：git checkout [branch Name]"),n("br"),t._v("\n创建+切换分支：git checkout -b [branch Name]"),n("br"),t._v("\n合并分支到当前分支：git merge [branch Name]"),n("br"),t._v("\n重命名分支：    git branch -m [new_branchName] [old_branchName]"),n("br"),t._v("\n查看所有分支：git branch -a"),n("br"),t._v("\n从指定分支创建并切换到分支:git checkout -b [local-branchName] [origin/branchName]"),n("br"),t._v("\n删除分支:    git branch [-d|-D] [local-branch] //-d 只能删除已经参与合并的分支,-D:可以删除为合并的分支，然后在git push origin :master 可以删除远程分支"),n("br"),t._v("\ngit merge命令用于合并指定分支到当前分支,注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交"),n("br"),t._v("\ngit merge dev :分两种情况一种是直接指向，另一种是生成另外一个将两个合并"),n("br"),t._v("\ngit merge --no-ff -m'comment' [branch Name]    //合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并"),n("br"),t._v("\ngit merge --abort //取消合并")]),n("li",[t._v("Bug分支"),n("br"),t._v("\ngit stash        //相当于tfs中的搁置"),n("br"),t._v("\ngit stash apply    //取消搁置到本地"),n("br"),t._v("\ngit stash drp     //删除搁置集"),n("br"),t._v("\ngit stash pop        //取消搁置到本地并删除搁置集"),n("br"),t._v("\ngit stash list    //查看搁置集"),n("br"),t._v("\ngit stash apply stash@{0}    //恢复指定的搁置集")]),n("li",[t._v("多人协作"),n("br"),t._v("\nA、git push -u origin [local-branch][:remote-branch]    //吧本地库推送到远程库上，-u，不但回吧本地的分支推送到远程新的master分支，还会把本地分支和远程分支关联起来，在以后的推送或者拉去时就可以简化命名\n后面如果有修改的话，只需要执行：git push origin [local-branch]    //吧本地分支的最新修改推送到服务器\nB、从本地推送分支，使用git push origin [local_branch]:[remote-branch]，如果推送失败，先用git pull抓取远程的新提交；\n在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\nc、建立本地分支和远程分支的关联，使用git branch --set-upstream [local-branch] [origin/remote-branch]\n从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name")]),n("li",[t._v("取消、回滚"),n("br"),t._v("\ngit -reflog 查看历史版本"),n("br"),t._v("\ngit reset --hard HEAD^    //回到上一次改动 (针对历史提交)"),n("br"),t._v("\ngit reset -hard 3628164    //3628164 headid 恢复到指定的记录(针对历史提交)"),n("br"),t._v("\ngit reset test.js //使用当前历史提交还原工作区"),n("br"),t._v("\ngit checkout -- test.js    //使用暂存区覆盖改动")]),n("li",[t._v("clean"),n("br"),t._v("\ngit clean -n //将当前非暂存区的文件移除"),n("br"),t._v("\ngit clean -f //强制移除")]),n("li",[t._v("版本(tag)操作相关命令"),n("br"),t._v("\n查看版本：$ git tag"),n("br"),t._v("\n创建版本：$ git tag [name]"),n("br"),t._v("\n删除版本：$ git tag -d [name]"),n("br"),t._v("\n查看远程版本：$ git tag -r"),n("br"),t._v("\n创建远程版本(本地版本push到远程)：$ git push origin [name]"),n("br"),t._v("\n删除远程版本：$ git push origin :refs/tags/[name]"),n("br"),t._v("\n合并远程仓库的tag到本地：$ git pull origin --tags"),n("br"),t._v("\n上传本地tag到远程仓库：$ git push origin --tags"),n("br"),t._v("\n创建带注释的tag：$ git tag -a [name] -m 'yourMessage'")]),n("li",[t._v("忽略一些文件、文件夹不提交"),n("br"),t._v("\n在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如"),n("br"),t._v("\ntarget"),n("br"),t._v("\nbin"),n("br"),t._v("\n*.db")]),n("li",[t._v("生成密钥")])]),n("ul",[n("li",[t._v("查看是否已经有了ssh密钥：cd ~/.ssh\n"),n("blockquote",[n("p",[t._v("如果提示：No such file or directory 说明你是第一次使用git"),n("br"),t._v("\n如果不是第一次使用，请执行下面的操作,清理原有ssh密钥。"),n("br"),t._v("\n$ mkdir key_backup $ cp id_rsa* key_backup $ rm id_rsa*"),n("br"),t._v("\n生成新的密钥："),n("br"),t._v("\n$ ssh-keygen -t rsa -C “1002275364@qq.com”")])])])]),n("ol",{attrs:{start:"14"}},[n("li",[t._v("添加忽略文件"),n("br"),t._v("\ngit rm -f --cached [path] 移除单个文件，path表示全路径"),n("br"),t._v("\ngit rm -f --cached [path] -r 移除目录，path表示目录")]),n("li",[t._v("从暂存区移除文件"),n("br"),t._v("\ngit rm --cached [file] //将file从暂存区移除")]),n("li",[t._v("tag\ngit tag -a v1.0 -m 'version 1.0'"),n("br"),t._v("\ngit tag 列出已有标签"),n("br"),t._v("\ngit tag -l 'v1.0' //列出指定标签"),n("br"),t._v("\ngit checkout -b [branchName] [tagname] //在特定的标签上创建一个新分支"),n("br"),t._v("\ngit tag v0.9 [626262] //给上次提价的commit id为626262打上标签"),n("br"),t._v("\ngit push origin [v1.0] //将标签v1.0push到远程"),n("br"),t._v("\ngit push origin --tags //将本地的所有tag push到远程"),n("br"),t._v("\ngit push origin :refs/tags/[v1.0] //删除v1.0")]),n("li",[t._v(".gitignore文件无效的解决方法"),n("br"),t._v("\ngit rm -r --cached [指定文件]"),n("br"),t._v("\n提交")])]),n("h5",{attrs:{id:"配置git使用bcompare来比对文件-用户目录-gitconfig里面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置git使用bcompare来比对文件-用户目录-gitconfig里面","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置git使用BCompare来比对文件(用户目录.gitconfig里面)")]),n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("user"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nname "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" xiexingen\nemail "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" 1002275364@qq.com\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("diff"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    tool "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" bc4\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("difftool"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    prompt "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("difftool "),n("span",{attrs:{class:"token string"}},[t._v('"bc4"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    cmd "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" \\"),n("span",{attrs:{class:"token string"}},[t._v('"D:/Program Files/Beyond Compare 4/BComp.exe\\" \\"'),n("span",{attrs:{class:"token variable"}},[t._v("$LOCAL")]),t._v('\\" \\"'),n("span",{attrs:{class:"token variable"}},[t._v("$REMOTE")]),t._v('\\"\n[merge]\n    tool = bc4\n[mergetool]\n    prompt = false\n    keepBackup = false\n[mergetool "')]),t._v('bc4"'),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    cmd "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(' \\"D:/Program Files/Beyond Compare 4/BComp.exe\\" \\"'),n("span",{attrs:{class:"token variable"}},[t._v("$LOCAL")]),t._v('\\" \\"'),n("span",{attrs:{class:"token variable"}},[t._v("$REMOTE")]),t._v('\\" \\"'),n("span",{attrs:{class:"token variable"}},[t._v("$BASE")]),t._v('\\" \\"'),n("span",{attrs:{class:"token variable"}},[t._v("$MERGED")]),t._v('\\"\n    trustExitCode '),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("alias"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    dt "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" difftool\n    mt "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" mergetool\n")])]),n("p",[t._v("使用："),n("br"),t._v("\ngit difftool '文件1' '文件2'"),n("br"),t._v("\ngit mergetool")]),n("ul",[n("li",[t._v("全局配置用户名")])]),n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name xiexingen\n"),n("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email 1002275364@qq.com\n"),n("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.co checkout  //用co代替checkout\n")])]),n("p",[t._v("日志")]),n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" log –graph –pretty"),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("format:’%Cred%h%Creset -%C"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("yellow"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("%d%Creset %s %Cgreen"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("%cr"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" %C"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bold blue"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("%an"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("%Creset’ –abbrev-commit –date"),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("relative **\n")])]),n("ul",[n("li",[n("p",[t._v("https带用户名密码形式迁出代码\ngit clone http://用户名:密码@gitlab.xxgtalk.cn/WT/StudyNetCore.git")])]),n("li",[n("p",[t._v("github上游合并问题")])])]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("首先指定上游地址：git remote add upstream "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("original repo url"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n拉取上游代码"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("git fetch upstream\n合并代码"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("git rebase upstream"),n("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("master\n")])])])}],!1,null,null,null);e.options.__file="git.md";a.default=e.exports}}]);