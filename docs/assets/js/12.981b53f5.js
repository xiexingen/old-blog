(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{371:function(e,n,t){"use strict";t.r(n);var o=t(1),s=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[t("p",[e._v("ASP.NET Core + Docker + Jenkins + gogs + CentOS 从零开始搭建持续集成\n")]),t("blockquote",[t("p",[e._v("参考地址：https://www.cnblogs.com/stulzq/p/8629165.html"),t("br"),e._v("\nhttps://www.jianshu.com/p/64e9708c23e7"),t("br"),e._v("\n前置条件 安装了docker、配置了加速镜像(参考01)")])]),t("ol",[t("li",[e._v("使用docker安装免费https证书")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' sudo docker run -it --rm --name certbot \\\n    -v "/etc/letsencrypt:/etc/letsencrypt" \\\n    -v "/var/lib/letsencrypt:/var/lib/letsencrypt" \\\n    certbot/certbot certonly\n')])]),t("p",[e._v("按照提示进行操作"),t("br"),e._v("\n2. docker安装Gogs (一个gitserver，类似于gitlab)"),t("br"),e._v("\n创建文件/docker/gogs  然后运行如下命令"),t("br"),e._v("\ndocker run -d --name=gogs -p 23:22 -p 8090:3000 --mount type=bind,src=/docker/gogs,dst=/data --restart always gogs/gogs")]),t("blockquote",[t("p",[e._v("参考地址 https://github.com/gogits/gogs/tree/master/docker")])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("docker 安装jenkins"),t("br"),e._v("\n自定义镜像")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FROM jenkins\nUSER root\n#清除了基础镜像设置的源，切换成腾讯云的jessie源\n#使用非腾讯云环境的需要将 tencentyun 改为 aliyun\nRUN echo \'\' > /etc/apt/sources.list.d/jessie-backports.list \\\n  && echo "deb http://mirrors.tencentyun.com/debian jessie main contrib non-free" > /etc/apt/sources.list \\\n  && echo "deb http://mirrors.tencentyun.com/debian jessie-updates main contrib non-free" >> /etc/apt/sources.list \\\n  && echo "deb http://mirrors.tencentyun.com/debian-security jessie/updates main contrib non-free" >> /etc/apt/sources.list\n#更新源并安装缺少的包\nRUN apt-get update && apt-get install -y libltdl7 && apt-get update\n\nARG dockerGid=999\n\nRUN echo "docker:x:${dockerGid}:jenkins" >> /etc/group \n\n# 安装 docker-compose 因为等下构建环境的需要\nRUN curl -L https://github.com/docker/compose/releases/download/1.20.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n\nRUN chmod +x /usr/local/bin/docker-compose\n')])]),t("p",[e._v("docker build -t auto-jenkins ."),t("br"),e._v("\n创建目录/docker/jenkins/docker.sock、/docker/jenkins/jenkins_home")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker run --name jenkins -p 8091:8080 -p 50000:50000 \\\n    --mount type=bind,src=/docker/jenkins/docker.sock,dst=/var/run/docker.sock \\\n    --mount type=bind,src=$(which docker),dst=/bin/docker \\\n    --mount type=bind,src=/docker/jenkins/jenkins_home,dst=/var/jenkins_home \\\n    --restart always \\\n    -d auto-jenkins\n")])]),t("p",[e._v("docker run --name jenkins -p 8091:8080 -p 50000:50000 --mount type=bind,src=/docker/jenkins/docker.sock,dst=/var/run/docker.sock  --mount type=bind,src=$(which docker),dst=/bin/docke  --mount type=bind,src=/docker/jenkins/jenkins_home,dst=/var/jenkins_home --restart always -d auto-jenkins")]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("ASP.NET Core 持续集成")]),t("li",[e._v("Jenkins配置Gogs webhook插件")]),t("li",[e._v("Jenkins持续集成演示")])])])}],!1,null,null,null);s.options.__file="10docker-jenkins-gogs-cicd.md";n.default=s.exports}}]);