<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序有Bug技术栈</title>
  
  <subtitle>代码让世界更美好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xxgtalk.cn/"/>
  <updated>2020-11-27T08:42:25.473Z</updated>
  <id>http://blog.xxgtalk.cn/</id>
  
  <author>
    <name>谢新根</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端私有仓库verdaccio</title>
    <link href="http://blog.xxgtalk.cn/2020/04/27/front/other/verdaccio/"/>
    <id>http://blog.xxgtalk.cn/2020/04/27/front/other/verdaccio/</id>
    <published>2020-04-27T13:10:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-方式安装"><a href="#docker-方式安装" class="headerlink" title="docker 方式安装"></a>docker 方式安装</h2><ol><li>拉取 Verdaccio 的 docker 镜像</li></ol><pre class=" language-bash"><code class="language-bash">docker pull verdaccio/verdaccio</code></pre><ol start="2"><li>在根目录下创建 docker 文件</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p ~/docker/tmp <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> ~/docker/tmp</code></pre><ol start="3"><li>从 git 拉取示例到 tmp 到目录下</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/verdaccio/docker-examples <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> ~/docker/tmp/docker-examples</code></pre><ol start="4"><li>移动配置文件</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">mv</span> docker-local-storage-volume ~/docker/verdaccio</code></pre><ol start="5"><li>设置文件夹权限</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> -R 100:101 ~/docker/verdaccio</code></pre><ol start="6"><li>使用 docker-compose 启动镜像</li></ol><ul><li>重定向到目录</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/docker/verdaccio</code></pre><ul><li>修改 docker-compose.yml,更换端口 8000 内容如下</li></ul><pre class=" language-bash"><code class="language-bash">version: <span class="token string">'2.1'</span>services:  verdaccio:    image: verdaccio/verdaccio:4    container_name: verdaccio    ports:      - <span class="token string">"8000:4873"</span>    volumes:        - <span class="token string">"./storage:/verdaccio/storage"</span>        - <span class="token string">"./conf:/verdaccio/conf"</span>volumes:  verdaccio:    driver: local</code></pre><p>启动</p><pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre><blockquote><p>生成密码</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> -n <span class="token string">'wetrial:Abcd1234#'</span> <span class="token operator">|</span> openssl base64</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This is the config file used for the docker images.</span><span class="token comment" spellcheck="true"># It allows all users to do anything, so don't use it on production systems.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Do not configure host and port under `listen` in this file</span><span class="token comment" spellcheck="true"># as it will be ignored when using docker.</span><span class="token comment" spellcheck="true"># see https://github.com/verdaccio/verdaccio/blob/master/wiki/docker.md#docker-and-custom-port-configuration</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Look here for more config file examples:</span><span class="token comment" spellcheck="true"># https://github.com/verdaccio/verdaccio/tree/master/conf</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># path to a directory with all packages</span>storage: /verdaccio/storageauth:  htpasswd:    file: /verdaccio/conf/htpasswd    <span class="token comment" spellcheck="true"># Maximum amount of users allowed to register, defaults to "+inf".</span>    <span class="token comment" spellcheck="true"># You can set this to -1 to disable registration.</span>    <span class="token comment" spellcheck="true">#max_users: 1000</span>security:  api:    jwt:      sign:        expiresIn: 60d        notBefore: 1  web:    sign:      expiresIn: 7d<span class="token comment" spellcheck="true"># a list of other known repositories we can talk to</span>uplinks:  npmjs:    url: https://registry.npmjs.org/  taobao:    url: https://registry.npm.taobao.orgweb:  enable: <span class="token boolean">true</span>  title: Wetrial  scope:packages:  <span class="token string">'@wt/*'</span><span class="token keyword">:</span>      access: <span class="token variable">$all</span>      publish: <span class="token variable">$all</span>  <span class="token string">'@*/*'</span><span class="token keyword">:</span>    <span class="token comment" spellcheck="true"># scoped packages</span>    access: <span class="token variable">$all</span>    publish: <span class="token variable">$all</span>    proxy: npmjs  <span class="token string">'**'</span><span class="token keyword">:</span>    <span class="token comment" spellcheck="true"># allow all users (including non-authenticated users) to read and</span>    <span class="token comment" spellcheck="true"># publish all packages</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># you can specify usernames/groupnames (depending on your auth plugin)</span>    <span class="token comment" spellcheck="true"># and three keywords: "$all", "$anonymous", "$authenticated"</span>    access: <span class="token variable">$all</span>    <span class="token comment" spellcheck="true"># allow all known users to publish packages</span>    <span class="token comment" spellcheck="true"># (anyone can register by default, remember?)</span>    publish: <span class="token variable">$all</span>    <span class="token comment" spellcheck="true"># if package is not available locally, proxy requests to 'npmjs' registry</span>    proxy: npmjs<span class="token comment" spellcheck="true"># To use `npm audit` uncomment the following section</span>middlewares:  audit:    enabled: <span class="token boolean">true</span><span class="token comment" spellcheck="true"># log settings</span>logs:  - <span class="token punctuation">{</span>type: stdout, format: pretty, level: trace<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#- {type: file, path: verdaccio.log, level: info}</span></code></pre><p><a href="https://blog.csdn.net/github_33420275/article/details/83035973" target="_blank" rel="noopener">https://blog.csdn.net/github_33420275/article/details/83035973</a></p><p>cp -r verdaccio-bak verdaccio</p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>chown -R 100:101 ~/docker/verdaccio</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;docker-方式安装&quot;&gt;&lt;a href=&quot;#docker-方式安装&quot; class=&quot;headerlink&quot; title=&quot;docker 方式安装&quot;&gt;&lt;/a&gt;docker 方式安装&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;拉取 Verdaccio 的 docker 镜像&lt;/li
      
    
    </summary>
    
      <category term="前端-其他" scheme="http://blog.xxgtalk.cn/categories/%E5%89%8D%E7%AB%AF-%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="前端-其他" scheme="http://blog.xxgtalk.cn/tags/%E5%89%8D%E7%AB%AF-%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>lerna包管理</title>
    <link href="http://blog.xxgtalk.cn/2020/03/26/front/other/lerna/"/>
    <id>http://blog.xxgtalk.cn/2020/03/26/front/other/lerna/</id>
    <published>2020-03-26T13:10:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>Lerna 是一个工具，它优化了使用 git 和 npm 管理多包存储库的工作流。</p><h1 id="工作的两种模式"><a href="#工作的两种模式" class="headerlink" title="工作的两种模式"></a>工作的两种模式</h1><ol><li>Fixed(默认)</li></ol><p>所有包同一个版本, 在 <code>publish</code> 的时候, 会在 lerna.json 文件里面 <code>&quot;version&quot;: &quot;0.1.5&quot;</code> 根据这个号，进行增加.</p><ol start="2"><li>Independent<br>每个包不同的版本号</li></ol><h1 id="修改工作模式"><a href="#修改工作模式" class="headerlink" title="修改工作模式"></a>修改工作模式</h1><p>lerna 默认使用 npm，而且每个子 package 都有自己的 node_modules，设置后可以将字 node_modules 全移到顶层 node_modules 下。</p><ol><li>修改顶层的 package.json,增加</li></ol><pre class=" language-json"><code class="language-json"> <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"workspaces"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"packages/*"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><ol start="2"><li>修改 lerna.json，增加</li></ol><pre class=" language-json"><code class="language-json"><span class="token property">"npmClient"</span><span class="token operator">:</span> <span class="token string">"yarn"</span><span class="token punctuation">,</span><span class="token property">"useWorkspaces"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></code></pre><p>各个包不同的版本号，通过 <code>lerna init --independent</code> 初始化项目, lerna.json 文件里面”version”: “independent”</p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><ul><li><code>lerna init [--independent]</code><br>  初始化仓库<ul><li><code>--independent</code> 每个子包不同版本号  </li><li>lerna init ➜ 将会在当前目录下初始化一个lerna项目</li></ul></li><li><p><code>lerna create &lt;name&gt; [loc]</code><br>  增加本地或者远程 package 做为当前项目 packages 里面的依赖  </p><ul><li><code>--dev</code> 安装到devDependencies下(默认为dependencies)  </li><li><code>--exact</code> 使用精确版本号，如：’^1.1.0’ ➜ ‘1.1.0’  </li></ul></li><li><p><code>lerna add [@version] [--dev] [--exact] [--scope]</code> 安装包(外部、本地)到指定项目    </p><ul><li><code>--scope</code>:只安装到指定的项目<br><code>lerna add @wetrial/blogs --scope=@wetrial/host</code> ➜ 将在@wetrial/host项目中安装@wetrial/blogs</li></ul></li><li><p><code>lerna bootstrap</code> 安装项目的依赖包</p></li><li><p><code>lerna list</code> 列出项目中的所有包</p></li><li><p><code>lerna run &lt;script&gt; -- [.args]</code> 执行指定脚本</p><ul><li><code>lerna run --scope @wetrial/host start</code> 在@wetrial/host项目下执行start</li></ul></li><li><p><code>lerna exec</code> 在每个包运行指定脚本</p><ul><li><code>lerna exec -- rm -rf ./node_modules</code>  会移除每个子包下的node_modules </li></ul></li><li><p><code>lerna link</code> 建立项目包软链，类似npm link</p></li><li><p><code>lerna clean</code>  删除所有包的node_modules目录</p></li><li><p><code>lerna exec -- yarn remove my-package</code> 卸载指定的包</p></li><li><p><code>lerna changed</code> 列出下次发版lerna publish 要更新的包</p></li><li><p><code>lerna publish</code> 会打tag，上传git,上传npm。 如果你的包名是带scope的例如：”name”: “@wetrial/blogs”, 那需要在packages.json添加</p><pre class=" language-json"><code class="language-json">  <span class="token property">"publishConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"access"</span><span class="token operator">:</span> <span class="token string">"public"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li></ul><blockquote><p>更多资料 <a href="https://github.com/lerna/lerna" target="_blank" rel="noopener">https://github.com/lerna/lerna</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lerna 是一个工具，它优化了使用 git 和 npm 管理多包存储库的工作流。&lt;/p&gt;
&lt;h1 id=&quot;工作的两种模式&quot;&gt;&lt;a href=&quot;#工作的两种模式&quot; class=&quot;headerlink&quot; title=&quot;工作的两种模式&quot;&gt;&lt;/a&gt;工作的两种模式&lt;/h1&gt;&lt;ol&gt;
      
    
    </summary>
    
      <category term="+ 前端-其他" scheme="http://blog.xxgtalk.cn/categories/%E5%89%8D%E7%AB%AF-%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="+ 前端-其他" scheme="http://blog.xxgtalk.cn/tags/%E5%89%8D%E7%AB%AF-%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Nginx开篇</title>
    <link href="http://blog.xxgtalk.cn/2019/11/30/nginx/01-introduct/"/>
    <id>http://blog.xxgtalk.cn/2019/11/30/nginx/01-introduct/</id>
    <published>2019-11-30T01:10:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>Docker基础开篇<br><a id="more"></a></p><h2 id="centos-7安装nginx"><a href="#centos-7安装nginx" class="headerlink" title="centos 7安装nginx"></a>centos 7安装nginx</h2><ul><li><p>更新yum</p><pre class=" language-bash"><code class="language-bash">yum -y update  </code></pre></li><li><p>通过yum安装</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> epel-releaseyum <span class="token function">install</span> nginx </code></pre></li><li><p>配置nginx自动启动</p><pre class=" language-bash"><code class="language-bash">systemctl start nginxsystemctl <span class="token function">enable</span> nginxsystemctl status nginx</code></pre></li><li><p>配置防火墙<br><code>bashfirewall-cmd --zone=public --permanent --add-service=httpfirewall-cmd --zone=public --permanent --add-service=httpsfirewall-cmd --reload</code> bash</p></li></ul><h2 id="nginx-配置文件"><a href="#nginx-配置文件" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h2><ul><li><p>worker_processer<br>配置支持的并发数量</p></li><li><p>events</p><pre class=" language-bash"><code class="language-bash">配置网络连接数量events:<span class="token punctuation">{</span>  worker_connections:1024 <span class="token punctuation">}</span></code></pre></li><li><p>http</p></li></ul><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 基础案例</span>server <span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span>    server_name test.xxgtalk.cn<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># listen [::]:80 ipv6only=on;</span>    <span class="token comment" spellcheck="true"># root /var/www/mywebsite2;</span>    <span class="token comment" spellcheck="true"># index index.html index.htm;</span>    location / <span class="token punctuation">{</span>        proxy_pass http://localhost:9001<span class="token punctuation">;</span>        proxy_http_version 1.1<span class="token punctuation">;</span>        proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>        proxy_set_header Connection <span class="token string">'upgrade'</span><span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>        proxy_cache_bypass <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># error_page 404 /404.html;</span>    <span class="token comment" spellcheck="true"># error_page 500 502 503 504 /50x.html;</span>    <span class="token comment" spellcheck="true"># location = /50x.html {</span>    <span class="token comment" spellcheck="true">#     root /var/www/mywebsite1;</span>    <span class="token comment" spellcheck="true"># }</span><span class="token punctuation">}</span> </code></pre><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 负载均衡案例</span>upstream myserver <span class="token punctuation">{</span> server 192.168.20.23:8080<span class="token punctuation">;</span> server 192.168.20.23:8081<span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span>    server_name test.xxgtalk.cn<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># listen [::]:80 ipv6only=on;</span>    <span class="token comment" spellcheck="true"># root /var/www/mywebsite2;</span>    <span class="token comment" spellcheck="true"># index index.html index.htm;</span>    location / <span class="token punctuation">{</span>        proxy_pass http://myserver<span class="token punctuation">;</span>        proxy_http_version 1.1<span class="token punctuation">;</span>        proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>        proxy_set_header Connection <span class="token string">'upgrade'</span><span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>        proxy_cache_bypass <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># error_page 404 /404.html;</span>    <span class="token comment" spellcheck="true"># error_page 500 502 503 504 /50x.html;</span>    <span class="token comment" spellcheck="true"># location = /50x.html {</span>    <span class="token comment" spellcheck="true">#     root /var/www/mywebsite1;</span>    <span class="token comment" spellcheck="true"># }</span><span class="token punctuation">}</span> </code></pre><h2 id="动静分离-跟基础类似"><a href="#动静分离-跟基础类似" class="headerlink" title="动静分离(跟基础类似)"></a>动静分离(跟基础类似)</h2><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p><img src="http://qiniu.xxgtalk.cn/blog/images/20191130225646.png" alt="20191130225646.png"></p><ol><li>需要在轮胎服务器安装nginx</li><li>需要再两台服务器上安装keepalived<br><code>`</code> bash<br>yum install keepalived -y</li></ol><h2 id="修改每台机器上的keepalived配置文件"><a href="#修改每台机器上的keepalived配置文件" class="headerlink" title="修改每台机器上的keepalived配置文件"></a>修改每台机器上的keepalived配置文件</h2><h2 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h2><p>rpm -q -q keepalived</p><h2 id="目录位置"><a href="#目录位置" class="headerlink" title="目录位置"></a>目录位置</h2><p>/etc/keepalived<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker基础开篇&lt;br&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://blog.xxgtalk.cn/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://blog.xxgtalk.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>.net core 3.0 Signalr - 09 待改进&amp;交流</title>
    <link href="http://blog.xxgtalk.cn/2019/10/05/dotnetcore/signalr/09-todo/"/>
    <id>http://blog.xxgtalk.cn/2019/10/05/dotnetcore/signalr/09-todo/</id>
    <published>2019-10-05T12:34:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>.net core 3.0 Signalr - 09 待改进&amp;交流<br><a id="more"></a></p><h2 id="个人心得"><a href="#个人心得" class="headerlink" title="个人心得"></a>个人心得</h2><p>写博客真的比写代码累，膜拜那些坚持写博客的大佬！<br>有时候零散的片段比较多，没写之前感觉有千千万万要写的东西，实际写的时候发现， 好像这个没啥说的，然后就帖了个图，或者一笔带过了</p><h2 id="待改进-amp-交流"><a href="#待改进-amp-交流" class="headerlink" title="待改进&amp;交流"></a>待改进&amp;交流</h2><ul><li>使用消息队列替换目前的api调用形式，同时消息队列支持定义推送优先级</li><li>使用polly来重试失败的调用</li><li>将连接中传递的userId改成token</li><li>多个客户端同时关闭，IsLast不准确</li><li>服务器端需要有定时任务去清除redis中的无效数据(看造化)</li><li>连接的监控</li><li>连接的并发数量测试</li></ul><p>更多内容请通过快速导航查看下一篇</p><h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:left">内容 </th></tr></thead><tbody><tr><td style="text-align:left">索引</td><td style="text-align:left"><a href="/2019/09/20/dotnetcore/signalr/00-introduct/">.net core 3.0 Signalr - 实现一个业务推送系统</a> </td></tr><tr><td style="text-align:left">上一篇</td><td style="text-align:left"><a href="/2019/10/05/dotnetcore/signalr/08-clientdemo/">.net core 3.0 Signalr - 08 业务实现-客户端demo</a> </td></tr><tr><td style="text-align:left">源码地址</td><td style="text-align:left"><a href="https://github.com/xiexingen/CTS.Signalr" target="_blank" rel="noopener">源码</a> </td></tr><tr><td style="text-align:left">官方文档</td><td style="text-align:left"><a href="https://docs.microsoft.com/zh-CN/aspnet/core/?view=aspnetcore-3.0" target="_blank" rel="noopener">官方文档</a> </td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.net core 3.0 Signalr - 09 待改进&amp;amp;交流&lt;br&gt;
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Signalr" scheme="http://blog.xxgtalk.cn/tags/Signalr/"/>
    
  </entry>
  
  <entry>
    <title>.net core 3.0 Signalr - 08 业务实现-客户端demo</title>
    <link href="http://blog.xxgtalk.cn/2019/10/05/dotnetcore/signalr/08-clientdemo/"/>
    <id>http://blog.xxgtalk.cn/2019/10/05/dotnetcore/signalr/08-clientdemo/</id>
    <published>2019-10-05T12:34:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>.net core 3.0 Signalr - 08 业务实现-客户端demo<br><a id="more"></a><br>由于signalr作为一个单独的推送系统，跟业务系统是分离开的，所以此处模拟一个业务系统，新建一个.net core app项目</p><h2 id="模拟实现一个登录功能"><a href="#模拟实现一个登录功能" class="headerlink" title="模拟实现一个登录功能"></a>模拟实现一个登录功能</h2><p>我们的登录很简单，当进入系统，如果检测到用户未登录则跳转到登录页面，用户只需要输入用户名点击登录即算登录成功  </p><ul><li>配置ConfigServices方法 <a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Startup.cs#L41-L47" target="_blank" rel="noopener">查看代码</a><pre class=" language-C#"><code class="language-C#">services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, cookieOption =>{    cookieOption.LoginPath = "/Account/Login";    cookieOption.AccessDeniedPath = "/Account/Login";});</code></pre></li><li>配置Config方法，配置认证、授权的请求管道 <a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Startup.cs#L73-L74" target="_blank" rel="noopener">查看代码</a><pre class=" language-C#"><code class="language-C#">app.UseRouting();app.UseAuthentication();app.UseAuthorization();</code></pre></li><li>接收登录的post请求，写cookie，跳转 <a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Controllers/AccountController.cs#L33-L59" target="_blank" rel="noopener">查看代码</a></li></ul><h2 id="前端页面实现"><a href="#前端页面实现" class="headerlink" title="前端页面实现"></a>前端页面实现</h2><p>首先在Layout页面引入需要的js文件(vue、signalr、msgpack5、signalr-protocol-msgpack)   <a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Shared/_Layout.cshtml#L78-L81" target="_blank" rel="noopener">查看代码</a>  </p><h3 id="封装signalr连接相关js"><a href="#封装signalr连接相关js" class="headerlink" title="封装signalr连接相关js"></a>封装signalr连接相关js</h3><p>signalr客户端js的操作就是，创建连接、监听推送,封装后端js如下   <a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/wwwroot/js/initSignalr.js" target="_blank" rel="noopener">查看代码</a>  </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 初始化连接 * @param {object} option 参数 * @param {string} option.url 连接的url地址 * @param {string} option.loggingLevel 日志级别,默认为 Error * @param {number} option.delay 延迟连接 默认为3000毫秒 * @param {function} option.onStarted 启动时触发 * @param {function} option.onLine 启动时触发 * @param {function} option.offLine 启动时触发 * @returns {object} 连接的实例 */</span><span class="token keyword">function</span> <span class="token function">initSignalr</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> config <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        loggingLevel<span class="token punctuation">:</span> signalR<span class="token punctuation">.</span>LogLevel<span class="token punctuation">.</span>Error<span class="token punctuation">,</span>        delay<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">signalR<span class="token punctuation">.</span>HubConnectionBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">configureLogging</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>loggingLevel<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUrl</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>            accessTokenFactory<span class="token punctuation">:</span> option<span class="token punctuation">.</span>accessTokenFactory        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withHubProtocol</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">signalR<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>msgpack<span class="token punctuation">.</span>MessagePackHubProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withAutomaticReconnect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">onreconnecting</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'----------------------------------signalr-- onreconnecting'</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">onclose</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'--------------------------------signalr-- onclose'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'OnNotify'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>onNotify<span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'OnLine'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>onLine<span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'OffLine'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>offLine<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            option<span class="token punctuation">.</span>onStarted <span class="token operator">&amp;&amp;</span> option<span class="token punctuation">.</span><span class="token function">onStarted</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> connection<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="调用封装的js初始化连接-查看代码"><a href="#调用封装的js初始化连接-查看代码" class="headerlink" title="调用封装的js初始化连接 查看代码"></a>调用封装的js初始化连接 <a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Home/Index.cshtml#L183" target="_blank" rel="noopener">查看代码</a></h3><ul><li>然后在Home/Index.cshtml中引入上面的js  </li><li><p>在页面加载完后，调用初始化(案例中使用了vue)<br>在进入页面后会弹窗让用户输入加入的组，可以不输入也可以多个 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">initConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#collectionUserInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      keyboard<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      show<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      backdrop<span class="token punctuation">:</span> <span class="token string">'static'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#collectionUserInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'hidden.bs.modal'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> groups <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#groups"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">''</span><span class="token punctuation">;</span>      connect<span class="token operator">=</span><span class="token function">initSignalr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          delay<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          url<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>notifyUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">notify-hub?userId=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>vm<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>userName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;group=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>groups<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>          loggingLevel<span class="token punctuation">:</span> signalR<span class="token punctuation">.</span>LogLevel<span class="token punctuation">.</span>Error<span class="token punctuation">,</span>          onNotify<span class="token punctuation">:</span> dealNotify<span class="token punctuation">,</span>          onLine<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>IsFirst<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">getOnlineUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token function">getOnlineGroups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              vm<span class="token punctuation">.</span>logs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`新连接上线：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          offLine<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>IsLast<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">getOnlineUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token function">getOnlineGroups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              vm<span class="token punctuation">.</span>logs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`连接下线：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          onStarted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">getOnlineUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">getOnlineGroups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              vm<span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>userInfo<span class="token punctuation">,</span> <span class="token string">'connectionId'</span><span class="token punctuation">,</span> connect<span class="token punctuation">.</span>connectionId<span class="token punctuation">)</span><span class="token punctuation">;</span>              vm<span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>userInfo<span class="token punctuation">,</span> <span class="token string">'groups'</span><span class="token punctuation">,</span> groups<span class="token punctuation">)</span><span class="token punctuation">;</span>              vm<span class="token punctuation">.</span>logs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'连接成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>onNotify方法，如果仔细的话会看到里面的onNotify方法，所有的推送最终都会调用到该方法来进行分发。<a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Home/Index.cshtml#L200" target="_blank" rel="noopener">查看代码</a><br>offLine，当有客户端下线的时候会触发，data里面包含有用户Id、连接Id、是否该用户的最后一个连接,可根据需要使用<a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Home/Index.cshtml#L201-L207" target="_blank" rel="noopener">查看代码</a><br>onLine,当用户连接的时候会触发，data里面包含有用户Id、连接Id、是否该用户的第一个连接(用于用户上线后的逻辑处理)，可根据需要使用  <a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Home/Index.cshtml#L208-L214" target="_blank" rel="noopener">查看代码</a><br>onStarted，当成功连接后触发，可用于做一些连接后的业务逻辑处理，可根据需要使用 <a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Home/Index.cshtml#L215-L221" target="_blank" rel="noopener">查看代码</a>  </p></li></ul><h3 id="获取当前用户信息、在线列表"><a href="#获取当前用户信息、在线列表" class="headerlink" title="获取当前用户信息、在线列表"></a>获取当前用户信息、在线列表</h3><p>在用户连接成功后，获取当前在线用户、用户组、当前用户信息,并设置到vue的data中 <a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Home/Index.cshtml#L216-L217" target="_blank" rel="noopener">查看代码</a>  </p><h3 id="模拟一个任务分配"><a href="#模拟一个任务分配" class="headerlink" title="模拟一个任务分配"></a>模拟一个任务分配</h3><p>在项目中心中，点击”模拟推送待办”按钮，将会向当前用户所在组中推送一条代码消息，可以登录不同账号、开多个tab页体验<br>点击事件代码位置 <a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Home/Index.cshtml#L132-L141" target="_blank" rel="noopener">查看代码</a> </p><pre class=" language-js"><code class="language-js">assignTaskToUser<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span> <span class="token string">'/api/ServerProxy/AssignTaskToUser'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            groups<span class="token punctuation">:</span>that<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>groups        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>对应的推送解析代码 </p><blockquote><p>首先当有推送过来的时候，会首先进到onNotify方法，然后根据不同类型在分配到不同的js方法中<br><a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Home/Index.cshtml#L268-L279" target="_blank" rel="noopener">查看代码</a><br>效果图<br><img src="http://qiniu.xxgtalk.cn/blog/images/20190927212304.png" alt="20190927212304.png"></p></blockquote><h3 id="模拟发送消息"><a href="#模拟发送消息" class="headerlink" title="模拟发送消息"></a>模拟发送消息</h3><p>消息发送，可以选定组、人进行消息发送<br><a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Home/Index.cshtml#L145-L157" target="_blank" rel="noopener">发送端代码</a><br><a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Client/Views/Home/Index.cshtml#L281-L290" target="_blank" rel="noopener">解析端</a></p><h3 id="登录互斥"><a href="#登录互斥" class="headerlink" title="登录互斥"></a>登录互斥</h3><p>登录互斥是指，当一个账号在A电脑登录，然后再在B电脑登录，最后的登录会排斥掉开始的登录，即，将A上的挤下线<br>首先用谷歌浏览器登录，输入用户名：xiexingen，然后连接<br>接着使用360急速浏览器登录，输入用户名:xiexingen 这个时候会发现谷歌浏览器中的登录已经退出，如图<br><img src="http://qiniu.xxgtalk.cn/blog/images/20190927213637.png" alt="20190927213637.png"></p><blockquote><p>必要条件: 不同浏览器、同一用户,比如:同一个浏览器，不同tab就不算(能共用cookie)</p></blockquote><h3 id="文件下载-指定连接推送"><a href="#文件下载-指定连接推送" class="headerlink" title="文件下载(指定连接推送)"></a>文件下载(指定连接推送)</h3><p>文件下载的场景，用户在操作页面上选择了上千个文件，然后点击打包下载，这个时候可能需要很久时间才反应回来，那么这段时间如果让用户一直等待显然不妥，所以，当用户点击打包下载的时候，后端启用一个后台线程去打包、压缩，然后立即返回；用户可以继续操作，当服务器端打包好后推送给用户端，用户点击下载即可。<br>此处分两种情况  </p><ol><li>单连接推送<br>用户开了多个tab页，在其中一个上下载文件，如果后端推送的时候，直接给该用户推，显然不妥；正确的做法一个是只给操作的那个tab页推，这就需要，调用服务器端业务api的时候，需要把当前tab页对应的连接id发送到服务器端，服务器端处理完业务后，调用推送服务器，告诉推送服务器只推我给你的这个连接的客户端，这样就能指定连接推送。</li><li>单用户排除某个连接的其他连接推送<br>这种情况比较少见，告诉推送服务器，给这个用户，除了某个连接外的其他所有连接推送</li></ol><p>模拟操作<br>点击第一个图中的”打包下载文件” 按钮，当前页面会受到文件下载的推送<br>在点击图二中的”推送当前用户其他页面更新操作”按钮，会发现出了当前tab页外，其他tab也都收到了推送消息，如下图<br><img src="http://qiniu.xxgtalk.cn/blog/images/20190927214530.png" alt="20190927214530.png"></p><p>至此，signalr相关文章算是到此结束了，下一篇谈谈个人的一点心得以及里面存着的一些问题。</p><h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:left">内容 </th></tr></thead><tbody><tr><td style="text-align:left">索引</td><td style="text-align:left"><a href="/2019/09/20/dotnetcore/signalr/00-introduct/">.net core 3.0 Signalr - 实现一个业务推送系统</a> </td></tr><tr><td style="text-align:left">上一篇</td><td style="text-align:left"><a href="/2019/10/04/dotnetcore/signalr/07-self-manager/">.net core 3.0 Signalr - 07 业务实现-服务端 自定义管理组、用户、连接</a> </td></tr><tr><td style="text-align:left">下一篇</td><td style="text-align:left"><a href="/2019/10/05/dotnetcore/signalr/09-todo/">.net core 3.0 Signalr - 09 待改进&amp;交流</a> </td></tr><tr><td style="text-align:left">源码地址</td><td style="text-align:left"><a href="https://github.com/xiexingen/CTS.Signalr" target="_blank" rel="noopener">源码</a> </td></tr><tr><td style="text-align:left">官方文档</td><td style="text-align:left"><a href="https://docs.microsoft.com/zh-CN/aspnet/core/?view=aspnetcore-3.0" target="_blank" rel="noopener">官方文档</a> </td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.net core 3.0 Signalr - 08 业务实现-客户端demo&lt;br&gt;
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Signalr" scheme="http://blog.xxgtalk.cn/tags/Signalr/"/>
    
  </entry>
  
  <entry>
    <title>.net core 3.0 Signalr - 07 业务实现-服务端 自定义管理组、用户、连接</title>
    <link href="http://blog.xxgtalk.cn/2019/10/04/dotnetcore/signalr/07-self-manager/"/>
    <id>http://blog.xxgtalk.cn/2019/10/04/dotnetcore/signalr/07-self-manager/</id>
    <published>2019-10-04T12:34:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>.net core 3.0 Signalr - 07 业务实现-服务端 自定义管理组、用户、连接<br><a id="more"></a></p><h2 id="Hub的管理"><a href="#Hub的管理" class="headerlink" title="Hub的管理"></a>Hub的管理</h2><ul><li><p>重写OnConnectedAsync<br>从连接信息中获取UserId、Groups,ConnectId，并实现这三者的关系，存放于redis中<br><a href="https://github.com/xiexingen/CTS.Signalr/blob/master/CTS.Signalr.Server/Hubs/NotifyHub.cs" target="_blank" rel="noopener">代码请查看</a><br><code>`</code> C#<br>using CTS.Signalr.Server.Cores;<br>using CTS.Signalr.Server.Dtos;<br>using Microsoft.AspNetCore.Authorization;<br>using Microsoft.AspNetCore.SignalR;<br>using Microsoft.Extensions.Logging;<br>using System;<br>using System.Linq;<br>using System.Threading.Tasks;</p><p>namespace CTS.Signalr.Server.Hubs<br>{</p><pre><code>/// &lt;summary&gt;/// 服务端接口/// &lt;/summary&gt;public interface IServerNotifyHub{}/// &lt;summary&gt;/// 客户端使用的接口/// &lt;/summary&gt;public interface IClientNotifyHub{    Task OnNotify(object data);    Task OnLine(object data);    Task OffLine(object data);}</code></pre></li></ul><pre><code>  [Authorize]  public class NotifyHub : Hub&lt;IClientNotifyHub&gt;,IServerNotifyHub  {      private readonly SignalrRedisHelper _signalrRedisHelper;      private readonly ILogger _logger;      public NotifyHub(SignalrRedisHelper signalrRedisHelper, ILogger&lt;NotifyHub&gt; logger)      {          _signalrRedisHelper = signalrRedisHelper;          _logger = logger;      }      public override async Task OnConnectedAsync()      {          //await Clients.All.OnNotify(new { UserId= Context.User.Identity.Name, Name=Context.User.Identity.Name, ConnectId = Context.ConnectionId });          var userId= Context.User.Identity.Name;          var groups=Context.GetHttpContext().Request.Query[&quot;group&quot;].FirstOrDefault();          _logger.LogDebug($&quot;OnConnectedAsync----userId:{userId},groups:{groups},connectionId:{ Context.ConnectionId}&quot;);          if (!string.IsNullOrWhiteSpace(userId))          {              await _signalrRedisHelper.AddConnectForUserAsync(userId, Context.ConnectionId);              await JoinToGroup(userId, Context.ConnectionId, groups?.Split(&#39;,&#39;));              await DealOnLineNotify(userId, Context.ConnectionId);          }          await base.OnConnectedAsync();      }      public override async Task OnDisconnectedAsync(Exception exception)      {          var userId = Context.User.Identity.Name;          var groups = Context.GetHttpContext().Request.Query[&quot;group&quot;].FirstOrDefault();          _logger.LogDebug($&quot;OnDisconnectedAsync----userId:{userId},groups:{groups},connectionId:{ Context.ConnectionId}&quot;);          if (!string.IsNullOrWhiteSpace(userId))          {              await _signalrRedisHelper.RemoveConnectForUserAsync(userId, Context.ConnectionId);              await DealOffLineNotify(userId,Context.ConnectionId);          }          await LeaveFromGroup(Context.ConnectionId, groups?.Split(&#39;,&#39;));          await base.OnDisconnectedAsync(exception);      }      /// &lt;summary&gt;      /// 加入组      /// &lt;/summary&gt;      /// &lt;param name=&quot;groupName&quot;&gt;&lt;/param&gt;      /// &lt;returns&gt;&lt;/returns&gt;      private async Task JoinToGroup(string userId,string connectionId,params string[] groups)      {          if (!string.IsNullOrWhiteSpace(userId)&amp;&amp; groups!=null&amp;&amp;groups.Length&gt;0)          {              foreach (var group in groups)              {                  await Groups.AddToGroupAsync(connectionId, group);                  await _signalrRedisHelper.AddUserForGroupAsync(group, connectionId, userId);                  // await Clients.Group(group).OnJoinGroup(new { ConnectId = connectionId, UserId = userId, GroupName = group });              }          }      }      /// &lt;summary&gt;      /// 从组中移除      /// &lt;/summary&gt;      /// &lt;param name=&quot;groupName&quot;&gt;&lt;/param&gt;      /// &lt;returns&gt;&lt;/returns&gt;      private async Task LeaveFromGroup(string connectionId,params string[] groups)      {          if (groups != null &amp;&amp; groups.Length &gt; 0)          {              foreach (var group in groups)              {                  await Groups.RemoveFromGroupAsync(connectionId, group);                  await _signalrRedisHelper.RemoveConnectFromGroupAsync(group,connectionId);                  // await Clients.Group(group).OnLeaveGroup(new { ConnectId = connectionId, GroupName = group });              }          }      }      /// &lt;summary&gt;      /// 处理上线通知(只有用户第一个连接才通知)      /// &lt;/summary&gt;      /// &lt;param name=&quot;userId&quot;&gt;&lt;/param&gt;      /// &lt;param name=&quot;connectionId&quot;&gt;&lt;/param&gt;      /// &lt;returns&gt;&lt;/returns&gt;      private async Task DealOnLineNotify(string userId,string connectionId)       {          var userConnectCount = await _signalrRedisHelper.GetConnectsCountByUserAsync(userId);          await Clients.All.OnLine(new OnLineData()          {              UserId = userId,              ConnectionId = connectionId,              IsFirst = userConnectCount == 1          });      }      /// &lt;summary&gt;      /// 处理下线通知(只有当用户一个连接都没了 才算下线)      /// &lt;/summary&gt;      /// &lt;param name=&quot;userId&quot;&gt;&lt;/param&gt;      /// &lt;param name=&quot;connectionId&quot;&gt;&lt;/param&gt;      /// &lt;returns&gt;&lt;/returns&gt;      private async Task DealOffLineNotify(string userId,string connectionId)      {          var userConnectCount = await _signalrRedisHelper.GetConnectsCountByUserAsync(userId);          await Clients.All.OffLine(new OffLineData()          {              UserId = userId,              ConnectionId = connectionId,              IsLast = userConnectCount == 0          });      }  }</code></pre><p>  }</p><pre><code>## 提供给业务系统调用的API- [POST] api/notify/post application/json形式 提交，数据格式如下  ``` json  {    GroupIds:&#39;&#39;, // [可空] 组id集合，多个用,隔开    UserIds:&#39;&#39;,// [可空] 用户id集合，多个用,隔开    ExcludeUsers:boolean, // 是否排除用户列表中的用户    NotifyObj:Object // 通知的对象，任意类型(总大小不要超过36k)  }</code></pre><ul><li><p>有GroupIds</p><ul><li><p>ExcludeUsers=true<br>推送给指定的组中所有用户(排除掉UserIds部分)</p></li><li><p>ExcludeUsers=false<br>推送给组中指定(UserIds中指定的)的这些用户</p></li></ul></li><li><p>无GroupIds</p><ul><li><p>ExcludeUsers=true<br>推送给当前所有连接(排除掉UserIds部分的用户)</p></li><li><p>ExcludeUsers=false<br>推送给指定用户(UserIds中指定的用户)</p></li></ul></li></ul><ul><li><p>[POST] api/notify/postConnects<br>application/json提交，数据格式如下</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  Connects<span class="token operator">:</span>''<span class="token punctuation">,</span> // 连接Id集合，多个用，隔开  NotifyObj<span class="token operator">:</span>Object // 通知的对象，任意类型(总大小不要超过36k<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>有UserId<ul><li>ExcludeConnectId=true<br>给改用户除指定的ConnectId外的所有连接端推送</li><li>ExcludeConnectId=false<br>跟没指定UserId一致</li></ul></li><li>无UserId<br>给指定连接Id推送</li></ul></li><li><p>[GET] api/users<br>获取在线用户Id列表</p></li><li><p>[GET] api/groups<br>获取在线组列表</p></li></ul><h2 id="增加日志记录"><a href="#增加日志记录" class="headerlink" title="增加日志记录"></a>增加日志记录</h2><p>为了方便分析和定位问题，使用log4net来作为日志记录器。</p><ul><li>nuget 安装log4net<br>nuget 搜索 log4net，安装</li><li><p>Config中配置<br>在Config中注入ILoggerFactory，然后使用添加Log4Net,代码如下所示</p><pre class=" language-C#"><code class="language-C#">public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory){  if (env.IsDevelopment())  {      app.UseDeveloperExceptionPage();  }  app.UseHsts();  loggerFactory.AddLog4Net();  ...}</code></pre></li><li><p>添加log4net配置文件<br>更多配置请自行查找log4net官方配置文档</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token comment" spellcheck="true">&lt;!--LOG4日志级别   0：TRACE；记录一些对程序员调试问题有帮助的信息, 其中可能包含一些敏感信息, 所以应该避免在生产环境中启用Trace日志。  1：DEBUG；记录一些在开发和调试阶段有用的短时变量(Short-term usefulness), 所以除非为了临时排除生产环境的故障，开发人员应该尽量避免在生产环境中启用Debug日志。  2：INFO；信息日志，记录应用程序的一些流程, 例如，记录当前api请求的url，请求参数等。  3：WARN；警告日志；记录应用程序中发生的不正常或者未预期的事件信息。这些信息中可能包含错误消息或者错误产生的条件, 例如, 文件未找到，用户不存在。  4：ERROR；错误日志；记录应用程序中某个操作产生的错误和异常信息，如对空值进行操作等。  5：FATAL；毁灭性错误；记录一些需要立刻修复的问题。例如数据丢失，磁盘空间不足。trace&lt;debug&lt;info&lt;warn&lt;error&lt;fatal --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4net</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ErrorRollingFileAppender<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log4net.Appender.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AppData\\logs\\<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appendToFile</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingStyle</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Date<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datePattern</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yyyy-MM-dd-<span class="token punctuation">'</span>error.log<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxSizeRollBackups</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>staticLogFileName</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log4net.Layout.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conversionPattern</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%-5level %date [%-5.5thread] %-40.40logger - %message%newline<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log4net.Filter.LevelRangeFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>levelMin</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>levelMax</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FATAL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>All<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ErrorRollingFileAppender<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4net</span><span class="token punctuation">></span></span></code></pre><p>至此，log4net配置完毕</p></li></ul><p>更多内容请通过快速导航查看下一篇</p><h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:left">内容 </th></tr></thead><tbody><tr><td style="text-align:left">索引</td><td style="text-align:left"><a href="/2019/09/20/dotnetcore/signalr/00-introduct/">.net core 3.0 Signalr - 实现一个业务推送系统</a> </td></tr><tr><td style="text-align:left">上一篇</td><td style="text-align:left"><a href="/2019/10/03/dotnetcore/signalr/06-analysis/">.net core 3.0 Signalr - 06 业务实现-业务分析</a> </td></tr><tr><td style="text-align:left">下一篇</td><td style="text-align:left"><a href="/2019/10/05/dotnetcore/signalr/08-clientdemo/">.net core 3.0 Signalr - 08 业务实现-客户端demo</a>  </td></tr><tr><td style="text-align:left">源码地址</td><td style="text-align:left"><a href="https://github.com/xiexingen/CTS.Signalr" target="_blank" rel="noopener">源码</a> </td></tr><tr><td style="text-align:left">官方文档</td><td style="text-align:left"><a href="https://docs.microsoft.com/zh-CN/aspnet/core/?view=aspnetcore-3.0" target="_blank" rel="noopener">官方文档</a> </td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.net core 3.0 Signalr - 07 业务实现-服务端 自定义管理组、用户、连接&lt;br&gt;
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Signalr" scheme="http://blog.xxgtalk.cn/tags/Signalr/"/>
    
  </entry>
  
  <entry>
    <title>.net core 3.0 Signalr - 06 业务实现-业务分析</title>
    <link href="http://blog.xxgtalk.cn/2019/10/03/dotnetcore/signalr/06-analysis/"/>
    <id>http://blog.xxgtalk.cn/2019/10/03/dotnetcore/signalr/06-analysis/</id>
    <published>2019-10-03T12:34:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>.net core 3.0 Signalr - 06 业务实现-业务分析<br><a id="more"></a></p><h2 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h2><ol><li>人-项目关系<br>一个人可以属于多个项目，一个项目可以有多个人加入，通知的时候，可以通知项目内的所有人，也可以通知部分人或者某个责任人。</li><li>登录互斥<br>同一个人不允许登录两次(不同浏览器或者不同电脑登)，后面登录的会将前面登录的人挤下线。</li><li>聊天<br>可以私聊、也可以创建群聊、上线通知(多个连接的情况)</li><li>文件下载<br>用户在界面上选择了多个文件，然后选择批量打包下载，后端后台线程进行压缩、压缩完成后通过signalr通知该用户(的某个连接,比如当前用户开了多个tab页，应该只能推送给操作的那个tab页)</li></ol><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><blockquote><p>名词解释: 业务系统:具体业务功能的系统     推送系统:实际的Signalr系统，跟业务系统分开部署</p><ol><li>将推送单独成一个子系统；支持单独部署，可一台服务器也可以多台，通过redis作为底板来分发到服务器</li><li>推送子系统端自定义管理用户、连接、组，业务系统调用的时候</li><li>推送系统开发一个api，给业务系统直接调用(当然这不是最佳选择，可以通过消息队列，支持重试、优先级等，性能会比http形式好很多)<br>业务系统调用推送系统的时候传递参数包括，组、用户、推送数据对象，比如如下代码  <pre class=" language-C#"><code class="language-C#">var send = new Send(){   // 推送的组，多个用,隔开   GroupId = GroupId,   // 关联的UserId 多个用,隔开   UserIds= UserIds,   // 是否排除用户   ExcludeUsers=ExcludeUsers,   // 实际推送的对象   NotifyObj = new NotifyObj()   {       Data = Data,       NotifyType = NotifyType,       OpType= OpType   },};</code></pre></li></ol><ul><li>有GroupId<ul><li>ExcludeUsers=true<br>推送给指定的组中所有用户(排除掉UserIds部分)</li></ul></li></ul></blockquote><ul><li>ExcludeUsers=false<br>推送给组中指定(UserIds中指定的)的这些用户</li></ul><ul><li><p>无GroupId</p><ul><li><p>ExcludeUsers=true<br>推送给当前所有连接(排除掉UserIds部分的用户)</p></li><li><p>ExcludeUsers=false<br>推送给指定用户(UserIds中指定的用户)</p></li></ul></li></ul><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><ol><li>组、用户、连接的关系</li></ol><ul><li>用户:[连接Id]<br>一个用户用多个连接、以Set形式存redis中</li><li>组:[连接Id:用户Id]<br>以Redis中的Hash格式存储，以Group为Key，以连接Id为Name，以UserId为值，一个用户在组中可能多个连接(开多个浏览器tab页),这样设计的好处是可以满足以下的几种情况<ul><li>给某个人推送<br>从redis中直接根据该用户的UserId查询该用户的所有连接，然后通过连接推送即可</li><li>给某个组推送<br>从redis中根据组名查询出所有的连接Id，通过连接直接推送</li><li>给某个组中的某些人推<br>这个时候不能根据人查连接Id，需要先根据组得到组中的人、连接Id，然后只给组中这些人对应的连接推送</li><li>用户上线的时候<br>在redis中存储一份用户与连接的关系；如果有组的情况，同时以Hash形式存储组、连接Id、用户Id</li><li>用户再开一个浏览器tab页<br>在redis中该用户对应的连接中增加新的连接Id；如果有组的情况，同时以Hash形式存储组、连接Id、用户Id(因为是一连接Id为name的，然而连接Id是不重复的，所以是可以存着同一个组、同一个用户不同连接这种情况的)</li><li>用户退出页面<br>在redis中找到该用户，从redis中删除改用户的找个连接Id，组的情况同样处理</li><li>给某个用户的某个连接Id推送<br>比如:用户点击打包下载，服务器端后台线程进行打包、压缩，完成后推送给指定的连接Id，前端界面再进行处理下载</li></ul></li></ul><p>至此，业务分析完毕，更多内容请通过快速导航查看下一篇</p><h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:left">内容 </th></tr></thead><tbody><tr><td style="text-align:left">索引</td><td style="text-align:left"><a href="/2019/09/20/dotnetcore/signalr/00-introduct/">.net core 3.0 Signalr - 实现一个业务推送系统</a> </td></tr><tr><td style="text-align:left">上一篇</td><td style="text-align:left"><a href="/2019/10/02/dotnetcore/signalr/05-jwt/">.net core 3.0 Signalr - 05 使用jwt将用户跟signalr关联</a> </td></tr><tr><td style="text-align:left">下一篇</td><td style="text-align:left"><a href="/2019/10/04/dotnetcore/signalr/07-self-manager/">.net core 3.0 Signalr - 07 业务实现-服务端 自定义管理组、用户、连接</a>  </td></tr><tr><td style="text-align:left">源码地址</td><td style="text-align:left"><a href="https://github.com/xiexingen/CTS.Signalr" target="_blank" rel="noopener">源码</a> </td></tr><tr><td style="text-align:left">官方文档</td><td style="text-align:left"><a href="https://docs.microsoft.com/zh-CN/aspnet/core/?view=aspnetcore-3.0" target="_blank" rel="noopener">官方文档</a> </td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.net core 3.0 Signalr - 06 业务实现-业务分析&lt;br&gt;
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Signalr" scheme="http://blog.xxgtalk.cn/tags/Signalr/"/>
    
  </entry>
  
  <entry>
    <title>.net core 3.0 Signalr - 05 使用jwt将用户跟signalr关联</title>
    <link href="http://blog.xxgtalk.cn/2019/10/02/dotnetcore/signalr/05-jwt/"/>
    <id>http://blog.xxgtalk.cn/2019/10/02/dotnetcore/signalr/05-jwt/</id>
    <published>2019-10-02T10:34:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>.net core 3.0 Signalr - 05 使用jwt将用户跟signalr关联<br><a id="more"></a><br>Signalr是以Group、Connect为核心来进行推送，比如，给某个组、某个连接来推送，但实际场景中，核心应该是某个组、某个人；然而一个人可以对应多个连接(浏览器多个tab页)；本节就来介绍下自行管理人、组、连接这些关系<br>由于signalr连接的时候不那么方便附带header和cookie(因为推送独立成一个子系统了)，实际实现中采用以url query的形式附带上token，然后服务器端自定义解析token得到用户信息；</p><h2 id="服务器端实现"><a href="#服务器端实现" class="headerlink" title="服务器端实现"></a>服务器端实现</h2><ul><li><p>ConfigureServices中添加服务相关方法，代码如下,完整代码</p><pre class=" language-C#"><code class="language-C#">public void ConfigureServices(IServiceCollection services){    var appSection = Configuration.GetSection("App");    services.Configure<AppSetting>(option => appSection.Bind(option));    var appSetting = appSection.Get<AppSetting>();    services.AddSingleton<SignalrRedisHelper>();    // services.AddHostedService<ClearBackGroundService>();    services.AddAuthentication(options =>    {        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;        options.DefaultForbidScheme = JwtBearerDefaults.AuthenticationScheme;    })    .AddJwtBearer(option =>    {        option.SecurityTokenValidators.Clear();        option.SecurityTokenValidators.Add(new UserTokenValidation()); ;        option.Events = new JwtBearerEvents()        {            OnMessageReceived = context =>            {                var userId = context.Request.Query["userId"].FirstOrDefault();                if (!string.IsNullOrWhiteSpace(userId))                {                    context.Token = userId;                }                return Task.CompletedTask;            }        };    });    services.AddCors(options => options.AddPolicy(corsPolicy, builder =>    {        builder              .SetIsOriginAllowedToAllowWildcardSubdomains()              .WithOrigins(appSetting.CORS.Split(","))              .AllowAnyMethod()              .AllowCredentials()              .AllowAnyHeader()              .Build();    }));    services.AddControllers()        .AddNewtonsoftJson(options => options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver())        .ConfigureApiBehaviorOptions(options =>        {            options.InvalidModelStateResponseFactory = context =>            {                var result = new BadRequestObjectResult(context.ModelState);                result.ContentTypes.Add(MediaTypeNames.Application.Json);                // result.ContentTypes.Add(MediaTypeNames.Application.Xml);                return result;            };        })        .SetCompatibilityVersion(CompatibilityVersion.Version_3_0);    // 添加Signalr    services.AddSignalR(config =>    {        if (_webEnv.IsDevelopment())        {            config.EnableDetailedErrors = true;        }    })    // 支持MessagePack    .AddMessagePackProtocol()    // 使用redis做底板 支持横向扩展 Scale-out    .AddStackExchangeRedis(o =>      {          o.ConnectionFactory = async writer =>          {              var config = new ConfigurationOptions              {                  AbortOnConnectFail = false,                  // Password = "changeme",                  ChannelPrefix = "__signalr_",              };              //config.EndPoints.Add(IPAddress.Loopback, 0);              //config.SetDefaultPorts();              config.DefaultDatabase = appSetting.SignalrRedisCache.DatabaseId;              var connection = await ConnectionMultiplexer.ConnectAsync(appSetting.SignalrRedisCache.ConnectionString, writer);              connection.ConnectionFailed += (_, e) =>              {                  Console.WriteLine("Connection to Redis failed.");              };              if (connection.IsConnected)              {                  Console.WriteLine("connected to Redis.");              }              else              {                  Console.WriteLine("Did not connect to Redis");              }              return connection;          };      });}</code></pre><p>其中，SignalrRedisHelper 为redis辅助方法，<a href="https://github.com/xiexingen/CTS.Signalr/blob/master/Core.Signalr.Template.Web/Cores/SignalrRedisHelper.cs" target="_blank" rel="noopener">详情请参见</a><br>UserTokenValidation 为自定义token解析方法，<a href="https://github.com/xiexingen/CTS.Signalr/blob/master/Core.Signalr.Template.Web/Cores/UserTokenValidation.cs" target="_blank" rel="noopener">详情请参见</a>,由于历史遗留问题，此处直接使用了userId，建议的做法是传递jwttoken，然后服务器端解析jwt token得到用户信息    </p></li></ul><h2 id="Hub中跟用户关联"><a href="#Hub中跟用户关联" class="headerlink" title="Hub中跟用户关联"></a>Hub中跟用户关联</h2><p>在Hub中通过Context.User.Identity.Name可以获取到解析的值，通过这种关系来跟用户关联上，当然，也可以自定义修改使用其他信息，比如Email或其他自定义的名称，具体请google</p><p>更多内容请通过快速导航查看下一篇</p><h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:left">内容 </th></tr></thead><tbody><tr><td style="text-align:left">索引</td><td style="text-align:left"><a href="/2019/09/20/dotnetcore/signalr/00-introduct/">.net core 3.0 Signalr - 实现一个业务推送系统</a> </td></tr><tr><td style="text-align:left">上一篇</td><td style="text-align:left"><a href="/2019/10/01/dotnetcore/signalr/04-redis/">.net core 3.0 Signalr - 04 使用Redis做底板来支持横向扩展</a> </td></tr><tr><td style="text-align:left">下一篇</td><td style="text-align:left"><a href="/2019/10/03/dotnetcore/signalr/06-analysis/">.net core 3.0 Signalr - 06 业务实现-业务分析</a> </td></tr><tr><td style="text-align:left">源码地址</td><td style="text-align:left"><a href="https://github.com/xiexingen/CTS.Signalr" target="_blank" rel="noopener">源码</a> </td></tr><tr><td style="text-align:left">官方文档</td><td style="text-align:left"><a href="https://docs.microsoft.com/zh-CN/aspnet/core/?view=aspnetcore-3.0" target="_blank" rel="noopener">官方文档</a> </td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.net core 3.0 Signalr - 05 使用jwt将用户跟signalr关联&lt;br&gt;
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Signalr" scheme="http://blog.xxgtalk.cn/tags/Signalr/"/>
    
  </entry>
  
  <entry>
    <title>.net core 3.0 Signalr - 04 使用Redis做底板来支持横向扩展</title>
    <link href="http://blog.xxgtalk.cn/2019/10/01/dotnetcore/signalr/04-redis/"/>
    <id>http://blog.xxgtalk.cn/2019/10/01/dotnetcore/signalr/04-redis/</id>
    <published>2019-10-01T08:34:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>.net core 3.0 Signalr - 04 使用Redis做底板来支持横向扩展<br><a id="more"></a><br>在实际的系统中，可能需要多台机器部署;然而，Signalr的连接信息是跟站点走的，举个例子<br>推送系统部署了A、B两个服务器，张三访问A服务器，李四访问B服务器，当张三通过A服务器向李四推送的时候，A服务器上是找不到李四的连接信息的，自然也就推送不过了，这个时候就需要有一个统一协调的玩意，signalr支持多种，Azure、Redis等，本节以Redis作为底板，介绍如何在Signalr中使用Redis作为底板来支持横向扩展。</p><h2 id="引入Redis"><a href="#引入Redis" class="headerlink" title="引入Redis"></a>引入Redis</h2><ul><li>先引入NuGet包<br>Microsoft.AspNetCore.SignalR.StackExchangeRedis</li><li><p>修改Startup中的ConfigureServices方法</p><pre class=" language-C#"><code class="language-C#">var appSection = Configuration.GetSection("App");services.Configure<AppSetting>(option => appSection.Bind(option));var appSetting = appSection.Get<AppSetting>();// 添加Signalrservices.AddSignalR(config =>{    if (_webEnv.IsDevelopment())    {        config.EnableDetailedErrors = true;    }})// 支持MessagePack.AddMessagePackProtocol()// 使用redis做底板 支持横向扩展 Scale-out.AddStackExchangeRedis(o =>  {      o.ConnectionFactory = async writer =>      {          var config = new ConfigurationOptions          {              AbortOnConnectFail = false,              ChannelPrefix = "__signalr_",          };          config.DefaultDatabase = appSetting.SignalrRedisCache.DatabaseId;          var connection = await ConnectionMultiplexer.ConnectAsync(appSetting.SignalrRedisCache.ConnectionString, writer);          connection.ConnectionFailed += (_, e) =>          {              Console.WriteLine("Connection to Redis failed.");          };          if (connection.IsConnected)          {              Console.WriteLine("connected to Redis.");          }          else          {              Console.WriteLine("Did not connect to Redis");          }          return connection;      };  });</code></pre><p>可以自定义Redis相关配置，此处的appSetting为已经定义好的配置实体，包括了，主要配置、CROS配置、Jwt配置、redis配置等详情如下</p><pre class=" language-C#"><code class="language-C#">/// <summary>/// 对应appsettings中的App节点的配置信息/// </summary>public class AppSetting{    public JwtSetting JwtSetting { set;get;}    public RedisCache RedisCache { set;get;}    public RedisCache SignalrRedisCache { set; get; }    public string CORS { set;get;}    /// <summary>    /// 是否主站点(用于运行清理任务等)    /// </summary>    public bool MainSite { set;get;}}/// <summary>/// JWT设置/// </summary>public class JwtSetting{    /// <summary>    /// 发行者 表示token是谁颁发的    /// </summary>    public string Issuer { set; get; }    /// <summary>    /// 表示哪些客户端可以使用这个token    /// </summary>    public string Audience { set; get; }    /// <summary>    /// 加密的Key 必须大于16位    /// </summary>    public string SecretKey { set; get; }}public class RedisCache{    public string ConnectionString { set;get;}    public int DatabaseId { set; get; }}</code></pre><p>对应的配置文件如下</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"Logging"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"LogLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"Default"</span><span class="token operator">:</span> <span class="token string">"Debug"</span><span class="token punctuation">,</span>    <span class="token property">"System"</span><span class="token operator">:</span> <span class="token string">"Information"</span><span class="token punctuation">,</span>    <span class="token property">"Microsoft"</span><span class="token operator">:</span> <span class="token string">"Information"</span><span class="token punctuation">,</span>    <span class="token property">"Microsoft.AspNetCore.SignalR"</span><span class="token operator">:</span> <span class="token string">"Trace"</span><span class="token punctuation">,</span>    <span class="token property">"Microsoft.AspNetCore.Http.Connections"</span><span class="token operator">:</span> <span class="token string">"Trace"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"App"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"RedisCache"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ConnectionString"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1:6379,password=#####,ssl=false,abortConnect=true,connectTimeout=5000"</span><span class="token punctuation">,</span>    <span class="token property">"DatabaseId"</span><span class="token operator">:</span> <span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"SignalrRedisCache"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ConnectionString"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1:6379,password=#####,ssl=false,abortConnect=true,connectTimeout=5000"</span><span class="token punctuation">,</span>    <span class="token property">"DatabaseId"</span><span class="token operator">:</span> <span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"CORS"</span><span class="token operator">:</span> <span class="token string">"https://localhost:60000,http://localhost:60001"</span><span class="token punctuation">,</span>  <span class="token property">"MainSite"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"JwtSetting"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"Issuer"</span><span class="token operator">:</span> <span class="token string">"http://localhost:50000"</span><span class="token punctuation">,</span> //颁发者    <span class="token property">"Audience"</span><span class="token operator">:</span> <span class="token string">"http://localhost:50000"</span><span class="token punctuation">,</span> //使用者    <span class="token property">"SecretKey"</span><span class="token operator">:</span> <span class="token string">"Wetrial20196666666"</span> // key 大于<span class="token number">16</span>位  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>首先，将配置文件跟实体对象映射，下次在其他地方使用的时候可以直接通过DI注入，然后通过AddStackExchangeRedis配置使用redis作为底板</p></li></ul><p>更多内容请通过快速导航查看下一篇</p><h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:left">内容 </th></tr></thead><tbody><tr><td style="text-align:left">索引</td><td style="text-align:left"><a href="/2019/09/20/dotnetcore/signalr/00-introduct/">.net core 3.0 Signalr - 实现一个业务推送系统</a> </td></tr><tr><td style="text-align:left">上一篇</td><td style="text-align:left"><a href="/2019/09/29/dotnetcore/signalr/03-message-pack/">.net core 3.0 Signalr - 03 使用MessagePack压缩传输内容</a> </td></tr><tr><td style="text-align:left">下一篇</td><td style="text-align:left"><a href="/2019/10/02/dotnetcore/signalr/05-jwt/">.net core 3.0 Signalr - 05 使用jwt将用户跟signalr关联</a> </td></tr><tr><td style="text-align:left">源码地址</td><td style="text-align:left"><a href="https://github.com/xiexingen/CTS.Signalr" target="_blank" rel="noopener">源码</a> </td></tr><tr><td style="text-align:left">官方文档</td><td style="text-align:left"><a href="https://docs.microsoft.com/zh-CN/aspnet/core/signalr/redis-backplane?view=aspnetcore-3.0" target="_blank" rel="noopener">官方文档</a> </td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.net core 3.0 Signalr - 04 使用Redis做底板来支持横向扩展&lt;br&gt;
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Signalr" scheme="http://blog.xxgtalk.cn/tags/Signalr/"/>
    
  </entry>
  
  <entry>
    <title>.net core 3.0 Signalr - 03 使用MessagePack压缩传输内容</title>
    <link href="http://blog.xxgtalk.cn/2019/09/29/dotnetcore/signalr/03-message-pack/"/>
    <id>http://blog.xxgtalk.cn/2019/09/29/dotnetcore/signalr/03-message-pack/</id>
    <published>2019-09-29T06:34:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>.net core 3.0 Signalr - 03 使用MessagePack压缩传输内容<br><a id="more"></a></p><h2 id="MessagePack基础介绍"><a href="#MessagePack基础介绍" class="headerlink" title="MessagePack基础介绍"></a>MessagePack基础介绍</h2><p>Signalr默认使用的是json形式传递数据，但是signalr提供了灵活的扩展，支持MessagePack形式序列化数据，以增加性能降低网络传输的效果，极大的提高响应速度。</p><p>先看一个MessagePack自定义序列化的例子,以一个自定义的实体对象为例，可以使用MessagepackObject标记为序列化的对象，同时定义使用属性名作为key(区分大小写)，同时可以定义忽略某个属性等、以及自定义key等</p><pre class=" language-C#"><code class="language-C#">    [MessagePackObject(keyAsPropertyName: true)]    public class OffLineData    {        /// <summary>        /// 用户Id        /// </summary>        public string UserId { set; get; }        /// <summary>        /// 连接Id        /// </summary>        public string ConnectionId { set; get; }        /// <summary>        /// 是否该用户的最后一个连接        /// </summary>        public bool IsLast { set; get; }        [IgnoreMember]        public string Test { set;get;}    }    // 比如对象，new OffLineData(){UserId="1000",ConnectionId="AZDEFASDFASDF",IsLast:true}通过MessagePack序列化后应该会是{UserId:"1000",ConnectionId:"AZDEFASDFASDF",IsLast:true},这个跟常用的json基本相同</code></pre><p>同时MessagePack还可以定义序列化成数组形式，代码如下</p><pre class=" language-C#"><code class="language-C#">    [MessagePackObject]    public class OffLineData      {          /// <summary>          /// 用户Id          /// </summary>          [Key(0)]          public string UserId { set; get; }          /// <summary>          /// 连接Id          /// </summary>          [Key(0)]          public string ConnectionId { set; get; }          /// <summary>          /// 是否该用户的最后一个连接          /// </summary>          [Key(0)]          public bool IsLast { set; get; }      }    // 比如对象，new OffLineData(){UserId="1000",ConnectionId="AZDEFASDFASDF",IsLast:true}通过MessagePack序列化后应该会是["10000","AZDEFASDFASDF",true]</code></pre><p>更多MessagePack的内容可以自行结尾的文档，此处不再过多介绍.</p><h2 id="为Signalr添加MessagePack支持"><a href="#为Signalr添加MessagePack支持" class="headerlink" title="为Signalr添加MessagePack支持"></a>为Signalr添加MessagePack支持</h2><ul><li>引入需要的Nuget包<br>Microsoft.AspNetCore.SignalR.Protocols.MessagePack  </li><li>修改之前的ConfigureServices<pre class=" language-C#"><code class="language-C#">  // 添加Signalr  services.AddSignalR(config =>  {      if (_webEnv.IsDevelopment())      {          config.EnableDetailedErrors = true;      }  })  // 支持MessagePack  .AddMessagePackProtocol();</code></pre></li><li><p>前端引入messagepack解析库<br>由于MessagePack传输是以二进制形式进行传输，降低了带宽，但是同时也增加到了代码的复杂度，原本直接获取数据就可以用的，现在需要先将二进制数据转换成正常数据，好在官方提供了对应的js库<em>msgpack5</em>、<em>signalr-protocol-msgpack</em><br>可以通过vs的包管理工具或者npm安装，然后拷贝需要的文件到项目的lib文件夹,比如我的结构是</p><pre class=" language-bash"><code class="language-bash">  signalr-protocol-msgpack  <span class="token operator">|</span>-msgpack5.js  <span class="token operator">|</span>-msgpack5.min.js  <span class="token operator">|</span>-signalr-protocol-msgpack.js  <span class="token operator">|</span>-signalr-protocol-msgpack.min.js</code></pre><p>前端页面引入这两个js(注意顺序:signalr、msgpack5、signalr-protocol-msgpack)  </p></li><li><p>修改js连接对象，支持上MessagePack</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">signalR<span class="token punctuation">.</span>HubConnectionBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">configureLogging</span><span class="token punctuation">(</span>signalR<span class="token punctuation">.</span>LogLevel<span class="token punctuation">.</span>Error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 前端控制台的日志级别，根据需要配置</span>  <span class="token punctuation">.</span><span class="token function">withUrl</span><span class="token punctuation">(</span><span class="token string">'http://localhost:50001/notify-hub'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 连接地址,这个地址是signalr项目的地址</span>  <span class="token punctuation">.</span><span class="token function">withHubProtocol</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">signalR<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>msgpack<span class="token punctuation">.</span>MessagePackHubProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用Messagepack来解析推送的数据</span>  <span class="token punctuation">.</span><span class="token function">withAutomaticReconnect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 配置重连的时间</span>  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 重连的时候触发</span>  connection<span class="token punctuation">.</span><span class="token function">onreconnecting</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'----------------------------------signalr-- onreconnecting'</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//连接关闭的回调</span>  connection<span class="token punctuation">.</span><span class="token function">onclose</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'--------------------------------signalr-- onclose'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'已成功连接到signalr服务器'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="尚未解决问题"><a href="#尚未解决问题" class="headerlink" title="尚未解决问题"></a>尚未解决问题</h2><p>发现通过json.net序列化得到的对象，直接传递给MessagePack序列化会报错，没找着解决方法，直接改成字符串传递，然后在前端解析了，有遇到过的大佬欢迎指点下</p><p>至此，MessagePack介绍算结束了，更多内容请通过快速导航查看下一篇</p><h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:left">内容 </th></tr></thead><tbody><tr><td style="text-align:left">索引</td><td style="text-align:left"><a href="/2019/09/20/dotnetcore/signalr/00-introduct/">.net core 3.0 Signalr - 实现一个业务推送系统</a> </td></tr><tr><td style="text-align:left">上一篇</td><td style="text-align:left"><a href="/2019/09/22/dotnetcore/signalr/02-type-hub/">.net core 3.0 Signalr - 02 使用强类型的Hub</a> </td></tr><tr><td style="text-align:left">下一篇</td><td style="text-align:left"><a href="/2019/10/01/dotnetcore/signalr/04-redis/">.net core 3.0 Signalr - 04 使用Redis做底板来支持横向扩展</a> </td></tr><tr><td style="text-align:left">源码地址</td><td style="text-align:left"><a href="https://github.com/xiexingen/CTS.Signalr" target="_blank" rel="noopener">源码</a> </td></tr><tr><td style="text-align:left">官方文档</td><td style="text-align:left"><a href="https://docs.microsoft.com/zh-CN/aspnet/core/?view=aspnetcore-3.0" target="_blank" rel="noopener">官方文档</a> </td></tr><tr><td style="text-align:left">MessagePack-CSharp</td><td style="text-align:left"><a href="https://github.com/neuecc/MessagePack-CSharp" target="_blank" rel="noopener">MessagePack-CSharp</a> </td></tr><tr><td style="text-align:left">MessagePack</td><td style="text-align:left"><a href="https://msgpack.org/index.html" target="_blank" rel="noopener">MessagePack</a> </td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.net core 3.0 Signalr - 03 使用MessagePack压缩传输内容&lt;br&gt;
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Signalr" scheme="http://blog.xxgtalk.cn/tags/Signalr/"/>
    
  </entry>
  
  <entry>
    <title>.net core 3.0 Signalr - 02 使用强类型的Hub</title>
    <link href="http://blog.xxgtalk.cn/2019/09/22/dotnetcore/signalr/02-type-hub/"/>
    <id>http://blog.xxgtalk.cn/2019/09/22/dotnetcore/signalr/02-type-hub/</id>
    <published>2019-09-22T02:34:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>.net core 3.0 Signalr - 02 使用强类型的Hub<br><a id="more"></a></p><h2 id="强类型的优缺点"><a href="#强类型的优缺点" class="headerlink" title="强类型的优缺点"></a>强类型的优缺点</h2><ul><li>优点<br>强类型的Hub可以避免魔法函数名，相比弱类型更容易维护和发现问题，直接上代码</li><li>缺点<br>特么的得多些好几行代码</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><pre class=" language-C#"><code class="language-C#">    /// <summary>    /// 服务端接口    /// </summary>    public interface IServerNotifyHub    {    }    /// <summary>    /// 客户端使用的接口    /// </summary>    public interface IClientNotifyHub    {        // 这里我们定义一个统一的客户端通知方法        Task OnNotify(object data);    }</code></pre><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>对之前的Hub进行修改,暂时就先通过OnNotify给当前所有客户端推送一个信息<pre class=" language-C#"><code class="language-C#">public class NotifyHub : Hub<IClientNotifyHub>,IServerNotifyHub  {      public override async Task OnConnectedAsync()      {          await Clients.All.OnNotify(new { ConnectId = Context.ConnectionId });          await base.OnConnectedAsync();      }  }</code></pre></li></ul><h2 id="在api中调用Hub推送"><a href="#在api中调用Hub推送" class="headerlink" title="在api中调用Hub推送"></a>在api中调用Hub推送</h2><p>大部分情况下，是通过客户端某个操作，比如:将任务分配给张三，那么在分配任务的这个api中会调用推送 推送给张三一个通知，xxx分配了一个任务给你，在Controller中注入强类型的Hub，代码如下</p><pre class=" language-C#"><code class="language-C#">  ...  private readonly IHubContext<NotifyHub,IClientNotifyHub> _notifyHub;  public NotifyController(IHubContext<NotifyHub,IClientNotifyHub> notifyHub)  {      _notifyHub = notifyHub;  }</code></pre><p>至此，强类型的Hub介绍完毕，更多内容请通过快速导航查看下一篇</p><h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:left">内容 </th></tr></thead><tbody><tr><td style="text-align:left">索引</td><td style="text-align:left"><a href="/2019/09/20/dotnetcore/signalr/00-introduct/">.net core 3.0 Signalr - 实现一个业务推送系统</a> </td></tr><tr><td style="text-align:left">上一篇</td><td style="text-align:left"><a href="/2019/09/21/dotnetcore/signalr/01-base/">.net core 3.0 Signalr - 01 基础篇</a> </td></tr><tr><td style="text-align:left">下一篇</td><td style="text-align:left"><a href="/2019/09/29/dotnetcore/signalr/03-message-pack">.net core 3.0 Signalr - 03 使用MessagePack压缩传输内容</a> </td></tr><tr><td style="text-align:left">源码地址</td><td style="text-align:left"><a href="https://github.com/xiexingen/CTS.Signalr" target="_blank" rel="noopener">源码</a> </td></tr><tr><td style="text-align:left">官方文档</td><td style="text-align:left"><a href="https://docs.microsoft.com/zh-CN/aspnet/core/?view=aspnetcore-3.0" target="_blank" rel="noopener">官方文档</a> </td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.net core 3.0 Signalr - 02 使用强类型的Hub&lt;br&gt;
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Signalr" scheme="http://blog.xxgtalk.cn/tags/Signalr/"/>
    
  </entry>
  
  <entry>
    <title>.net core 3.0 Signalr - 01 基础篇</title>
    <link href="http://blog.xxgtalk.cn/2019/09/21/dotnetcore/signalr/01-base/"/>
    <id>http://blog.xxgtalk.cn/2019/09/21/dotnetcore/signalr/01-base/</id>
    <published>2019-09-21T02:34:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>.net core 3.0 Signalr - 01 基础篇 以最简洁的方式介绍如何创建一个可连接的hub<br><a id="more"></a></p><p>因为将signalr作为单独的站点，此处需要建立两个项目，一个专门用于signalr作为推送项目，一个客户端(实际的业务项目)</p><h2 id="基础知识速览"><a href="#基础知识速览" class="headerlink" title="基础知识速览"></a>基础知识速览</h2><h3 id="Clients对象属性"><a href="#Clients对象属性" class="headerlink" title="Clients对象属性"></a>Clients对象属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:left">All</td><td style="text-align:left">在所有连接的客户端上调用方法</td></tr><tr><td style="text-align:left">Caller</td><td style="text-align:left">在调用集线器方法的客户端上调用方法</td></tr><tr><td style="text-align:left">Others</td><td style="text-align:left">除当前连接外的所有连接</td></tr></tbody></table><h3 id="Clients对象方法"><a href="#Clients对象方法" class="headerlink" title="Clients对象方法"></a>Clients对象方法</h3><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:left">AllExcept</td><td style="text-align:left">在所有连接的客户端（指定的连接除外）上调用方法</td></tr><tr><td style="text-align:left">Client</td><td style="text-align:left">在特定连接的客户端上调用方法(单个)</td></tr><tr><td style="text-align:left">Clients</td><td style="text-align:left">在特定连接的客户端上调用方法(多个)</td></tr><tr><td style="text-align:left">Group</td><td style="text-align:left">对指定组中的所有连接调用方法</td></tr><tr><td style="text-align:left">GroupExcept</td><td style="text-align:left">对指定组中的所有连接调用方法，指定的连接除外</td></tr><tr><td style="text-align:left">Groups</td><td style="text-align:left">在多组连接上调用方法</td></tr><tr><td style="text-align:left">OthersInGroup</td><td style="text-align:left">对一组连接调用方法，而不包括调用该集线器方法的客户端</td></tr><tr><td style="text-align:left">User</td><td style="text-align:left">对与特定用户关联的所有连接调用方法</td></tr><tr><td style="text-align:left">Users</td><td style="text-align:left">对与指定用户相关联的所有连接调用方法</td></tr></tbody></table><h2 id="Signalr推送端"><a href="#Signalr推送端" class="headerlink" title="Signalr推送端"></a>Signalr推送端</h2><ul><li>通过命令行或者vs 2019新建.netcore web项目，选择.net core 3.0、webapi  </li><li><p>建立一个Hub</p><pre class=" language-C#"><code class="language-C#">  public class NotifyHub : Hub  {  }</code></pre></li><li><p>修改Startup中的ConfigServices方法，注册对应的服务</p><pre class=" language-C#"><code class="language-C#">  // 添加Signalr  services.AddSignalR(config =>  {      // _webEnv为通过依赖注入在Startup的构造函数中注入的 IWebHostEnvironment      if (_webEnv.IsDevelopment())      {          config.EnableDetailedErrors = true;      }  });</code></pre></li><li><p>修改Configure配置HTTP请求的管道</p><pre class=" language-C#"><code class="language-C#">  ...  app.UseRouting();  app.UseEndpoints(endpoints =>{      endpoints.MapHub<NotifyHub>("/notify-hub");  });</code></pre><h2 id="业务端"><a href="#业务端" class="headerlink" title="业务端"></a>业务端</h2><p><a href="https://docs.microsoft.com/zh-CN/aspnet/core/tutorials/signalr?view=aspnetcore-3.0&amp;tabs=visual-studio" target="_blank" rel="noopener">相关文档</a></p></li><li><p>创建连接对象</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">var</span> connection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">signalR<span class="token punctuation">.</span>HubConnectionBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">configureLogging</span><span class="token punctuation">(</span>signalR<span class="token punctuation">.</span>LogLevel<span class="token punctuation">.</span>Error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 前端控制台的日志级别，根据需要配置</span>  <span class="token punctuation">.</span><span class="token function">withUrl</span><span class="token punctuation">(</span><span class="token string">'http://localhost:50001/notify-hub'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 连接地址,这个地址是signalr项目的地址</span>  <span class="token punctuation">.</span><span class="token function">withAutomaticReconnect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 配置重连的时间</span>  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 重连的时候触发</span>  connection<span class="token punctuation">.</span><span class="token function">onreconnecting</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'----------------------------------signalr-- onreconnecting'</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//连接关闭的回调</span>  connection<span class="token punctuation">.</span><span class="token function">onclose</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'--------------------------------signalr-- onclose'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'已成功连接到signalr服务器'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>更多内容请通过快速导航查看下一篇</p><h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:left">内容 </th></tr></thead><tbody><tr><td style="text-align:left">索引</td><td style="text-align:left"><a href="/2019/09/20/dotnetcore/signalr/00-introduct/">.net core 3.0 Signalr - 实现一个业务推送系统</a> </td></tr><tr><td style="text-align:left">下一篇</td><td style="text-align:left"><a href="/2019/09/22/dotnetcore/signalr/02-type-hub/">.net core 3.0 Signalr - 02 使用强类型的Hub</a> </td></tr><tr><td style="text-align:left">源码地址</td><td style="text-align:left"><a href="https://github.com/xiexingen/CTS.Signalr" target="_blank" rel="noopener">源码</a> </td></tr><tr><td style="text-align:left">官方文档</td><td style="text-align:left"><a href="https://docs.microsoft.com/zh-CN/aspnet/core/?view=aspnetcore-3.0" target="_blank" rel="noopener">官方文档</a> </td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.net core 3.0 Signalr - 01 基础篇 以最简洁的方式介绍如何创建一个可连接的hub&lt;br&gt;
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Signalr" scheme="http://blog.xxgtalk.cn/tags/Signalr/"/>
    
  </entry>
  
  <entry>
    <title>.net core 3.0 Signalr - 实现一个业务推送系统</title>
    <link href="http://blog.xxgtalk.cn/2019/09/20/dotnetcore/signalr/00-introduct/"/>
    <id>http://blog.xxgtalk.cn/2019/09/20/dotnetcore/signalr/00-introduct/</id>
    <published>2019-09-20T12:00:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ASP.NET Core SignalR 是一个开源代码库，它简化了向应用添加实时 Web 功能的过程。 实时 Web 功能使服务器端代码能够即时将内容推送到客户端。<br>SignalR 的适用对象：  </p><ul><li>需要来自服务器的高频率更新的应用。 例如：游戏、社交网络、投票、拍卖、地图和 GPS 应用。</li><li>仪表板和监视应用。 示例包括公司仪表板、销售状态即时更新或行程警示。</li><li>协作应用。 协作应用的示例包括白板应用和团队会议软件。</li><li>需要通知的应用。 社交网络、电子邮件、聊天、游戏、行程警示以及许多其他应用都使用通知。<br>SignalR 提供了一个用于创建服务器到客户端远程过程调用（RPC）的 API。 RPC 通过服务器端 .NET Core 代码调用客户端上的 JavaScript 函数。<br>以下是 ASP.NET Core SignalR 的一些功能：</li><li>自动管理连接。</li><li>同时向所有连接的客户端发送消息。 例如，聊天室。</li><li>将消息发送到特定的客户端或客户端组。</li><li>扩展以处理增加的流量。</li></ul><h2 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h2><ul><li>一个人可以开多个tab有多个连接</li><li>给指定的一个、一批人推送(以User为中心对该用户的所有连接进行推送(浏览器多个tab))</li><li>给指定的组中某些人推送(群聊)</li><li>给指定的人某些Connect推送(登录排斥，不允许多台电同时脑登录)</li></ul><h2 id="改进部分"><a href="#改进部分" class="headerlink" title="改进部分"></a>改进部分</h2><ul><li>优先使用socket进行通信</li><li>支持一个用户多个连接</li><li>使用MessagePack进行传输</li><li>使用Redis作为底板来支持横向扩展</li></ul><p>本系列共分为10篇，包括基础知识介绍，项目实战等，目录如下</p><p><a href="/2019/09/21/dotnetcore/signalr/01-base/">.net core 3.0 Signalr - 01 基础篇</a><br><a href="/2019/09/22/dotnetcore/signalr/02-type-hub/">.net core 3.0 Signalr - 02 使用强类型的Hub</a><br><a href="/2019/09/29/dotnetcore/signalr/03-message-pack/">.net core 3.0 Signalr - 03 使用MessagePack压缩传输内容</a><br><a href="/2019/10/01/dotnetcore/signalr/04-redis/">.net core 3.0 Signalr - 04 使用Redis做底板来支持横向扩展</a><br><a href="/2019/10/02/dotnetcore/signalr/05-jwt/">.net core 3.0 Signalr - 05 使用jwt将用户跟signalr关联</a><br><a href="/2019/10/03/dotnetcore/signalr/06-analysis/">.net core 3.0 Signalr - 06 业务实现-业务分析</a><br><a href="/2019/10/04/dotnetcore/signalr/07-self-manager/">.net core 3.0 Signalr - 07 业务实现-服务端 自定义管理组、用户、连接</a><br><a href="/2019/10/05/dotnetcore/signalr/08-clientdemo/">.net core 3.0 Signalr - 08 业务实现-客户端demo</a><br><a href="/2019/10/05/dotnetcore/signalr/09-todo/">.net core 3.0 Signalr - 09 待改进&amp;交流</a>   </p><h2 id="Demo源码地址"><a href="#Demo源码地址" class="headerlink" title="Demo源码地址"></a>Demo源码地址</h2><blockquote><p><a href="https://github.com/xiexingen/CTS.Signalr" target="_blank" rel="noopener">https://github.com/xiexingen/CTS.Signalr</a></p></blockquote><h2 id="强烈推荐的参考文档"><a href="#强烈推荐的参考文档" class="headerlink" title="强烈推荐的参考文档"></a>强烈推荐的参考文档</h2><blockquote><p>微软官方文档:<a href="https://docs.microsoft.com/zh-CN/aspnet/core/signalr/introduction?view=aspnetcore-3.0" target="_blank" rel="noopener">https://docs.microsoft.com/zh-CN/aspnet/core/signalr/introduction?view=aspnetcore-3.0</a><br>发现写的不错的博客: <a href="https://www.cnblogs.com/cgzl/p/9509207.html" target="_blank" rel="noopener">https://www.cnblogs.com/cgzl/p/9509207.html</a><br>发现写的不错的博客:<a href="https://www.cnblogs.com/cgzl/p/9515516.html" target="_blank" rel="noopener">https://www.cnblogs.com/cgzl/p/9515516.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;ASP.NET Core SignalR 是一个开源代码库，它简化了向应用添加实时 Web 功能的过程。 实时 Web 功能使服务器端代码能
      
    
    </summary>
    
      <category term=".NetCore" scheme="http://blog.xxgtalk.cn/categories/NetCore/"/>
    
    
      <category term="Signalr" scheme="http://blog.xxgtalk.cn/tags/Signalr/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-01 环境搭建</title>
    <link href="http://blog.xxgtalk.cn/2019/09/09/flutter/01-environment/"/>
    <id>http://blog.xxgtalk.cn/2019/09/09/flutter/01-environment/</id>
    <published>2019-09-09T11:40:22.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter-01 环境搭建<br><a id="more"></a></p><p>文档地址 <a href="https://developer.android.google.cn/studio/intro" target="_blank" rel="noopener">https://developer.android.google.cn/studio/intro</a></p><h1 id="Window10环境搭建Flutter开发环境"><a href="#Window10环境搭建Flutter开发环境" class="headerlink" title="Window10环境搭建Flutter开发环境"></a>Window10环境搭建Flutter开发环境</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>磁盘空间足够</li><li>git 2.x</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Android-Studio-建议3-0及以上"><a href="#Android-Studio-建议3-0及以上" class="headerlink" title="Android Studio(建议3.0及以上)"></a>Android Studio(建议3.0及以上)</h3><ol><li>下载</li></ol><ul><li><a href="https://developer.android.google.com/studio(需要翻墙)" target="_blank" rel="noopener">https://developer.android.google.com/studio(需要翻墙)</a></li><li><a href="https://developer.android.google.cn/studio" target="_blank" rel="noopener">https://developer.android.google.cn/studio</a><br>如果过程提示是否安装一些东西，点同意即可,会自动安装java jdk</li></ul><ol start="2"><li>为Android Studio安装Flutter和Dart插件<br>File-&gt;Settings-&gt;Plugins 然后搜索Flutter点击安装，这个时候会提示安装Dart插件，点安装 然后重启Android Studio<br>如图<br><img src="http://qiniu.xxgtalk.cn/blog/images/20190909203319.png" alt="20190909203319.png"></li></ol><h3 id="Flutter-SDK"><a href="#Flutter-SDK" class="headerlink" title="Flutter SDK"></a>Flutter SDK</h3><ol><li><p>配置flutter临时镜像(非必须)</p><pre class=" language-bash"><code class="language-bash">// 增加如下变量到用户环境变量中PUB_HOSTED_URL<span class="token operator">=</span>https://pub.flutter-io.cn  FLUTTER_STORAGE_BASE_URL<span class="token operator">=</span>https://storage.flutter-io.cn// 注:这些镜像为临时镜像，并不保证一直可用，可以从https://flutter.dev/community/china 查看最新的网址</code></pre></li><li><p>下载并安装</p></li></ol><ul><li>通过 git 克隆flutter项目代码到本地，比如我的是D:\Program Files\Flutter<br>不建议放到高级目录，比如C:\Program Files</li><li>然后在Flutter安装目录的flutter文件下找到flutter_console.bat 双击运行  </li></ul><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><ol><li>系统环境PATH添加 D:\Program Files\Flutter\bin</li><li>Android环境变量配置</li></ol><ul><li>添加系统环境变量<pre class=" language-bash"><code class="language-bash">// 键和值，其中目录为Android SDK的目录，可以通过android studio菜单File-<span class="token operator">></span>Settings 然后搜索SDK 可查看SDK的安装目录ANDROID_HOME:C:\Users\xiexingen\AppData\Local\Android\Sdk</code></pre></li><li>在系统环境变量中的Path中添加%ANDROID_HOME%\emulator</li><li>在系统环境变量中的Path中添加%ANDROID_HOME%\platform-tools</li><li>在系统环境变量中的Path中添加%ANDROID_HOME%\tools</li></ul><blockquote><p>配置完成后，需要重启电脑</p></blockquote><h3 id="在Android模拟器上运行Flutter"><a href="#在Android模拟器上运行Flutter" class="headerlink" title="在Android模拟器上运行Flutter"></a>在Android模拟器上运行Flutter</h3><ul><li>机器上需要启用VM acceleration</li><li>启动android studio 菜单 Tools-&gt;AVD Manager 并选择 <code>Create Virtual Device</code></li><li>选择一个设备 然后点 Next</li><li>为要模拟的Android版本选择一个或多个系统镜像，然后选择Next(建议使用x86)</li><li>在Emulated Performance下，选择 Hardware-GLES 2.0 以启用硬件加速</li><li>验证AVD配置是否正确，然后选Finish,更多问题可以参考文档</li><li>在Android Virtual Device Manager中，点击工具栏的 <code>Run</code>,启动模拟器并显示所选择的操作系统版本或设备的启动画面</li><li>通过 <code>flutter run</code> 命令行运行启动项目</li></ul><h2 id="如何在Android真机运行"><a href="#如何在Android真机运行" class="headerlink" title="如何在Android真机运行"></a>如何在Android真机运行</h2><p>要准备在Android设备上运行并测试Flutter，需要安装Android4.1 (API level 16)或者更高低版本</p><ul><li>在设备上启用 <code>开发人员选项</code>和<code>USB调试</code>，可自行google</li><li>使用USB将手机插入电脑，如果有授权提示则点同意</li><li>在终端中，运行 <code>flutter devices</code>命令以验证Flutter是否识别你连接的Android设备</li><li>通过 <code>flutter run</code> 启动项目</li></ul><hr><h1 id="Mac-环境搭建Flutter开发环境"><a href="#Mac-环境搭建Flutter开发环境" class="headerlink" title="Mac 环境搭建Flutter开发环境"></a>Mac 环境搭建Flutter开发环境</h1><blockquote><p>由于没有mac电脑，所以特地在VM下安装了一个mac系统</p></blockquote><h2 id="前置条件-1"><a href="#前置条件-1" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>磁盘空间足够</li><li>安装了命令行工具: bash、curl、git 2.x、mkdir、rm、unzip、which</li><li>由于国内访问Flutter可能受限，Flutter官方为中国地区待见了临时镜像，可添加如下环境变量到用户的环境变量中<pre class=" language-bash"><code class="language-bash">// Macintosh HD-<span class="token operator">></span>Users-<span class="token operator">></span>用户名-<span class="token operator">></span>.bash_profile<span class="token function">export</span> PUB_HOSTED_URL<span class="token operator">=</span>https://pub.flutter-io.cn<span class="token function">export</span> FLUTTER_STORAGE_BASE_URL<span class="token operator">=</span>https://storage.flutter-io.cn// 注:这些镜像为临时镜像，并不保证一直可用，可以从https://flutter.dev/community/china 查看最新的网址</code></pre></li></ul><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><h3 id="Flutter-SDK-1"><a href="#Flutter-SDK-1" class="headerlink" title="Flutter SDK"></a>Flutter SDK</h3><ol start="2"><li>下载并安装</li></ol><ul><li>下载stable版本的sdk，然后解压到~/flutter</li></ul><ol start="3"><li><p>添加flutter路径到path中</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~vim .bash_profile// 然后添加下面行,<span class="token punctuation">;</span>wq 保存，然后重启bash<span class="token function">export</span> PATH<span class="token operator">=</span>/Users/xiexingen/flutter/bin:<span class="token variable">$PATH</span></code></pre></li><li><p>运行flutter doctor来检查flutter<br>会有很多xx 比如xcode，android相关的工具</p></li></ol><h3 id="Android-Studio-建议3-0及以上-1"><a href="#Android-Studio-建议3-0及以上-1" class="headerlink" title="Android Studio(建议3.0及以上)"></a>Android Studio(建议3.0及以上)</h3><ol><li>下载</li></ol><ul><li><a href="https://developer.android.google.com/studio(需要翻墙)" target="_blank" rel="noopener">https://developer.android.google.com/studio(需要翻墙)</a></li><li><a href="https://developer.android.google.cn/studio" target="_blank" rel="noopener">https://developer.android.google.cn/studio</a><br>如果过程提示是否安装一些东西，点同意即可,会自动安装java jdk</li></ul><ol start="2"><li>为Android Studio安装Flutter和Dart插件<br>File-&gt;Settings-&gt;Plugins 然后搜索Flutter点击安装，这个时候会提示安装Dart插件，点安装 然后重启Android Studio<br>如图<br><img src="http://qiniu.xxgtalk.cn/blog/images/20190909203319.png" alt="20190909203319.png"></li></ol><h3 id="设置环境变量-1"><a href="#设置环境变量-1" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><ul><li>添加系统环境变量<pre class=" language-bash"><code class="language-bash">// 电脑/Users/用户名/.bash_profile<span class="token comment" spellcheck="true"># Android 环境变量 xiexingen为我的用户名</span><span class="token function">export</span> ANDROID_HOME<span class="token operator">=</span>/Users/xiexingen/Library/Android/sdk<span class="token comment" spellcheck="true"># Android 模拟器路径</span><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span><span class="token keyword">:</span><span class="token variable">${ANDROID_HOME}</span>/emulator<span class="token comment" spellcheck="true"># Android tools 路径</span><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span><span class="token keyword">:</span><span class="token variable">${ANDROID_HOME}</span>/tools<span class="token comment" spellcheck="true"># Android 平台工具路径</span><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span><span class="token keyword">:</span><span class="token variable">${ANDROID_HOME}</span>/platform-tools<span class="token comment" spellcheck="true"># Android NDK路径</span>ANDROID_NDK_HOME<span class="token operator">=</span>/Users/xiexingen/Library/Android/ndk/android-ndk-r10e<span class="token comment" spellcheck="true"># Flutter镜像</span><span class="token function">export</span> PUB_HOSTED_URL<span class="token operator">=</span>https://pub.flutter-io.cn<span class="token function">export</span> FLUTTER_STORAGE_BASE_URL<span class="token operator">=</span>https://storage.flutter-io.cn<span class="token comment" spellcheck="true"># Flutter 环境变量</span><span class="token function">export</span> PATH<span class="token operator">=</span>/Users/xiexingen/flutter/bin:<span class="token variable">$PATH</span></code></pre></li></ul><blockquote><p>配置完成后，需要重启电脑</p></blockquote><h3 id="安装Xcode"><a href="#安装Xcode" class="headerlink" title="安装Xcode"></a>安装Xcode</h3><ol><li>通过苹果应用商店安装</li><li>配置Xcode命令行工具以使用最新安装的Xcode版本<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> xcode-select --switch /Applications/Xcode.app/Contents/Developer</code></pre></li></ol><h3 id="设置IOS模拟器"><a href="#设置IOS模拟器" class="headerlink" title="设置IOS模拟器"></a>设置IOS模拟器</h3><ol><li>在终端输入如下命令行打开一个ios模拟器<pre class=" language-bash"><code class="language-bash"><span class="token function">open</span> -a Simulator</code></pre></li><li>通过模拟器菜单的 <em>硬件-&gt;设备</em>,确保是64位的iphone5s或更新的模拟器</li></ol><h3 id="如何将Flutter安装到IOS真机上"><a href="#如何将Flutter安装到IOS真机上" class="headerlink" title="如何将Flutter安装到IOS真机上"></a>如何将Flutter安装到IOS真机上</h3><p>要通过<em>flutter run</em> 将Flutter应用安装到ios整机设备，需要一些额外的工具和一个Apple账号，还需要在Xcode中进行设置：</p><blockquote><p>当然，用XCode来讲Flutter运行在真机上更简单，只需要点 <em>run</em>按钮即可，可以根据需要进行两种不同的运行方式；  </p><ol><li>安装 <a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a></li><li>确保homebrew最新<pre class=" language-bash"><code class="language-bash">brew update</code></pre></li><li>打开终端并运行如下命令来安装用于将Flutter应用安装到IOS设备的工具<pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> --HEAD usbmuxdbrew <span class="token function">link</span> usbmuxdbrew <span class="token function">install</span> --HEAd libimobiledevicebrew <span class="token function">install</span> ideviceinstaller ios-deploy cocoapodspod setup</code></pre>如果这些命令中的任何一个失败并出现错误，可运行<em>brew doctor</em>并按照说明来解决问题</li></ol></blockquote><ol start="4"><li>遵循Xcode前面流程来配置项目</li></ol><ul><li>在你Flutter项目目录中通过<em>open ios/Runner.xcworkspace</em>打开默认的Xcode workspace</li><li>在Xcode中，选择导航面板左侧中的Runner项目</li><li>在Runner target设置页面中，确保在 常规&gt;前面&gt;团队 下选择了您的开发团队。当你选择一个团队时，Xcode会创建并下载开发证书，向您的设备注册您的账户，并创建和下载配置文件(如果需要)<ul><li>要开始您的第一个IOS开发项目，您可能需要使用您的APP ID登录Xcode</li><li>任何App Id都支持开发和测试，但是如想法不到App Store则需要支付99到的开发者账号</li></ul></li><li>当你第一次attach真机设备进行ios开发时，需要同时信任你的Mac和该设备上的开发证书。首次将IOS设备连接到Mac时，请在对话中选择 <em>信任</em>,然后，转到IOS设备上的设置应用程序，选择 常规&gt;设备管理 并信任您的证书<ul><li>如果Xcode中的自动签名失败，请验证项目的 General&gt;Identity&gt;Bundle Identifier值是否唯一.</li></ul></li></ul><ol start="5"><li>通过flutter run 运行启动项目<pre class=" language-bash"><code class="language-bash">flutter run</code></pre></li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ul><li>运行 adb // 检测android相关</li><li>运行flutter doctor  // 检测flutter相关<blockquote><p>第一次运行flutter命令(如 flutter doctor)，它会下载自己的依赖项目并自动编译，并缓存</p></blockquote></li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="无法启动模拟器"><a href="#无法启动模拟器" class="headerlink" title="无法启动模拟器"></a>无法启动模拟器</h3><blockquote><p>emulator: ERROR:x86 emulation currently requires hardware acceleration! Please ensure Windows Hypervisor Platform (WHPX) is properly installed and usable. CPU acceleration status: HAXM is not installed on this machine<br>解决方案:选择 Tools-&gt; SDK Manager -&gt; SDK Tools,安装 HAXM 即可<br><img src="http://qiniu.xxgtalk.cn/blog/images/20190909204602.png" alt="20190909204602.png"></p></blockquote><h3 id="创建flutter项目"><a href="#创建flutter项目" class="headerlink" title="创建flutter项目"></a>创建flutter项目</h3><ol><li><p>通过android studio创建<br>File-&gt;Create-&gt;New Flutter Project</p></li><li><p>通过命令行<br>flutter create my_first_app</p></li></ol><h3 id="运行flutter项目"><a href="#运行flutter项目" class="headerlink" title="运行flutter项目"></a>运行flutter项目</h3><ol><li><p>通过android studio 启动按钮</p></li><li><p>命令行运行android模拟器</p><pre class=" language-bash"><code class="language-bash">// hw1 表示模拟器的名称emulator -avd hw1</code></pre></li><li><p>命令行 flutter run<br>前置条件，需要一个已经启动的android模拟器或者连接到电脑的android设备</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flutter-01 环境搭建&lt;br&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://blog.xxgtalk.cn/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://blog.xxgtalk.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>写博客的神器-图床篇</title>
    <link href="http://blog.xxgtalk.cn/2019/08/26/other/blog-image-lib/"/>
    <id>http://blog.xxgtalk.cn/2019/08/26/other/blog-image-lib/</id>
    <published>2019-08-26T12:10:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>vscode下使用 PicGo自动上传图片<br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo github地址</a><br><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html" target="_blank" rel="noopener">PicGo 文档地址</a> </p></blockquote><h3 id="纯手工时代"><a href="#纯手工时代" class="headerlink" title="纯手工时代"></a>纯手工时代</h3><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th></tr></thead><tbody><tr><td style="text-align:left">站内</td><td style="text-align:left">1.图片自定义命名<br> 2.方便管理迁移</td><td style="text-align:left">1.增加博客服务器压力(一般都是比较弱的机器)<br> 2. 操作麻烦</td></tr><tr><td style="text-align:left">外部资源服务器<br>比如(七牛、微博、腾讯云、阿里云等)</td><td style="text-align:left">1. 减轻服务器压力<br></td><td style="text-align:left">1.操作麻烦，不好管理图片</td></tr></tbody></table><h3 id="工业1-0时代"><a href="#工业1-0时代" class="headerlink" title="工业1.0时代"></a>工业1.0时代</h3><p>今天的重点是，vscode下的<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a>插件,通过简单的配置可以实现切换 七牛、微博、腾讯云COS、又拍云、github、阿里云oss、imgur等，与vscode很方便的集成，综合对比了下 腾讯云、阿里云皆收费，github国内又有点慢，最后选择了七牛，每个月10G 博客应该够用，配置如下:<br><img src="http://qiniu.xxgtalk.cn/blog/images/20190807085943.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vscode下使用 PicGo自动上传图片&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://blog.xxgtalk.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://blog.xxgtalk.cn/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>DIY一个集搜索、排序、分页功能的列表组件</title>
    <link href="http://blog.xxgtalk.cn/2019/05/22/front/react/diy-component-pagedquery/"/>
    <id>http://blog.xxgtalk.cn/2019/05/22/front/react/diy-component-pagedquery/</id>
    <published>2019-05-22T12:10:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>DIY一个集搜索、排序、分页功能的列表组件<br><a id="more"></a></p><p><a href="https://github.com/wetrial/wetrial-template" target="_blank" rel="noopener">源码地址</a>: <a href="https://github.com/wetrial/wetrial-template" target="_blank" rel="noopener">https://github.com/wetrial/wetrial-template</a><br>效果<br><img src="https://cdn.nlark.com/yuque/0/2019/gif/173421/1558523693173-c0265a6e-5263-4317-bf76-99b17c86ec1c.gif#align=left&amp;display=inline&amp;height=513&amp;name=test.gif&amp;originHeight=1508&amp;originWidth=2193&amp;size=4252316&amp;status=done&amp;width=746" alt="test.gif"><br><a name="UKzZ5"></a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在中控台系统中经常需要带条件过滤、分页、排序等的列表页面，antd提供了表格、排序、分页等，多个页面中使用会发现里面其实有很多重复的代码，自己捣腾下最后有了这个组件，<br><a name="pfCYQ"></a></p><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><p><a name="7qJ13"></a></p><h2 id="列表使用"><a href="#列表使用" class="headerlink" title="列表使用"></a>列表使用</h2><p>如图所示:<br><img src="https://cdn.nlark.com/yuque/0/2019/png/173421/1558524295889-fe6fce9b-1d53-4849-898c-39a7decf52ec.png#align=left&amp;display=inline&amp;height=1323&amp;name=image.png&amp;originHeight=1985&amp;originWidth=2000&amp;size=270488&amp;status=done&amp;width=1333.3333333333333" alt="image.png"></p><ol><li>引入高阶组件pagedQuery</li><li>引入封装的TableList 基本上跟Antd table组件用法一致，只是初始化了许多默认参数</li><li><p>用高阶组件包裹组件，并传参</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// type为必须参数，一般对应dva中model的effects</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> string<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类型 一般指获取数据源的action</span>page<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前页 从1开始</span>defaultPageSize<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每页默认显示的条数</span>pageSize<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每页显示数量</span>record<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否记录搜索状态</span><span class="token punctuation">}</span></code></pre></li><li><p>请求附带的基础参数，通过<em>getQueryParams返回一个对象，用于一些特殊场景，一般为空</em></p></li><li>处理搜索按钮的点击事件，将搜索表单中的值收集并传递给onSearchData方法</li><li>处理重置按钮，将重置按钮的点击事件绑定来源于高阶组件给组件的onResetData</li><li><p>获取数据源并给到table<br><a name="AiF39"></a></p><h2 id="详情页面"><a href="#详情页面" class="headerlink" title="详情页面"></a>详情页面</h2><p>回退到列表页面有两种形式，<br>1.通过浏览器上的回退按钮<br>2.详情页面放置一个回退按钮，代码层面实现路由跳转到列表页<br>一般情况都使用第二种方式，因为如果编辑页面比较负责，可能里面有子页面，子页面又可以进入这一通过浏览器上的回退按钮需要点击N多次，再者，浏览器的回退有数量限制<br>同样，如图所示：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/173421/1558524894480-261376dd-c130-40e0-b993-23812add160f.png#align=left&amp;display=inline&amp;height=877&amp;name=image.png&amp;originHeight=1316&amp;originWidth=1714&amp;size=188537&amp;status=done&amp;width=1142.6666666666667" alt="image.png"></p></li><li><p>引入方法backRouter</p></li><li>在需要跳转路由的地方调用一下backRoute方法，并将路由传递给方法，该方法会返回之前记录的列表路由<br><a name="VNgB5"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1></li></ol><p>实现思路，通过高阶组件实现，<a href="https://github.com/wetrial/wetrial/blob/master/src/components/PagedQuery/index.tsx" target="_blank" rel="noopener">代码</a>  、  <a href="https://github.com/wetrial/wetrial/blob/master/src/components/PagedQuery/index.zh-CN.md" target="_blank" rel="noopener">api文档</a>  <br>记录搜索状态，通过sessionStorage来实现，考虑到sessionStore的一个优势，关闭当前tab页就失效了 省去还得去手动清除记录状态的麻烦(比如放到localStorage)，再者 这种查询状态不需要持久记录  <br>回退方法backRouter，由于高阶组件中会在组件的componentWillUnmount方法中记录搜索状态，以location的pathname为key，以location的search为值存放，所以通过backRouter方法匹配的时候会从sessionStorage中查询，如果有则带上查询串，以此来达到记录页面状态的效果</p><blockquote><p>更多请参观：<a href="https://www.yuque.com/wetrial/front-end/" target="_blank" rel="noopener">https://www.yuque.com/wetrial/front-end/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DIY一个集搜索、排序、分页功能的列表组件&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="http://blog.xxgtalk.cn/categories/React/"/>
    
    
      <category term="前端" scheme="http://blog.xxgtalk.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="http://blog.xxgtalk.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>优质文章收集(持续更新中...)</title>
    <link href="http://blog.xxgtalk.cn/2019/04/26/tools/articlecollections/"/>
    <id>http://blog.xxgtalk.cn/2019/04/26/tools/articlecollections/</id>
    <published>2019-04-26T01:10:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>各大优质文章收集(持续更新中…)<br><a id="more"></a></p><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p><a href="https://juejin.im/post/5cc089eae51d456e7d189f9d" target="_blank" rel="noopener">可能是最全的前端动效库汇总</a></p><p><a href="https://github.com/sorrycc/awesome-f2e-libs" target="_blank" rel="noopener">常用前端库</a></p><p><a href="https://github.com/sorrycc/awesome-tools" target="_blank" rel="noopener">awesome-tools</a></p><p><a href="https://juejin.im/post/5d08d3d3f265da1b7e103a4d?utm_source=gold_browser_extension" target="_blank" rel="noopener">前端工程化-5:你所需要的npm知识储备都在这了</a></p><p><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md" target="_blank" rel="noopener">正则相关</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">flex布局-语法篇</a>、<a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">flex布局-实战篇</a><br><a href="https://juejin.im/post/5d9bf530518825427b27639d" target="_blank" rel="noopener">ES6</a></p><h4 id="Chrome插件开发"><a href="#Chrome插件开发" class="headerlink" title="Chrome插件开发"></a>Chrome插件开发</h4><p><a href="https://github.com/sxei/chrome-plugin-demo" target="_blank" rel="noopener">chrome插件开发</a></p><p><a href="http://www.cnblogs.com/champagne/p/?page=2" target="_blank" rel="noopener">博客文章</a></p><p><a href="https://zjcqoo.github.io/-----https://developer.chrome.com/extensions" target="_blank" rel="noopener">官方资料</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各大优质文章收集(持续更新中…)&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用umi-library来打包组件</title>
    <link href="http://blog.xxgtalk.cn/2019/04/02/front/react/umi-library-self/"/>
    <id>http://blog.xxgtalk.cn/2019/04/02/front/react/umi-library-self/</id>
    <published>2019-04-02T13:35:10.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>通过umi-library将自己的组件打包成各种类型的包…<br><a id="more"></a></p><h1 id="文件格式说明"><a href="#文件格式说明" class="headerlink" title="文件格式说明"></a>文件格式说明</h1><h3 id="esm-用途"><a href="#esm-用途" class="headerlink" title="esm 用途"></a>esm 用途</h3><p>es6语法格式(也叫AMD)，主要用在浏览器中 export default …；可以做 tree-shaking(打包成一个文件，但是项目中使用时只引入需要的那一部分) </p><h3 id="cjs-用途"><a href="#cjs-用途" class="headerlink" title="cjs 用途"></a>cjs 用途</h3><p>es5的语法(也叫CommonJS)，目前主要给node用； module.exports=…</p><h3 id="umd-用途"><a href="#umd-用途" class="headerlink" title="umd 用途"></a>umd 用途</h3><p>兼容esm和cjs，先判断是否支持node模块module.exports</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>安装umi-library  <pre class=" language-node"><code class="language-node"> yarn add umi-library -D</code></pre></li><li>配置.umirc.library.js文件<pre class=" language-js"><code class="language-js"> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用babel方式打包 将按照源代码的文件目录进行打包，默认为rollup方式(将文件合并成一个)</span> esm<span class="token punctuation">:</span> <span class="token string">'babel'</span><span class="token punctuation">,</span>  cjs<span class="token punctuation">:</span> <span class="token string">'babel'</span><span class="token punctuation">,</span> autoprefixer<span class="token punctuation">:</span> <span class="token punctuation">{</span>     browsers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'ie>8'</span><span class="token punctuation">,</span> <span class="token string">'Safari >= 6'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> extraBabelPlugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">[</span>     <span class="token string">'babel-plugin-import'</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span>         libraryName<span class="token punctuation">:</span> <span class="token string">'antd'</span><span class="token punctuation">,</span>         libraryDirectory<span class="token punctuation">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>         style<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>执行打包<br>可以参考github项目 <a href="https://github.com/wetrial/wetrial" target="_blank" rel="noopener">https://github.com/wetrial/wetrial</a></li></ol><blockquote><p>umi-library<a href="https://github.com/umijs/umi/tree/master/packages/umi-library" target="_blank" rel="noopener">地址</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过umi-library将自己的组件打包成各种类型的包…&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="http://blog.xxgtalk.cn/categories/React/"/>
    
    
      <category term="前端" scheme="http://blog.xxgtalk.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="http://blog.xxgtalk.cn/tags/React/"/>
    
      <category term="umi" scheme="http://blog.xxgtalk.cn/tags/umi/"/>
    
  </entry>
  
  <entry>
    <title>使用travis自动部署到github</title>
    <link href="http://blog.xxgtalk.cn/2019/03/16/tools/travis/"/>
    <id>http://blog.xxgtalk.cn/2019/03/16/tools/travis/</id>
    <published>2019-03-16T01:10:15.000Z</published>
    <updated>2020-11-27T08:42:25.477Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用github-travis-ant-design-pro-site打造自己公司的前端开发文档站点"><a href="#使用github-travis-ant-design-pro-site打造自己公司的前端开发文档站点" class="headerlink" title="使用github+travis+ant-design-pro-site打造自己公司的前端开发文档站点"></a>使用github+travis+ant-design-pro-site打造自己公司的前端开发文档站点</h4><a id="more"></a><h4 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h4><blockquote><p>插播一条小广告，我们公司招人.net、前端(react栈) ；有求职意向可以私我内推(qq:1002275364)</p></blockquote><p>目前公司的系统是基于.net web mvc开发，由于历史原因吧，里面有razor写的，也有公司自定义的前端单页框架jui写的一部分，在后续的开发、维护过程中愈发困难；基于各方面考虑以最后打算后端基于.netcore；前端基于react+antd+dva+umi栈重构；</p><ol><li>为什么用.net core<br>其实吧，我跟后端是有很大的渊源的，做了好几年后端吧，发现.net后端其实蛮苦逼的，不仅得写后端api还得写前端页面(没办法，你让美工去写razor页面感觉有点过分)，这也是为什么要前后端分离的原因之一(虽然分离之后前端页面还是后端开发人员兼职写^_^)；<br>.net core 天生为了跨平台、高性能、微服务、云而生；作为一个后端黑带6道的我，中小型项目里面玩的还是蛮顺手的(像什么abp、DI、dapper、ef、NPOI、itextsharp、quartznet、CAP、SignalR、Polly、DotnetSpider等还是玩过一些些的，只要别跟我扯什么动不动就双十一的场景，还是可以聊的下去的)<br>其次，.net core生态圈目前虽然不如java等，但是还是可以看到一直在进步；像什么桌面应用、Xamarin、ML.NET、爬虫、Xamarin、区块链、IoT、Unity3D、等都有涉及到;微服务方向，有Ocelot、Consul、Polly 等等等等等等等等等等等等等…  </li><li>为啥用react+antd+dva+umi【+ts】栈<br>目前开发人员以后端人员为主力，对jquery栈比较熟悉；切换到react后需要比较大的转变，需要接触很多新知识，比如es6的析构赋值、rest、箭头函数、Generate、Promise、模板字符串;再比如 react的生命周期、redux的数据流等 这些都是新的东西；考虑到各方面，最终打算数据量方案使用dva(简单明了以model为单位集reducers、effects、subscribe等)，至于antd不用过多介绍，业界公认前端ui库</li></ol><p>好像有点跑题了<del>~</del></p><h4 id="工作准备"><a href="#工作准备" class="headerlink" title="工作准备"></a>工作准备</h4><ol><li>注册账号<a href="https://github.com" target="_blank" rel="noopener">github</a>、<a href="https://travis-ci.org" target="_blank" rel="noopener">travis</a></li><li>github上创建仓库(wetrial-site)</li><li>github上生成一个token(记得保存下来)，用于travis推送代码到gh-pages分支<br><img src="http://qiniu.xxgtalk.cn/blog/images/tools/travis_github_generate_token.jpg" alt="生成token"><br>记得将tokens保存下来，稍后要用到，仓库权限选择第一项 repo即可  </li><li>travis设置<br>点击头像、然后选择项目，默认是用户，如果你的项目是组织项目的，需要切换到组织，如图所示<br><img src="http://qiniu.xxgtalk.cn/blog/images/tools/travis_project_list.jpg" alt="travis项目选择"> </li><li>进入项目配置页面，如图<br><img src="http://qiniu.xxgtalk.cn/blog/images/tools/travis_project_setting.jpg" alt="travis项目选择"><br>添加环境变量相关东西，包括域名、token等<br><img src="http://qiniu.xxgtalk.cn/blog/images/tools/travis_environment.jpg" alt="配置">   </li><li>回到实际的项目<br>从ant-design-pro-site拉取代码，然后根据自己的实际情况做修改；比如我去掉了尾栏的一些东西，增加了css相关的大栏(这里不具体介绍)  </li><li>在根目录下添加travis的配置文件.travis.yml 内容如下所示<br><code>`</code> yml<br>language: node_js</li></ol><p>node_js:</p><ul><li>“8”</li></ul><h1 id="缓存依赖"><a href="#缓存依赖" class="headerlink" title="缓存依赖"></a>缓存依赖</h1><p>cache:<br>  directories:</p><pre><code>- node_modules</code></pre><p>before_install:</p><ul><li>export TZ=’Asia/Shanghai’ # 更改时区</li></ul><h1 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h1><p>install:</p><ul><li>npm install</li></ul><h1 id="构建脚本"><a href="#构建脚本" class="headerlink" title="构建脚本"></a>构建脚本</h1><p>script: </p><ul><li>npm run build-site</li></ul><h1 id="分支白名单"><a href="#分支白名单" class="headerlink" title="分支白名单"></a>分支白名单</h1><p>branches:<br>  only:</p><pre><code>- master # 只对 master 分支进行构建</code></pre><h1 id="GitHub-Pages-部署"><a href="#GitHub-Pages-部署" class="headerlink" title="GitHub Pages 部署"></a>GitHub Pages 部署</h1><p>deploy:</p><ul><li>provider: pages<br>skip_cleanup: true<h1 id="在项目仪表盘的-Settings-gt-Environment-Variables-中配置"><a href="#在项目仪表盘的-Settings-gt-Environment-Variables-中配置" class="headerlink" title="在项目仪表盘的 Settings -&gt; Environment Variables 中配置"></a>在项目仪表盘的 Settings -&gt; Environment Variables 中配置</h1>github_token: $GITHUB_TOKEN<h1 id="将-build-目录下的内容推送到默认的-gh-pages-分支上，并不会连带-build-目录一起"><a href="#将-build-目录下的内容推送到默认的-gh-pages-分支上，并不会连带-build-目录一起" class="headerlink" title="将 build 目录下的内容推送到默认的 gh-pages 分支上，并不会连带 build 目录一起"></a>将 build 目录下的内容推送到默认的 gh-pages 分支上，并不会连带 build 目录一起</h1>local_dir: _site<h1 id="绑定自定义域名，根据自己的情况来"><a href="#绑定自定义域名，根据自己的情况来" class="headerlink" title="绑定自定义域名，根据自己的情况来"></a>绑定自定义域名，根据自己的情况来</h1>fqdn: $CUSTOM_DOMAIN<br>name: $GIT_NAME<br>email: $GIT_EMAIL<br><code>`</code><br>然后提交并同步到github,回到travis将会看到如下一幕<br><img src="http://qiniu.xxgtalk.cn/blog/images/tools/travis_log.jpg" alt="配置"><br>你也可以从日志里面看到具体的执行过程，等待执行完成后回到github中将会看到里面多了一个gh-pages分支，没错 这个分支就是travis中的deploy推送过去的，里面就是编译后的代码，再回到setting里面，将会看到已经默认配置好站点地址了，这里我们改改 使用自己的域名，如图所示:<br><img src="http://qiniu.xxgtalk.cn/blog/images/tools/travis_github_config.jpg" alt><br>最后，去域名管理页，将自己的这个子域名一定一个类型为CNAME的，地址为:wetrial.github.io</li></ul><h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>访问刚配置的地址:<a href="http://ant.xxgtalk.cn" target="_blank" rel="noopener">http://ant.xxgtalk.cn</a> 可以看到部署好的文档</p><p><img src="http://qiniu.xxgtalk.cn/blog/images/tools/wetrial-site.jpg" alt="wetrial示例"> </p><blockquote><p>此外,打算写一篇这块的手册，<a href="https://www.yuque.com/wetrial/front-end/xuyan" target="_blank" rel="noopener">地址:https://www.yuque.com/wetrial/front-end/xuyan</a> 欢迎 <a href="https://www.yuque.com/wetrial/front-end/xuyan" target="_blank" rel="noopener">FORK</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;使用github-travis-ant-design-pro-site打造自己公司的前端开发文档站点&quot;&gt;&lt;a href=&quot;#使用github-travis-ant-design-pro-site打造自己公司的前端开发文档站点&quot; class=&quot;headerlink&quot; title=&quot;使用github+travis+ant-design-pro-site打造自己公司的前端开发文档站点&quot;&gt;&lt;/a&gt;使用github+travis+ant-design-pro-site打造自己公司的前端开发文档站点&lt;/h4&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>利用ngrok来做内网穿透</title>
    <link href="http://blog.xxgtalk.cn/2018/12/17/tools/ngrok/"/>
    <id>http://blog.xxgtalk.cn/2018/12/17/tools/ngrok/</id>
    <published>2018-12-17T11:10:12.000Z</published>
    <updated>2020-11-27T08:42:25.473Z</updated>
    
    <content type="html"><![CDATA[<p>我有很多自己的个人代码是跑在家里的服务器中的.一般来说都是自动化的处理我的一些生活问题,与数据收集等相关活动. 所以一般没有客户端访问家里服务器的需求. 但是很多时候脑子突发奇想.有一些小点子,一些小的bug或者小的优化,代码修改完成之后,有一个部署到需求. 因为家里服务器没有一个稳定的外网IP的,外网不能直接连接服务器. 所以我们需要 内网穿透.<br><a id="more"></a></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li>首先你需要去官网注册一个账号</li><li>下载ngrok,并且解压到一个你喜欢的目录下面</li><li>去官网复制你的授权码</li><li>授权ngrok<pre class=" language-bash"><code class="language-bash">ngrok authtoken 授权码</code></pre><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><pre class=" language-bash"><code class="language-bash">ngrok http 8080</code></pre></li></ol><h3 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h3><pre class=" language-bash"><code class="language-bash">ngrok tcp 22</code></pre><p><img src="http://qiniu.xxgtalk.cn/blog/images/20191217094149.png" alt="20191217094149.png"></p><p>最终你会得到,一个外网可以访问的地址. 用这个地址就可以直接访问到你本机的端口了.  </p><p>当我们拥有这样一个公网地址之后,我们就可以ssh来控制家里的机器 或者使用github的webhook来做一切你想要做的事情.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我有很多自己的个人代码是跑在家里的服务器中的.一般来说都是自动化的处理我的一些生活问题,与数据收集等相关活动. 所以一般没有客户端访问家里服务器的需求. 但是很多时候脑子突发奇想.有一些小点子,一些小的bug或者小的优化,代码修改完成之后,有一个部署到需求. 因为家里服务器没有一个稳定的外网IP的,外网不能直接连接服务器. 所以我们需要 内网穿透.&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://blog.xxgtalk.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
